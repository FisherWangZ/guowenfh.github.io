<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>三省吾身丶丶</title>
  <subtitle>兴趣遍地都是，专注和持之以恒才是真正稀缺的。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://guowenfh.github.io/"/>
  <updated>2016-10-15T03:30:53.000Z</updated>
  <id>http://guowenfh.github.io/</id>
  
  <author>
    <name>guowenfh</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Node.js 模块系统</title>
    <link href="http://guowenfh.github.io/2016/10/15/node-module-system/"/>
    <id>http://guowenfh.github.io/2016/10/15/node-module-system/</id>
    <published>2016-10-15T03:18:41.000Z</published>
    <updated>2016-10-15T03:30:53.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>什么是模块?</p>
</blockquote>
<ul>
<li>在 node 中，文件和模块是一一对应的，也就是一个文件就是一个模块</li>
<li>每个模块都有自己的作用域</li>
<li>我们使用 var 来申明的一个变量，他并不是全局的，而是属于当前模块下</li>
</ul>
<h2 id="模块的加载与使用"><a href="#模块的加载与使用" class="headerlink" title="模块的加载与使用"></a>模块的加载与使用</h2><h3 id="模块的引入"><a href="#模块的引入" class="headerlink" title="模块的引入"></a>模块的引入</h3><p>在 node 中,我们使用 <code>require(&#39;模块&#39;)</code> 的形式将一个模块引入到我们的当前的文件中来。关于 <code>require</code> 路径的写法也有如下几种:</p>
<ul>
<li>模块路径可以是一个以 <code>/</code> 开头，表示一个 <strong>绝对路径</strong></li>
<li>模块路径以 <code>./</code> 开头，表示当前目录出发的 <strong>相对路径</strong></li>
<li>模块路径如果没有以 <code>/</code> 或者 <code>./</code> 开头，那么这个模块要么是 <strong>核心模块</strong> 要么是通过 <strong>npm</strong> 安装在 node_modules 文件夹下的。</li>
</ul>
<p>看到上面的不同路径写法, 我们就想起来在 web 中引入当前文件夹中的文件时是不需要加上<code>./</code>的, 但在 node 中使用 <code>./</code> 或 <code>/</code> 开头的路径和不使用时,有着很大的差别。</p>
<h3 id="模块的加载机制"><a href="#模块的加载机制" class="headerlink" title="模块的加载机制"></a>模块的加载机制</h3><ol>
<li>首先按照加载的模块的文件名称进行查找</li>
<li>如果没有找到，则会在模块文件名称后加上 <code>.js</code> 的后缀，进行查找</li>
<li>如果还没有找到，则会在文件名称后加上 <code>.json</code> 的后缀，进行查找</li>
<li>如果还没有，则会在文件名称后加上 <code>.node</code> 的后缀，进行查找</li>
<li>最终未找到，抛出异常</li>
</ol>
<h3 id="模块数据的使用"><a href="#模块数据的使用" class="headerlink" title="模块数据的使用"></a>模块数据的使用</h3><p>与浏览器中不同 , 在 node 中，每一个模块都有自己的作用域，在模块中使用 var 申明的变量的作用域范围是在该模块内，而不是 node 全局的。<br>但是你忘记了使用 var 进行变量声明,恭喜你这时和浏览器中忘记使用的效果是一致的。该变量也将挂在全局对象上。<br>只不过在 <code>node</code>中，全局对象是<code>global</code>，而不是浏览器中的<code>window</code></p>
<p>下面看一个简单的例子:</p>
<p>我们从两个文件 <code>a.js</code> 和 <code>b.js</code> 就可以简单的看到 node 的声明变量的作用域。</p>
<p>a.js:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="string">'这是a声明的变量'</span>;</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'这是a.js模块'</span>);</div></pre></td></tr></table></figure></p>
<p>b.js:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>(<span class="string">'./2.js'</span>);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'bbbb'</span>);</div><div class="line"><span class="built_in">console</span>.log(a);</div><div class="line"><span class="built_in">console</span>.log(global.a);</div></pre></td></tr></table></figure></p>
<p><code>node b.js</code> 输出结果:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">这是<span class="number">2.</span>js模块</div><div class="line">bbbb</div><div class="line"><span class="built_in">console</span>.log(a); <span class="comment">//ReferenceError: a is not defined</span></div></pre></td></tr></table></figure></p>
<p>至于去掉 var 之后会是怎么样,大家自己试试吧 ^ ^</p>
<h3 id="暴露模块API"><a href="#暴露模块API" class="headerlink" title="暴露模块API"></a>暴露模块API</h3><blockquote>
<p>module、module.exports、exports</p>
</blockquote>
<p>如同上面代码中所展示的，在 nodejs 中不能直接去拿到另一个模块中的变量函数等等。要让模块暴露一个API成为 <code>require</code>调用的返回值，我们就需要通过 <code>module.exports</code> 或者 <code>exports</code> 对外提供模块内部变量的访问。</p>
<p>默认情况下，每个模块都会暴露处一个空对象，如果你想要在该对象上添加属性，那么简单的使用 <code>exports</code> 即可。</p>
<p>看这个例子：</p>
<p>module_a.js:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(exports === <span class="built_in">module</span>.exports)</div><div class="line">exports.name = <span class="string">'module_a.js'</span></div><div class="line">exports.data = <span class="string">'this is module_a.js data'</span></div><div class="line">exports.getDate = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>module_b.js:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="built_in">require</span>(<span class="string">'./module_a.js'</span>)</div><div class="line"><span class="built_in">console</span>.log(a.name)</div><div class="line"><span class="built_in">console</span>.log(a.data)</div><div class="line"><span class="built_in">console</span>.log(a.getDate())</div></pre></td></tr></table></figure></p>
<p><code>node module_b.js</code>输出:<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="literal">true</span></div><div class="line">module_a.js</div><div class="line">this is module_a.js data</div><div class="line">Thu Sep 22 2016 22:23:59 GMT+0800 (CST)</div></pre></td></tr></table></figure></p>
<p>可以看到这里实际上在模块内部 <code>exports</code> 就是对于<code>module.exports</code>的引用，并且在使用<code>require</code>引入模块之后，a 是一个对象。可见外部模块通过 <code>require(模块)</code> 方法加载模块，该函数返回的就是被加载模块的 <code>module.exports</code> 对象</p>
<p>如果这样在 <code>module.exports</code> 对象上一个一个添加属性还满足不了你的需求，你还可以将 <code>module.exports</code> 彻底重写。我们将上面的两个文件改写：</p>
<p>module_a.js:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">text</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'printf: '</span> + text);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>module_b.js:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="built_in">require</span>(<span class="string">'./module_a.js'</span>)</div><div class="line">a(<span class="string">'ok'</span>);</div></pre></td></tr></table></figure></p>
<p><code>node module_b.js</code>输出:<code>printf: ok</code></p>
<p>这样有一个需要注意的地方是：直接覆盖 <code>exports</code> 或者 <code>module.exports</code>让模块导出一个值，这样做会破坏 <code>exports</code> 和  <code>module.exports</code> 的引用关系。</p>
<p>这是对于 node 的模块系统的学习，理解有限，如果有错误之处，请指出，谢谢！</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;什么是模块?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;在 node 中，文件和模块是一一对应的，也就是一个文件就是一个模块&lt;/li&gt;
&lt;li&gt;每个模块都有自己的作用域&lt;/li&gt;
&lt;li&gt;我们使用 var 来申明的一个变量，他并不是全局
    
    </summary>
    
      <category term="node" scheme="http://guowenfh.github.io/categories/node/"/>
    
    
      <category term="Node.js" scheme="http://guowenfh.github.io/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>eslint 使用实践</title>
    <link href="http://guowenfh.github.io/2016/09/29/eslint-config-npmbace/"/>
    <id>http://guowenfh.github.io/2016/09/29/eslint-config-npmbace/</id>
    <published>2016-09-28T16:32:14.000Z</published>
    <updated>2016-09-28T16:36:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文地址：<a href="http://guowenfh.github.io/2016/09/29/eslint-config-npmbace/">http://guowenfh.github.io/2016/08/07/eslint-config-npmbace/</a></p>
<blockquote>
<p>在上一篇博客<a href="http://guowenfh.github.io/2016/08/07/ESLint-Rules/">详解 ESLint 规则，规范你的代码</a>中，经过对于 ESLint 规则的学习，当时就决定一定要将 ESLint 使用起来，进行语法校验，来减少我们在程序中可能出现的错误。<br>但在当时，我们仅仅是把 eslint 的规则过了一遍，并没有把 eslint 的使用过程描述出来，而且要真正的在实际中使用，以及想要在团队中推广开来，需要有一个渐渐的过程，所以反响平平，这篇博客十一个补充，我把一些常见的错误和最佳实践集合到了一起（最最基础的）。为了方便大家使用，还将配置作为一个 npm包 来方便大家使用～顺便也学了一下怎怎么发布</p>
</blockquote>
<h3 id="发布一个-eslint-规则的-npm-包"><a href="#发布一个-eslint-规则的-npm-包" class="headerlink" title="发布一个 eslint 规则的 npm 包"></a>发布一个 eslint 规则的 npm 包</h3><p>1.确保本地已经安装node和npm </p>
<p>2.申请npm帐号，直接上官网注册一下就好，在输入下面的命令添加把帐号加到本地之前之前，确保你npm的源地址是官方的地址（我把源切成了淘宝结果在发布包的时候发布不了）</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">npm adduser   </div><div class="line"></div><div class="line">Username: your name</div><div class="line">Password: your password</div><div class="line">Email: yourmail@gmail.com</div></pre></td></tr></table></figure>
<p>3.建立一个存放规则的文件夹，例如我使用的： <code>eslint-config-3introspection</code>（npm包的名称只能小写）<br>按照正常的流程<code>npm init</code>初始化项目，我们把规则存在在一个 <code>eslintrc.js</code>的文件夹中， 因为我们现在的规则实在是太简单，而且也没考虑要真的做为一个开源的项目来维护，我们在index.js只需要写下一句话<code>module.exports = require(&#39;./eslintrc&#39;);</code>，我们的<code>package.json</code>除了name，之外也没做什么修改。。。</p>
<p>（<strong>关于<code>package.json</code>的编写，以及一个最基本的npm包的模样长什么样，我这里不说了，网上很多，也比较简单</strong>）</p>
<p>准备工作都做好了就是发布了，很简单的一个命令：出现错误请自行网上查找把。。。</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">npm</span> publish</div></pre></td></tr></table></figure>
<h3 id="下面简单的说一下使用："><a href="#下面简单的说一下使用：" class="headerlink" title="下面简单的说一下使用："></a>下面简单的说一下使用：</h3><h4 id="第一步：npm-全局安装-eslint-和-eslint-config-3introspection"><a href="#第一步：npm-全局安装-eslint-和-eslint-config-3introspection" class="headerlink" title="第一步：npm 全局安装 eslint 和 eslint-config-3introspection"></a>第一步：npm 全局安装 <code>eslint</code> 和 <code>eslint-config-3introspection</code></h4><p>如果你还没全局安装eslint的话，先执行下面的命令全局安装eslint， 如果已经安装了请看下一条</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo npm install eslint -g</div></pre></td></tr></table></figure>
<p>在全局安装定制的 eslint 包</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo npm install eslint-config-3introspection -g</div></pre></td></tr></table></figure>
<p>成功效果如下：<br><img src="http://ww4.sinaimg.cn/large/801b780agw1f89ptaxh5wj20he035aaj.jpg" alt=""></p>
<p>依赖信息的错误不用去管，我们只是需要其中的配置文件而已。</p>
<p>（windows的用户有可能出现无法引入eslint无法引用到全局模块的问题，请将 <code>eslint-config-3introspection</code>，安装在你的工作区目录，以便不同项目都可以引用到）</p>
<h4 id="第二部：在项目的-根目录下-新建一个-eslintrc-文件"><a href="#第二部：在项目的-根目录下-新建一个-eslintrc-文件" class="headerlink" title="第二部：在项目的 根目录下 新建一个 .eslintrc 文件"></a>第二部：在项目的 <strong>根目录</strong>下 新建一个 <code>.eslintrc</code> 文件</h4><p>在文件内部添加下面这样的字段</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="string">"extends"</span>: <span class="string">"3introspection"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样就将我们定制的规则导入到项目中了。</p>
<h4 id="第三步：检查编辑器是否已经安装-eslint-插件"><a href="#第三步：检查编辑器是否已经安装-eslint-插件" class="headerlink" title="第三步：检查编辑器是否已经安装 eslint 插件"></a>第三步：检查编辑器是否已经安装 eslint 插件</h4><p>下面是sublimeText的：</p>
<p>打开<code>command+shift+p</code>，打开命令窗口，输入 <code>pcl</code> ，回车</p>
<p><img src="http://ww1.sinaimg.cn/large/006y8mN6gw1f7aipmz6m4j30m503k0sx.jpg" alt="pcl"></p>
<p>再输入 <code>sublimeLinter</code>,查看是否如下，不对的话一一安装这两个插件：</p>
<p><img src="http://ww4.sinaimg.cn/large/006y8mN6gw1f7aiqjjsnyj30kv0bdwfh.jpg" alt="sublimeLinter"></p>
<p>若上面两步成功，重启编辑器，再打开文件，应该就能看到 eslint 规则已经生效了，如下：</p>
<p><img src="http://ww3.sinaimg.cn/large/006y8mN6gw1f7aiya10dxj30jt083754.jpg" alt="错误"></p>
<p>这样就可以愉快的使用eslint进行语法校验拉😂😂😂</p>
<p><strong>失败的情况：</strong> 打开<code>command+shift+p</code>，打开命令窗口，输入 <code>sublimeLinter</code> 找到这一项，回车后,找到 eslint 开启选项，重启编辑器再查看是不是已经好了。<br><img src="http://ww1.sinaimg.cn/large/006y8mN6gw1f7aizq6abzj30me0dk75y.jpg" alt="sublimeLinter"></p>
<p>如果规则不不起效果又不知道是什么地方出了问题，参考附录1</p>
<h3 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h3><p>附录1：vscode<br>安装<br><img src="http://ww2.sinaimg.cn/large/006y8mN6gw1f7aj4ppwzej30cp0g6dgm.jpg" alt=""><br>.eslintrc将<code>{&quot;extends&quot;: &quot;3introspection&quot;}</code>，引入，重启，不起效果的话，vscode会有很明显的报错信息<br><img src="http://ww4.sinaimg.cn/large/801b780agw1f89r0bv5zmj210o027aal.jpg" alt=""><br>还是查找路径的问题，最简单的解决办法，在项目执行一次<code>npm i eslint-config-3introspection</code>，把配置按照到node_modul<br><img src="http://ww4.sinaimg.cn/large/801b780agw1f89qt0mzskj20pd06qjs9.jpg" alt=""><br>其他编辑器都类似</p>
<p>附录2：说明</p>
<ol>
<li>在项目目录中 <code>.eslintrc</code> 中的配置，会覆盖引入的配置，有兴趣的可以进行更详细的定制。例如加入以下字段，将项目的全局变量都列在这边。</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 项目中 定义的全局变量</span></div><div class="line"><span class="string">"globals"</span>: &#123;</div><div class="line">    <span class="string">"Tatami"</span>: <span class="literal">true</span>,</div><div class="line">    <span class="string">"$"</span>: <span class="literal">true</span></div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<ol>
<li>在你的 JavaScript 文件中，用注释指定全局变量，格式如下：</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* global var1, var2 */</span></div></pre></td></tr></table></figure>
<ol>
<li>可以在你的文件中使用以下格式的块注释来临时禁止规则出现警告：(禁用指定规则，空格后接规则名称，多个名称时逗号隔开)</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* eslint-disable */</span></div><div class="line"></div><div class="line">alert(<span class="string">'foo'</span>);<span class="comment">// eslint-disable-line 当前行上禁用所有规则：</span></div><div class="line"></div><div class="line"><span class="comment">/* eslint-enable */</span></div></pre></td></tr></table></figure>
<ol>
<li>快速查看当前模块所有错误，效果如下：</li>
</ol>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">eslint</span> 模块名/文件名</div></pre></td></tr></table></figure>
<ol>
<li><code>.eslintignore</code>,如同<code>.gitignore</code>一样忽略对于某些文件，文件夹的检查</li>
</ol>
<p><img src="http://ww2.sinaimg.cn/large/801b780agw1f89rimlemyj211a03p74v.jpg" alt=""></p>
<p>附录3:eslinrc.js 配置<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">    <span class="comment">// 环境定义了预定义的全局变量。更多在官网查看</span></div><div class="line">    <span class="string">'env'</span>: &#123;</div><div class="line">        <span class="string">'browser'</span>: <span class="literal">true</span>,</div><div class="line">        <span class="string">'node'</span>: <span class="literal">true</span>,</div><div class="line">        <span class="string">'commonjs'</span>: <span class="literal">true</span>,</div><div class="line">        <span class="string">'amd'</span>: <span class="literal">true</span>,</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">// JavaScript 语言选项</span></div><div class="line">    <span class="string">'parserOptions'</span>: &#123;</div><div class="line">        <span class="comment">// ECMAScript 版本</span></div><div class="line">        <span class="string">'ecmaVersion'</span>: <span class="number">6</span>,</div><div class="line">        <span class="string">'sourceType'</span>: <span class="string">'script'</span>, <span class="comment">// module</span></div><div class="line"></div><div class="line">    &#125;,</div><div class="line">    <span class="comment">/**</span></div><div class="line">     *  "off" 或 0 - 关闭规则</div><div class="line">     *  "warn" 或 1 - 开启规则，使用警告级别的错误：warn (不会导致程序退出),</div><div class="line">     *  "error" 或 2 - 开启规则，使用错误级别的错误：error (当被触发的时候，程序会退出)</div><div class="line">     */</div><div class="line">    <span class="string">'rules'</span>: &#123;</div><div class="line">        <span class="comment">// //////////////</span></div><div class="line">        <span class="comment">// 可能的错误 //</span></div><div class="line">        <span class="comment">// //////////////</span></div><div class="line">        <span class="string">'no-console'</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 禁止条件表达式中出现赋值操作符</span></div><div class="line">        <span class="string">'no-cond-assign'</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止在条件中使用常量表达式</span></div><div class="line">        <span class="string">'no-constant-condition'</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止 function 定义中出现重名参数</span></div><div class="line">        <span class="string">'no-dupe-args'</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止对象字面量中出现重复的 key</span></div><div class="line">        <span class="string">'no-dupe-keys'</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止重复的 case 标签</span></div><div class="line">        <span class="string">'no-duplicate-case'</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止空语句块</span></div><div class="line">        <span class="string">'no-empty'</span>: <span class="number">1</span>,</div><div class="line">        <span class="comment">// 禁止在正则表达式中使用空字符集 (/^abc[]/)</span></div><div class="line">        <span class="string">'no-empty-character-class'</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止对 catch 子句的参数重新赋值</span></div><div class="line">        <span class="string">'no-ex-assign'</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止不必要的布尔转换</span></div><div class="line">        <span class="string">'no-extra-boolean-cast'</span>: <span class="number">1</span>,</div><div class="line">        <span class="comment">// 禁止对 function 声明重新赋值</span></div><div class="line">        <span class="string">'no-func-assign'</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">//  禁止在嵌套的块中出现 function 或 var 声明</span></div><div class="line">        <span class="string">'no-inner-declarations'</span>: [<span class="number">2</span>, <span class="string">'functions'</span>],</div><div class="line">        <span class="comment">// 禁止 RegExp 构造函数中无效的正则表达式字符串</span></div><div class="line">        <span class="string">'no-invalid-regexp'</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止在 in 表达式中出现否定的左操作数</span></div><div class="line">        <span class="string">'no-negated-in-lhs'</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// !!!!!!!!!!!禁止出现令人困惑的多行表达式</span></div><div class="line">        <span class="string">'no-unexpected-multiline'</span>: <span class="number">1</span>,</div><div class="line">        <span class="comment">// 禁止在return、throw、continue 和 break语句之后出现不可达代码</span></div><div class="line">        <span class="string">'no-unreachable'</span>: <span class="number">1</span>,</div><div class="line">        <span class="comment">// 要求使用 isNaN() 检查 NaN</span></div><div class="line">        <span class="string">'use-isnan'</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 强制使用有效的 JSDoc 注释</span></div><div class="line">        <span class="string">'valid-jsdoc'</span>: [<span class="number">1</span>, &#123; <span class="string">'requireReturn'</span>: <span class="literal">false</span> &#125;],</div><div class="line">        <span class="comment">// 强制 typeof 表达式与有效的字符串进行比较</span></div><div class="line">        <span class="comment">// typeof foo === "undefimed" 错误</span></div><div class="line">        <span class="string">'valid-typeof'</span>: <span class="number">2</span>,</div><div class="line"></div><div class="line">        <span class="comment">// ////////////</span></div><div class="line">        <span class="comment">// 最佳实践 //</span></div><div class="line">        <span class="comment">// ////////////</span></div><div class="line"></div><div class="line">        <span class="comment">// 强制把变量的使用限制在其定义的作用域范围内</span></div><div class="line">        <span class="string">'block-scoped-var'</span>: <span class="number">1</span>,</div><div class="line">        <span class="comment">// 强制所有控制语句使用一致的括号风格</span></div><div class="line">        <span class="string">'curly'</span>: [<span class="number">2</span>, <span class="string">'all'</span>],</div><div class="line">        <span class="comment">// switch 语句强制 default 分支，也可添加 // no default 注释取消此次警告</span></div><div class="line">        <span class="string">'default-case'</span>: <span class="number">1</span>,</div><div class="line">        <span class="comment">// 使用 === 替代 == allow-null允许null和undefined==</span></div><div class="line">        <span class="string">'eqeqeq'</span>: [<span class="number">1</span>, <span class="string">'allow-null'</span>],</div><div class="line">        <span class="comment">// 不允许在 case 子句中使用词法声明</span></div><div class="line">        <span class="string">'no-case-declarations'</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止除法操作符显式的出现在正则表达式开始的位置</span></div><div class="line">        <span class="string">'no-div-regex'</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止在没有类型检查操作符的情况下与 null 进行比较</span></div><div class="line">        <span class="string">'no-eq-null'</span>: <span class="number">1</span>,</div><div class="line">        <span class="comment">// 禁止扩展原生类型</span></div><div class="line">        <span class="string">'no-extend-native'</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止不必要的 .bind() 调用</span></div><div class="line">        <span class="string">'no-extra-bind'</span>: <span class="number">1</span>,</div><div class="line">        <span class="comment">// 禁止数字字面量中使用前导和末尾小数点</span></div><div class="line">        <span class="string">'no-floating-decimal'</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁用不必要的嵌套块</span></div><div class="line">        <span class="string">'no-lone-blocks'</span>: <span class="number">1</span>,</div><div class="line">        <span class="comment">// 禁止在循环中出现 function 声明和表达式</span></div><div class="line">        <span class="string">'no-loop-func'</span>: <span class="number">1</span>,</div><div class="line">        <span class="comment">// 禁止对原生对象赋值</span></div><div class="line">        <span class="string">'no-native-reassign'</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止在非赋值或条件语句中使用 new 操作符</span></div><div class="line">        <span class="string">'no-new'</span>: <span class="number">1</span>,</div><div class="line">        <span class="comment">// 不允许对 function 的参数进行重新赋值</span></div><div class="line">        <span class="string">'no-param-reassign'</span>: [<span class="number">1</span>, &#123; <span class="string">'props'</span>: <span class="literal">true</span> &#125;],</div><div class="line">        <span class="comment">// 禁止使用 var 多次声明同一变量</span></div><div class="line">        <span class="string">'no-redeclare'</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止自我赋值</span></div><div class="line">        <span class="string">'no-self-assign'</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止自身比较</span></div><div class="line">        <span class="string">'no-self-compare'</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁用一成不变的循环条件</span></div><div class="line">        <span class="string">'no-unmodified-loop-condition'</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止不必要的 .call() 和 .apply()</span></div><div class="line">        <span class="string">'no-useless-call'</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止不必要的字符串字面量或模板字面量的连接</span></div><div class="line">        <span class="string">'no-useless-concat'</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 强制在parseInt()使用基数参数</span></div><div class="line">        <span class="string">'radix'</span>: <span class="number">1</span>,</div><div class="line">        <span class="comment">// 要求所有的 var 声明出现在它们所在的作用域顶部</span></div><div class="line">        <span class="string">'vars-on-top'</span>: <span class="number">1</span>,</div><div class="line">        <span class="comment">// 要求 IIFE 使用括号括起来</span></div><div class="line">        <span class="string">'wrap-iife'</span>: [<span class="number">2</span>, <span class="string">'any'</span>],</div><div class="line"></div><div class="line">        <span class="comment">// ////////////</span></div><div class="line">        <span class="comment">//  变量声明 //</span></div><div class="line">        <span class="comment">// ////////////</span></div><div class="line"></div><div class="line">        <span class="comment">// 禁止删除变量</span></div><div class="line">        <span class="string">'no-delete-var'</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止 var 声明 与外层作用域的变量同名</span></div><div class="line">        <span class="string">'no-shadow'</span>: <span class="number">1</span>,</div><div class="line">        <span class="comment">// 禁止覆盖受限制的标识符</span></div><div class="line">        <span class="string">'no-shadow-restricted-names'</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁用未声明的变量，除非它们在 /*global */ 注释中被提到</span></div><div class="line">        <span class="string">'no-undef'</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止将变量初始化为 undefined</span></div><div class="line">        <span class="string">'no-undef-init'</span>: <span class="number">1</span>,</div><div class="line">        <span class="comment">// 禁止将 undefined 作为标识符</span></div><div class="line">        <span class="string">'no-undefined'</span>: <span class="number">1</span>,</div><div class="line">        <span class="comment">// 禁止出现未使用过的变量</span></div><div class="line">        <span class="string">'no-unused-vars'</span>: [<span class="number">1</span>, &#123; <span class="string">'vars'</span>: <span class="string">'all'</span>, <span class="string">'args'</span>: <span class="string">'none'</span> &#125;],</div><div class="line">        <span class="comment">// 不允许在变量定义之前使用它们</span></div><div class="line">        <span class="string">'no-use-before-define'</span>: <span class="number">2</span>,</div><div class="line">    &#125;,</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文地址：&lt;a href=&quot;http://guowenfh.github.io/2016/09/29/eslint-config-npmbace/&quot;&gt;http://guowenfh.github.io/2016/08/07/eslint-config-npmbace/&lt;/a
    
    </summary>
    
      <category term="前端技术" scheme="http://guowenfh.github.io/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="js" scheme="http://guowenfh.github.io/tags/js/"/>
    
      <category term="代码风格" scheme="http://guowenfh.github.io/tags/%E4%BB%A3%E7%A0%81%E9%A3%8E%E6%A0%BC/"/>
    
  </entry>
  
  <entry>
    <title>详解 ESLint 规则，规范你的代码</title>
    <link href="http://guowenfh.github.io/2016/08/07/ESLint-Rules/"/>
    <id>http://guowenfh.github.io/2016/08/07/ESLint-Rules/</id>
    <published>2016-08-07T02:04:04.000Z</published>
    <updated>2016-09-11T08:24:40.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>因为前几天发现 CSDN上有直接把我文章 复制过去然后标原创的情况，以后会统一在博客头部加入原文链接~</p>
<p><a href="http://guowenfh.github.io/2016/08/07/ESLint-Rules/">本文个人博客地址</a></p>
</blockquote>
<p>在很久之前就想通过工具来规范自己的代码风格，减少程序出错的概率，如果看过我的<a href="http://guowenfh.github.io/2015/12/26/SublimeText/">一个前端程序猿的Sublime Text3的自我修养</a>，这篇博客的朋友，肯定知道在当时我使用<code>SublimeLinter-jshint</code>插件来规范风格，但是实际上一直懒癌发作也没去看它的文档，使用着它默认的规则。不过现在是时候切换到 ESLint 了！</p>
<p>作为一个<del>有理想有抱负</del>的前端工程师，只是使用默认规则，而不是看完文档了然于心，显然是不行滴 ^_^.. 团队协作时，若是团队的代码风格统一，能够大大减少沟通成本。（其实面试时和老大聊到代码规范，当时就说到用 JSHint ，或者 ESLint 等工具来统一的。。。这也算是我来填一个坑吧~）</p>
<p>好了，前情摘要就到这，我们开始吧！</p>
<h3 id="什么是-ESLint-？"><a href="#什么是-ESLint-？" class="headerlink" title="什么是 ESLint ？"></a>什么是 ESLint ？</h3><blockquote>
<p>ESLint 是在 ECMAScript/JavaScript 代码中识别和报告模式匹配的工具，它的目标是保证代码的一致性和避免错误。在许多方面，它和 JSLint、JSHint 相似，除了少数的例外：</p>
<ul>
<li>ESLint 使用 Espree 解析 JavaScript。</li>
<li>ESLint 使用 AST 去分析代码中的模式</li>
<li>ESLint 是完全插件化的。每一个规则都是一个插件并且你可以在运行时添加更多的规则。</li>
</ul>
</blockquote>
<p>以上来自官网。不想再说下去，反正就是一个代码风格检测工具就对了</p>
<h3 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h3><ol>
<li><p>安装</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g eslint</div></pre></td></tr></table></figure>
</li>
<li><p>如果你第一次使用 ESLint，你必须使用 –init 命令新建一个配置文件：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">eslint --init</div></pre></td></tr></table></figure>
</li>
<li><p>使用 ESLint 检测任何 JavaScript 文件：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">eslint test.js <span class="built_in">test</span>2.js</div></pre></td></tr></table></figure>
</li>
<li><p>ESLint 中一些规则运行命令它可以帮你自动修复</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">eslint test.js --fix</div></pre></td></tr></table></figure>
</li>
</ol>
<p>为了可以更直观的反馈，可能更多的会直接安装编辑器插件来进行错误提示，以Sublime 为例：</p>
<p>在 <code>package control</code> 中 ，先安装在  <code>SublimeLinter</code> ，再安装 <code>SublimeLinter-contrib-eslint</code> 在项目目录下新建 <code>.eslintrc</code> 文件，自定义规则。<br>重新载入文件应该就生效了（不生效的话 <code>Ctrl+Shift+P</code> 调用命令面板 找到<code>sublimelinter: toggle linter</code> 设置生效就好了），其他的编辑器异曲同工，就不再说了。</p>
<p>关于在如何在构建工具中使用，在这里不做说明（官网有）</p>
<h3 id="规则定义"><a href="#规则定义" class="headerlink" title="规则定义"></a>规则定义</h3><p>ESLint 支持几种格式的配置文件，如果同一个目录下有多个配置文件，ESLint 只会使用一个。优先级顺序如下：</p>
<ol>
<li><strong>JavaScript</strong> - 使用 .eslintrc.js 然后输出一个配置对象。</li>
<li><strong>YAML</strong> - 使用 .eslintrc.yaml 或 .eslintrc.yml 去定义配置的结构。</li>
<li><strong>JSON</strong>  -使用 .eslintrc.json 去定义配置的结构，ESLint 的 JSON 文件允许 JavaScript 风格的注释。</li>
<li><strong>Deprecated</strong>  -使用 .eslintrc，可以使 JSON 也可以是 YAML。</li>
<li><strong>package.json</strong> - 在 package.json 里创建一个 eslintConfig属性，在那里定义你的配置。</li>
</ol>
<p>下面就是规则啦，本人使用了<code>.eslintrc</code>格式，说明也在里面：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div><div class="line">400</div><div class="line">401</div><div class="line">402</div><div class="line">403</div><div class="line">404</div><div class="line">405</div><div class="line">406</div><div class="line">407</div><div class="line">408</div><div class="line">409</div><div class="line">410</div><div class="line">411</div><div class="line">412</div><div class="line">413</div><div class="line">414</div><div class="line">415</div><div class="line">416</div><div class="line">417</div><div class="line">418</div><div class="line">419</div><div class="line">420</div><div class="line">421</div><div class="line">422</div><div class="line">423</div><div class="line">424</div><div class="line">425</div><div class="line">426</div><div class="line">427</div><div class="line">428</div><div class="line">429</div><div class="line">430</div><div class="line">431</div><div class="line">432</div><div class="line">433</div><div class="line">434</div><div class="line">435</div><div class="line">436</div><div class="line">437</div><div class="line">438</div><div class="line">439</div><div class="line">440</div><div class="line">441</div><div class="line">442</div><div class="line">443</div><div class="line">444</div><div class="line">445</div><div class="line">446</div><div class="line">447</div><div class="line">448</div><div class="line">449</div><div class="line">450</div><div class="line">451</div><div class="line">452</div><div class="line">453</div><div class="line">454</div><div class="line">455</div><div class="line">456</div><div class="line">457</div><div class="line">458</div><div class="line">459</div><div class="line">460</div><div class="line">461</div><div class="line">462</div><div class="line">463</div><div class="line">464</div><div class="line">465</div><div class="line">466</div><div class="line">467</div><div class="line">468</div><div class="line">469</div><div class="line">470</div><div class="line">471</div><div class="line">472</div><div class="line">473</div><div class="line">474</div><div class="line">475</div><div class="line">476</div><div class="line">477</div><div class="line">478</div><div class="line">479</div><div class="line">480</div><div class="line">481</div><div class="line">482</div><div class="line">483</div><div class="line">484</div><div class="line">485</div><div class="line">486</div><div class="line">487</div><div class="line">488</div><div class="line">489</div><div class="line">490</div><div class="line">491</div><div class="line">492</div><div class="line">493</div><div class="line">494</div><div class="line">495</div><div class="line">496</div><div class="line">497</div><div class="line">498</div><div class="line">499</div><div class="line">500</div><div class="line">501</div><div class="line">502</div><div class="line">503</div><div class="line">504</div><div class="line">505</div><div class="line">506</div><div class="line">507</div><div class="line">508</div><div class="line">509</div><div class="line">510</div><div class="line">511</div><div class="line">512</div><div class="line">513</div><div class="line">514</div><div class="line">515</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="comment">// 环境定义了预定义的全局变量。</span></div><div class="line">    <span class="string">"env"</span>: &#123;</div><div class="line">        <span class="comment">//环境定义了预定义的全局变量。更多在官网查看</span></div><div class="line">        <span class="string">"browser"</span>: <span class="literal">true</span>,</div><div class="line">        <span class="string">"node"</span>: <span class="literal">true</span>,</div><div class="line">        <span class="string">"commonjs"</span>: <span class="literal">true</span>,</div><div class="line">        <span class="string">"amd"</span>: <span class="literal">true</span>,</div><div class="line">        <span class="string">"es6"</span>:<span class="literal">true</span>,</div><div class="line">        <span class="string">"mocha"</span>:<span class="literal">true</span></div><div class="line">    &#125;,</div><div class="line">    <span class="comment">// JavaScript 语言选项</span></div><div class="line">    <span class="string">"parserOptions"</span>: &#123;</div><div class="line">        <span class="comment">// ECMAScript 版本</span></div><div class="line">        <span class="string">"ecmaVersion"</span>: <span class="number">6</span>,</div><div class="line">        <span class="string">"sourceType"</span>: <span class="string">"script"</span>,<span class="comment">//module</span></div><div class="line">        <span class="comment">// 想使用的额外的语言特性:</span></div><div class="line">        <span class="string">"ecmaFeatures"</span>: &#123;</div><div class="line">            <span class="comment">// 允许在全局作用域下使用 return 语句</span></div><div class="line">            <span class="string">"globalReturn"</span>:<span class="literal">true</span>,</div><div class="line">            <span class="comment">// impliedStric</span></div><div class="line">            <span class="string">"impliedStrict"</span>:<span class="literal">true</span>,</div><div class="line">            <span class="comment">// 启用 JSX</span></div><div class="line">            <span class="string">"jsx"</span>:<span class="literal">true</span></div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">/**</span></div><div class="line">     *  "off" 或 0 - 关闭规则</div><div class="line">     *  "warn" 或 1 - 开启规则，使用警告级别的错误：warn (不会导致程序退出),</div><div class="line">     *  "error" 或 2 - 开启规则，使用错误级别的错误：error (当被触发的时候，程序会退出)</div><div class="line">     */</div><div class="line">    <span class="string">"rules"</span>: &#123;</div><div class="line"></div><div class="line">        <span class="comment">////////////////</span></div><div class="line">        <span class="comment">// 可能的错误  //</span></div><div class="line">        <span class="comment">////////////////</span></div><div class="line"></div><div class="line">        <span class="comment">// 禁止条件表达式中出现赋值操作符</span></div><div class="line">        <span class="string">"no-cond-assign"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁用 console</span></div><div class="line">        <span class="string">"no-console"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 禁止在条件中使用常量表达式</span></div><div class="line">        <span class="comment">// if (false) &#123;</span></div><div class="line">        <span class="comment">//     doSomethingUnfinished();</span></div><div class="line">        <span class="comment">// &#125; //cuowu</span></div><div class="line">        <span class="string">"no-constant-condition"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止在正则表达式中使用控制字符 ：new RegExp("\x1f")</span></div><div class="line">        <span class="string">"no-control-regex"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 数组和对象键值对最后一个逗号， never参数：不能带末尾的逗号, always参数：必须带末尾的逗号，</span></div><div class="line">        <span class="comment">// always-multiline：多行模式必须带逗号，单行模式不能带逗号</span></div><div class="line">        <span class="string">"comma-dangle"</span>: [<span class="number">1</span>, <span class="string">"always-multiline"</span>],</div><div class="line">        <span class="comment">// 禁用 debugger</span></div><div class="line">        <span class="string">"no-debugger"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止 function 定义中出现重名参数</span></div><div class="line">        <span class="string">"no-dupe-args"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止对象字面量中出现重复的 key</span></div><div class="line">        <span class="string">"no-dupe-keys"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止重复的 case 标签</span></div><div class="line">        <span class="string">"no-duplicate-case"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止空语句块</span></div><div class="line">        <span class="string">"no-empty"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止在正则表达式中使用空字符集 (/^abc[]/)</span></div><div class="line">        <span class="string">"no-empty-character-class"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止对 catch 子句的参数重新赋值</span></div><div class="line">        <span class="string">"no-ex-assign"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止不必要的布尔转换</span></div><div class="line">        <span class="string">"no-extra-boolean-cast"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">//  禁止不必要的括号 //(a * b) + c;//报错</span></div><div class="line">        <span class="string">"no-extra-parens"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 禁止不必要的分号</span></div><div class="line">        <span class="string">"no-extra-semi"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止对 function 声明重新赋值</span></div><div class="line">        <span class="string">"no-func-assign"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">//  禁止在嵌套的块中出现 function 或 var 声明</span></div><div class="line">        <span class="string">"no-inner-declarations"</span>: [<span class="number">2</span>, <span class="string">"functions"</span>],</div><div class="line">        <span class="comment">// 禁止 RegExp 构造函数中无效的正则表达式字符串</span></div><div class="line">        <span class="string">"no-invalid-regexp"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止在字符串和注释之外不规则的空白</span></div><div class="line">        <span class="string">"no-irregular-whitespace"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止在 in 表达式中出现否定的左操作数</span></div><div class="line">        <span class="string">"no-negated-in-lhs"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">//   禁止把全局对象 (Math 和 JSON) 作为函数调用  错误：var math = Math();</span></div><div class="line">        <span class="string">"no-obj-calls"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止直接使用 Object.prototypes 的内置属性</span></div><div class="line">        <span class="string">"no-prototype-builtins"</span>:<span class="number">0</span>,</div><div class="line">        <span class="comment">// 禁止正则表达式字面量中出现多个空格</span></div><div class="line">        <span class="string">"no-regex-spaces"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁用稀疏数组</span></div><div class="line">        <span class="string">"no-sparse-arrays"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止出现令人困惑的多行表达式</span></div><div class="line">        <span class="string">"no-unexpected-multiline"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止在return、throw、continue 和 break语句之后出现不可达代码</span></div><div class="line">        <span class="comment">/*</span></div><div class="line">            function foo() &#123;</div><div class="line">            return true;</div><div class="line">            console.log("done");</div><div class="line">            &#125;//错误</div><div class="line">        */</div><div class="line">        <span class="string">"no-unreachable"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 要求使用 isNaN() 检查 NaN</span></div><div class="line">        <span class="string">"use-isnan"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 强制使用有效的 JSDoc 注释</span></div><div class="line">        <span class="string">"valid-jsdoc"</span>: <span class="number">1</span>,</div><div class="line">        <span class="comment">// 强制 typeof 表达式与有效的字符串进行比较</span></div><div class="line">        <span class="comment">// typeof foo === "undefimed" 错误</span></div><div class="line">        <span class="string">"valid-typeof"</span>: <span class="number">2</span>,</div><div class="line"></div><div class="line"></div><div class="line">        <span class="comment">//////////////</span></div><div class="line">        <span class="comment">// 最佳实践 //</span></div><div class="line">        <span class="comment">//////////////</span></div><div class="line"></div><div class="line">        <span class="comment">// 定义对象的set存取器属性时，强制定义get</span></div><div class="line">        <span class="string">"accessor-pairs"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 强制数组方法的回调函数中有 return 语句</span></div><div class="line">        <span class="string">"array-callback-return"</span>:<span class="number">0</span>,</div><div class="line">        <span class="comment">// 强制把变量的使用限制在其定义的作用域范围内</span></div><div class="line">        <span class="string">"block-scoped-var"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 限制圈复杂度，也就是类似if else能连续接多少个</span></div><div class="line">        <span class="string">"complexity"</span>: [<span class="number">2</span>, <span class="number">9</span>],</div><div class="line">        <span class="comment">//  要求 return 语句要么总是指定返回的值，要么不指定</span></div><div class="line">        <span class="string">"consistent-return"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 强制所有控制语句使用一致的括号风格</span></div><div class="line">        <span class="string">"curly"</span>: [<span class="number">2</span>, <span class="string">"all"</span>],</div><div class="line">        <span class="comment">// switch 语句强制 default 分支，也可添加 // no default 注释取消此次警告</span></div><div class="line">        <span class="string">"default-case"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 强制object.key 中 . 的位置，参数:</span></div><div class="line">        <span class="comment">//      property，'.'号应与属性在同一行</span></div><div class="line">        <span class="comment">//      object, '.' 号应与对象名在同一行</span></div><div class="line">        <span class="string">"dot-location"</span>: [<span class="number">2</span>, <span class="string">"property"</span>],</div><div class="line">        <span class="comment">// 强制使用.号取属性</span></div><div class="line">        <span class="comment">//    参数： allowKeywords：true 使用保留字做属性名时，只能使用.方式取属性</span></div><div class="line">        <span class="comment">//                          false 使用保留字做属性名时, 只能使用[]方式取属性 e.g [2, &#123;"allowKeywords": false&#125;]</span></div><div class="line">        <span class="comment">//           allowPattern:  当属性名匹配提供的正则表达式时，允许使用[]方式取值,否则只能用.号取值 e.g [2, &#123;"allowPattern": "^[a-z]+(_[a-z]+)+$"&#125;]</span></div><div class="line">        <span class="string">"dot-notation"</span>: [<span class="number">2</span>, &#123; <span class="string">"allowKeywords"</span>: <span class="literal">false</span> &#125;],</div><div class="line">        <span class="comment">// 使用 === 替代 == allow-null允许null和undefined==</span></div><div class="line">        <span class="string">"eqeqeq"</span>: [<span class="number">2</span>, <span class="string">"allow-null"</span>],</div><div class="line">        <span class="comment">// 要求 for-in 循环中有一个 if 语句</span></div><div class="line">        <span class="string">"guard-for-in"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁用 alert、confirm 和 prompt</span></div><div class="line">        <span class="string">"no-alert"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 禁用 arguments.caller 或 arguments.callee</span></div><div class="line">        <span class="string">"no-caller"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 不允许在 case 子句中使用词法声明</span></div><div class="line">        <span class="string">"no-case-declarations"</span>:<span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止除法操作符显式的出现在正则表达式开始的位置</span></div><div class="line">        <span class="string">"no-div-regex"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止 if 语句中有 return 之后有 else</span></div><div class="line">        <span class="string">"no-else-return"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 禁止出现空函数.如果一个函数包含了一条注释，它将不会被认为有问题。</span></div><div class="line">        <span class="string">"no-empty-function"</span>:<span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止使用空解构模式no-empty-pattern</span></div><div class="line">        <span class="string">"no-empty-pattern"</span>:<span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止在没有类型检查操作符的情况下与 null 进行比较</span></div><div class="line">        <span class="string">"no-eq-null"</span>: <span class="number">1</span>,</div><div class="line">        <span class="comment">// 禁用 eval()</span></div><div class="line">        <span class="string">"no-eval"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止扩展原生类型</span></div><div class="line">        <span class="string">"no-extend-native"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止不必要的 .bind() 调用</span></div><div class="line">        <span class="string">"no-extra-bind"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁用不必要的标签</span></div><div class="line">        <span class="string">"no-extra-label:"</span>:<span class="number">0</span>,</div><div class="line">        <span class="comment">// 禁止 case 语句落空</span></div><div class="line">        <span class="string">"no-fallthrough"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止数字字面量中使用前导和末尾小数点</span></div><div class="line">        <span class="string">"no-floating-decimal"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止使用短符号进行类型转换(!!fOO)</span></div><div class="line">        <span class="string">"no-implicit-coercion"</span>:<span class="number">0</span>,</div><div class="line">        <span class="comment">// 禁止在全局范围内使用 var 和命名的 function 声明</span></div><div class="line">        <span class="string">"no-implicit-globals"</span>:<span class="number">1</span>,</div><div class="line">        <span class="comment">// 禁止使用类似 eval() 的方法</span></div><div class="line">        <span class="string">"no-implied-eval"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止 this 关键字出现在类和类对象之外</span></div><div class="line">        <span class="string">"no-invalid-this"</span>:<span class="number">0</span>,</div><div class="line">        <span class="comment">// 禁用 __iterator__ 属性</span></div><div class="line">        <span class="string">"no-iterator"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">//  禁用标签语句</span></div><div class="line">        <span class="string">"no-labels"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁用不必要的嵌套块</span></div><div class="line">        <span class="string">"no-lone-blocks"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止在循环中出现 function 声明和表达式</span></div><div class="line">        <span class="string">"no-loop-func"</span>:<span class="number">1</span>,</div><div class="line">        <span class="comment">// 禁用魔术数字(3.14什么的用常量代替)</span></div><div class="line">        <span class="string">"no-magic-numbers"</span>:[<span class="number">1</span>,&#123; <span class="string">"ignore"</span>: [<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>] &#125;],</div><div class="line">        <span class="comment">// 禁止使用多个空格</span></div><div class="line">        <span class="string">"no-multi-spaces"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止使用多行字符串，在 JavaScript 中，可以在新行之前使用斜线创建多行字符串</span></div><div class="line">        <span class="string">"no-multi-str"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止对原生对象赋值</span></div><div class="line">        <span class="string">"no-native-reassign"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止在非赋值或条件语句中使用 new 操作符</span></div><div class="line">        <span class="string">"no-new"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止对 Function 对象使用 new 操作符</span></div><div class="line">        <span class="string">"no-new-func"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 禁止对 String，Number 和 Boolean 使用 new 操作符</span></div><div class="line">        <span class="string">"no-new-wrappers"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁用八进制字面量</span></div><div class="line">        <span class="string">"no-octal"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止在字符串中使用八进制转义序列</span></div><div class="line">        <span class="string">"no-octal-escape"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 不允许对 function 的参数进行重新赋值</span></div><div class="line">        <span class="string">"no-param-reassign"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 禁用 __proto__ 属性</span></div><div class="line">        <span class="string">"no-proto"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止使用 var 多次声明同一变量</span></div><div class="line">        <span class="string">"no-redeclare"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁用指定的通过 require 加载的模块</span></div><div class="line">        <span class="string">"no-return-assign"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 禁止使用 javascript: url</span></div><div class="line">        <span class="string">"no-script-url"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 禁止自我赋值</span></div><div class="line">        <span class="string">"no-self-assign"</span>:<span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止自身比较</span></div><div class="line">        <span class="string">"no-self-compare"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁用逗号操作符</span></div><div class="line">        <span class="string">"no-sequences"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止抛出非异常字面量</span></div><div class="line">        <span class="string">"no-throw-literal"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁用一成不变的循环条件</span></div><div class="line">        <span class="string">"no-unmodified-loop-condition"</span>:<span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止出现未使用过的表达式</span></div><div class="line">        <span class="string">"no-unused-expressions"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 禁用未使用过的标签</span></div><div class="line">        <span class="string">"no-unused-labels"</span>:<span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止不必要的 .call() 和 .apply()</span></div><div class="line">        <span class="string">"no-useless-call"</span>:<span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止不必要的字符串字面量或模板字面量的连接</span></div><div class="line">        <span class="string">"no-useless-concat"</span>:<span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁用不必要的转义字符</span></div><div class="line">        <span class="string">"no-useless-escape"</span>:<span class="number">0</span>,</div><div class="line">        <span class="comment">// 禁用 void 操作符</span></div><div class="line">        <span class="string">"no-void"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 禁止在注释中使用特定的警告术语</span></div><div class="line">        <span class="string">"no-warning-comments"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 禁用 with 语句</span></div><div class="line">        <span class="string">"no-with"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 强制在parseInt()使用基数参数</span></div><div class="line">        <span class="string">"radix"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 要求所有的 var 声明出现在它们所在的作用域顶部</span></div><div class="line">        <span class="string">"vars-on-top"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 要求 IIFE 使用括号括起来</span></div><div class="line">        <span class="string">"wrap-iife"</span>: [<span class="number">2</span>, <span class="string">"any"</span>],</div><div class="line">        <span class="comment">// 要求或禁止 “Yoda” 条件</span></div><div class="line">        <span class="string">"yoda"</span>: [<span class="number">2</span>, <span class="string">"never"</span>],</div><div class="line">        <span class="comment">// 要求或禁止使用严格模式指令</span></div><div class="line">        <span class="string">"strict"</span>: <span class="number">0</span>,</div><div class="line"></div><div class="line"></div><div class="line">        <span class="comment">//////////////</span></div><div class="line">        <span class="comment">//  变量声明 //</span></div><div class="line">        <span class="comment">//////////////</span></div><div class="line"></div><div class="line">        <span class="comment">// 要求或禁止 var 声明中的初始化(初值)</span></div><div class="line">        <span class="string">"init-declarations"</span>:<span class="number">0</span>,</div><div class="line">        <span class="comment">// 不允许 catch 子句的参数与外层作用域中的变量同名</span></div><div class="line">        <span class="string">"no-catch-shadow"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 禁止删除变量</span></div><div class="line">        <span class="string">"no-delete-var"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 不允许标签与变量同名</span></div><div class="line">        <span class="string">"no-label-var"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁用特定的全局变量</span></div><div class="line">        <span class="string">"no-restricted-globals"</span>:<span class="number">0</span>,</div><div class="line">        <span class="comment">// 禁止 var 声明 与外层作用域的变量同名</span></div><div class="line">        <span class="string">"no-shadow"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 禁止覆盖受限制的标识符</span></div><div class="line">        <span class="string">"no-shadow-restricted-names"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁用未声明的变量，除非它们在 /*global */ 注释中被提到</span></div><div class="line">        <span class="string">"no-undef"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止将变量初始化为 undefined</span></div><div class="line">        <span class="string">"no-undef-init"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止将 undefined 作为标识符</span></div><div class="line">        <span class="string">"no-undefined"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 禁止出现未使用过的变量</span></div><div class="line">        <span class="string">"no-unused-vars"</span>: [<span class="number">2</span>, &#123; <span class="string">"vars"</span>: <span class="string">"all"</span>, <span class="string">"args"</span>: <span class="string">"none"</span> &#125;],</div><div class="line">        <span class="comment">// 不允许在变量定义之前使用它们</span></div><div class="line">        <span class="string">"no-use-before-define"</span>: <span class="number">0</span>,</div><div class="line"></div><div class="line">        <span class="comment">//////////////////////////</span></div><div class="line">        <span class="comment">// Node.js and CommonJS //</span></div><div class="line">        <span class="comment">//////////////////////////</span></div><div class="line"></div><div class="line">        <span class="comment">// require return statements after callbacks</span></div><div class="line">        <span class="string">"callback-return"</span>:<span class="number">0</span>,</div><div class="line">        <span class="comment">// 要求 require() 出现在顶层模块作用域中</span></div><div class="line">        <span class="string">"global-require"</span>: <span class="number">1</span>,</div><div class="line">        <span class="comment">// 要求回调函数中有容错处理</span></div><div class="line">        <span class="string">"handle-callback-err"</span>: [<span class="number">2</span>, <span class="string">"^(err|error)$"</span>],</div><div class="line">        <span class="comment">// 禁止混合常规 var 声明和 require 调用</span></div><div class="line">        <span class="string">"no-mixed-requires"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 禁止调用 require 时使用 new 操作符</span></div><div class="line">        <span class="string">"no-new-require"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止对 __dirname 和 __filename进行字符串连接</span></div><div class="line">        <span class="string">"no-path-concat"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 禁用 process.env</span></div><div class="line">        <span class="string">"no-process-env"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 禁用 process.exit()</span></div><div class="line">        <span class="string">"no-process-exit"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 禁用同步方法</span></div><div class="line">        <span class="string">"no-sync"</span>: <span class="number">0</span>,</div><div class="line"></div><div class="line">        <span class="comment">//////////////</span></div><div class="line">        <span class="comment">// 风格指南  //</span></div><div class="line">        <span class="comment">//////////////</span></div><div class="line"></div><div class="line">        <span class="comment">// 指定数组的元素之间要以空格隔开(, 后面)， never参数：[ 之前和 ] 之后不能带空格，always参数：[ 之前和 ] 之后必须带空格</span></div><div class="line">        <span class="string">"array-bracket-spacing"</span>: [<span class="number">2</span>, <span class="string">"never"</span>],</div><div class="line">        <span class="comment">// 禁止或强制在单行代码块中使用空格(禁用)</span></div><div class="line">        <span class="string">"block-spacing"</span>:[<span class="number">1</span>,<span class="string">"never"</span>],</div><div class="line">        <span class="comment">//强制使用一致的缩进 第二个参数为 "tab" 时，会使用tab，</span></div><div class="line">        <span class="comment">// if while function 后面的&#123;必须与if在同一行，java风格。</span></div><div class="line">        <span class="string">"brace-style"</span>: [<span class="number">2</span>, <span class="string">"1tbs"</span>, &#123; <span class="string">"allowSingleLine"</span>: <span class="literal">true</span> &#125;],</div><div class="line">        <span class="comment">// 双峰驼命名格式</span></div><div class="line">        <span class="string">"camelcase"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 控制逗号前后的空格</span></div><div class="line">        <span class="string">"comma-spacing"</span>: [<span class="number">2</span>, &#123; <span class="string">"before"</span>: <span class="literal">false</span>, <span class="string">"after"</span>: <span class="literal">true</span> &#125;],</div><div class="line">        <span class="comment">// 控制逗号在行尾出现还是在行首出现 (默认行尾)</span></div><div class="line">        <span class="comment">// http://eslint.org/docs/rules/comma-style</span></div><div class="line">        <span class="string">"comma-style"</span>: [<span class="number">2</span>, <span class="string">"last"</span>],</div><div class="line">        <span class="comment">//"SwitchCase" (默认：0) 强制 switch 语句中的 case 子句的缩进水平</span></div><div class="line">        <span class="comment">// 以方括号取对象属性时，[ 后面和 ] 前面是否需要空格, 可选参数 never, always</span></div><div class="line">        <span class="string">"computed-property-spacing"</span>: [<span class="number">2</span>, <span class="string">"never"</span>],</div><div class="line">        <span class="comment">// 用于指统一在回调函数中指向this的变量名，箭头函数中的this已经可以指向外层调用者，应该没卵用了</span></div><div class="line">        <span class="comment">// e.g [0,"that"] 指定只能 var that = this. that不能指向其他任何值，this也不能赋值给that以外的其他值</span></div><div class="line">        <span class="string">"consistent-this"</span>:  [<span class="number">1</span>,<span class="string">"that"</span>],</div><div class="line">        <span class="comment">// 强制使用命名的 function 表达式</span></div><div class="line">        <span class="string">"func-names"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 文件末尾强制换行</span></div><div class="line">        <span class="string">"eol-last"</span>: <span class="number">2</span>,</div><div class="line">        <span class="string">"indent"</span>: [<span class="number">2</span>, <span class="number">4</span>, &#123; <span class="string">"SwitchCase"</span>: <span class="number">1</span> &#125;],</div><div class="line">        <span class="comment">// 强制在对象字面量的属性中键和值之间使用一致的间距</span></div><div class="line">        <span class="string">"key-spacing"</span>: [<span class="number">2</span>, &#123; <span class="string">"beforeColon"</span>: <span class="literal">false</span>, <span class="string">"afterColon"</span>: <span class="literal">true</span> &#125;],</div><div class="line">        <span class="comment">// 强制使用一致的换行风格</span></div><div class="line">        <span class="string">"linebreak-style"</span>: [<span class="number">1</span>,<span class="string">"unix"</span>],</div><div class="line">        <span class="comment">// 要求在注释周围有空行      ( 要求在块级注释之前有一空行)</span></div><div class="line">        <span class="string">"lines-around-comment"</span>: [<span class="number">1</span>,&#123;<span class="string">"beforeBlockComment"</span>:<span class="literal">true</span>&#125;],</div><div class="line">        <span class="comment">//  强制一致地使用函数声明或函数表达式，方法定义风格，参数：</span></div><div class="line">        <span class="comment">//    declaration: 强制使用方法声明的方式，function f()&#123;&#125; e.g [2, "declaration"]</span></div><div class="line">        <span class="comment">//    expression：强制使用方法表达式的方式，var f = function() &#123;&#125;  e.g [2, "expression"]</span></div><div class="line">        <span class="comment">//    allowArrowFunctions: declaration风格中允许箭头函数。 e.g [2, "declaration", &#123; "allowArrowFunctions": true &#125;]</span></div><div class="line">        <span class="string">"func-style"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 强制回调函数最大嵌套深度 5层</span></div><div class="line">        <span class="string">"max-nested-callbacks"</span>: [<span class="number">1</span>,<span class="number">5</span>],</div><div class="line">        <span class="comment">// 禁止使用指定的标识符</span></div><div class="line">        <span class="string">"id-blacklist"</span>:<span class="number">0</span>,</div><div class="line">        <span class="comment">// 强制标识符的最新和最大长度</span></div><div class="line">        <span class="string">"id-length"</span>:<span class="number">0</span>,</div><div class="line">        <span class="comment">// 要求标识符匹配一个指定的正则表达式</span></div><div class="line">        <span class="string">"id-match"</span>:<span class="number">0</span>,</div><div class="line">        <span class="comment">// 强制在 JSX 属性中一致地使用双引号或单引号</span></div><div class="line">        <span class="string">"jsx-quotes"</span>:<span class="number">0</span>,</div><div class="line">        <span class="comment">// 强制在关键字前后使用一致的空格 (前后腰需要)</span></div><div class="line">        <span class="string">"keyword-spacing"</span>:<span class="number">2</span>,</div><div class="line">        <span class="comment">// 强制一行的最大长度</span></div><div class="line">        <span class="string">"max-len"</span>:[<span class="number">1</span>,<span class="number">200</span>],</div><div class="line">        <span class="comment">// 强制最大行数</span></div><div class="line">        <span class="string">"max-lines"</span>:<span class="number">0</span>,</div><div class="line">        <span class="comment">// 强制 function 定义中最多允许的参数数量</span></div><div class="line">        <span class="string">"max-params"</span>:[<span class="number">1</span>,<span class="number">7</span>],</div><div class="line">        <span class="comment">// 强制 function 块最多允许的的语句数量</span></div><div class="line">        <span class="string">"max-statements"</span>:[<span class="number">1</span>,<span class="number">200</span>],</div><div class="line">        <span class="comment">// 强制每一行中所允许的最大语句数量</span></div><div class="line">        <span class="string">"max-statements-per-line"</span>:<span class="number">0</span>,</div><div class="line">        <span class="comment">// 要求构造函数首字母大写  （要求调用 new 操作符时有首字母大小的函数，允许调用首字母大写的函数时没有 new 操作符。）</span></div><div class="line">        <span class="string">"new-cap"</span>: [<span class="number">2</span>, &#123; <span class="string">"newIsCap"</span>: <span class="literal">true</span>, <span class="string">"capIsNew"</span>: <span class="literal">false</span> &#125;],</div><div class="line">        <span class="comment">// 要求调用无参构造函数时有圆括号</span></div><div class="line">        <span class="string">"new-parens"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 要求或禁止 var 声明语句后有一行空行</span></div><div class="line">        <span class="string">"newline-after-var"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 禁止使用 Array 构造函数</span></div><div class="line">        <span class="string">"no-array-constructor"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁用按位运算符</span></div><div class="line">        <span class="string">"no-bitwise"</span>:<span class="number">0</span>,</div><div class="line">        <span class="comment">// 要求 return 语句之前有一空行</span></div><div class="line">        <span class="string">"newline-before-return"</span>:<span class="number">0</span>,</div><div class="line">        <span class="comment">// 要求方法链中每个调用都有一个换行符</span></div><div class="line">        <span class="string">"newline-per-chained-call"</span>:<span class="number">1</span>,</div><div class="line">        <span class="comment">// 禁用 continue 语句</span></div><div class="line">        <span class="string">"no-continue"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 禁止在代码行后使用内联注释</span></div><div class="line">        <span class="string">"no-inline-comments"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 禁止 if 作为唯一的语句出现在 else 语句中</span></div><div class="line">        <span class="string">"no-lonely-if"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 禁止混合使用不同的操作符</span></div><div class="line">        <span class="string">"no-mixed-operators"</span>:<span class="number">0</span>,</div><div class="line">        <span class="comment">// 不允许空格和 tab 混合缩进</span></div><div class="line">        <span class="string">"no-mixed-spaces-and-tabs"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 不允许多个空行</span></div><div class="line">        <span class="string">"no-multiple-empty-lines"</span>: [<span class="number">2</span>, &#123; <span class="string">"max"</span>: <span class="number">2</span> &#125;],</div><div class="line">        <span class="comment">// 不允许否定的表达式</span></div><div class="line">        <span class="string">"no-negated-condition"</span>:<span class="number">0</span>,</div><div class="line">        <span class="comment">// 不允许使用嵌套的三元表达式</span></div><div class="line">        <span class="string">"no-nested-ternary"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 禁止使用 Object 的构造函数</span></div><div class="line">        <span class="string">"no-new-object"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止使用一元操作符 ++ 和 --</span></div><div class="line">        <span class="string">"no-plusplus"</span>:<span class="number">0</span>,</div><div class="line">        <span class="comment">// 禁止使用特定的语法</span></div><div class="line">        <span class="string">"no-restricted-syntax"</span>:<span class="number">0</span>,</div><div class="line">        <span class="comment">// 禁止 function 标识符和括号之间出现空格</span></div><div class="line">        <span class="string">"no-spaced-func"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 不允许使用三元操作符</span></div><div class="line">        <span class="string">"no-ternary"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">//  禁用行尾空格</span></div><div class="line">        <span class="string">"no-trailing-spaces"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止标识符中有悬空下划线_bar</span></div><div class="line">        <span class="string">"no-underscore-dangle"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 禁止可以在有更简单的可替代的表达式时使用三元操作符</span></div><div class="line">        <span class="string">"no-unneeded-ternary"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止属性前有空白</span></div><div class="line">        <span class="string">"no-whitespace-before-property"</span>:<span class="number">0</span>,</div><div class="line">        <span class="comment">// 强制花括号内换行符的一致性</span></div><div class="line">        <span class="string">"object-curly-newline"</span>:<span class="number">0</span>,</div><div class="line">        <span class="comment">// 强制在花括号中使用一致的空格</span></div><div class="line">        <span class="string">"object-curly-spacing"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 强制将对象的属性放在不同的行上</span></div><div class="line">        <span class="string">"object-property-newline"</span>:<span class="number">0</span>,</div><div class="line">        <span class="comment">// 强制函数中的变量要么一起声明要么分开声明</span></div><div class="line">        <span class="string">"one-var"</span>: [<span class="number">2</span>, &#123; <span class="string">"initialized"</span>: <span class="string">"never"</span> &#125;],</div><div class="line">        <span class="comment">// 要求或禁止在 var 声明周围换行</span></div><div class="line">        <span class="string">"one-var-declaration-per-line"</span>:<span class="number">0</span>,</div><div class="line">        <span class="comment">// 要求或禁止在可能的情况下要求使用简化的赋值操作符</span></div><div class="line">        <span class="string">"operator-assignment"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 强制操作符使用一致的换行符</span></div><div class="line">        <span class="string">"operator-linebreak"</span>: [<span class="number">2</span>, <span class="string">"after"</span>, &#123; <span class="string">"overrides"</span>: &#123; <span class="string">"?"</span>: <span class="string">"before"</span>, <span class="string">":"</span>: <span class="string">"before"</span> &#125; &#125;],</div><div class="line">        <span class="comment">// 要求或禁止块内填充</span></div><div class="line">        <span class="string">"padded-blocks"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 要求对象字面量属性名称用引号括起来</span></div><div class="line">        <span class="string">"quote-props"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 强制使用一致的反勾号、双引号或单引号</span></div><div class="line">        <span class="string">"quotes"</span>: [<span class="number">2</span>, <span class="string">"single"</span>, <span class="string">"avoid-escape"</span>],</div><div class="line">        <span class="comment">// 要求使用 JSDoc 注释</span></div><div class="line">        <span class="string">"require-jsdoc"</span>:<span class="number">1</span>,</div><div class="line">        <span class="comment">// 要求或禁止使用分号而不是 ASI（这个才是控制行尾部分号的，）</span></div><div class="line">        <span class="string">"semi"</span>: [<span class="number">2</span>, <span class="string">"always"</span>],</div><div class="line">        <span class="comment">// 强制分号之前和之后使用一致的空格</span></div><div class="line">        <span class="string">"semi-spacing"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 要求同一个声明块中的变量按顺序排列</span></div><div class="line">        <span class="string">"sort-vars"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 强制在块之前使用一致的空格</span></div><div class="line">        <span class="string">"space-before-blocks"</span>: [<span class="number">2</span>, <span class="string">"always"</span>],</div><div class="line">        <span class="comment">// 强制在 function的左括号之前使用一致的空格</span></div><div class="line">        <span class="string">"space-before-function-paren"</span>: [<span class="number">2</span>, <span class="string">"always"</span>],</div><div class="line">        <span class="comment">// 强制在圆括号内使用一致的空格</span></div><div class="line">        <span class="string">"space-in-parens"</span>: [<span class="number">2</span>, <span class="string">"never"</span>],</div><div class="line">        <span class="comment">// 要求操作符周围有空格</span></div><div class="line">        <span class="string">"space-infix-ops"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 强制在一元操作符前后使用一致的空格</span></div><div class="line">        <span class="string">"space-unary-ops"</span>: [<span class="number">2</span>, &#123; <span class="string">"words"</span>: <span class="literal">true</span>, <span class="string">"nonwords"</span>: <span class="literal">false</span> &#125;],</div><div class="line">        <span class="comment">// 强制在注释中 // 或 /* 使用一致的空格</span></div><div class="line">        <span class="string">"spaced-comment"</span>: [<span class="number">2</span>, <span class="string">"always"</span>, &#123; <span class="string">"markers"</span>: [<span class="string">"global"</span>, <span class="string">"globals"</span>, <span class="string">"eslint"</span>, <span class="string">"eslint-disable"</span>, <span class="string">"*package"</span>, <span class="string">"!"</span>] &#125;],</div><div class="line">        <span class="comment">// 要求或禁止 Unicode BOM</span></div><div class="line">        <span class="string">"unicode-bom"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">//  要求正则表达式被括号括起来</span></div><div class="line">        <span class="string">"wrap-regex"</span>: <span class="number">0</span>,</div><div class="line"></div><div class="line">        <span class="comment">//////////////</span></div><div class="line">        <span class="comment">// ES6.相关 //</span></div><div class="line">        <span class="comment">//////////////</span></div><div class="line"></div><div class="line">        <span class="comment">// 要求箭头函数体使用大括号</span></div><div class="line">        <span class="string">"arrow-body-style"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 要求箭头函数的参数使用圆括号</span></div><div class="line">        <span class="string">"arrow-parens"</span>: <span class="number">2</span>,</div><div class="line">        <span class="string">"arrow-spacing"</span>:[<span class="number">2</span>,&#123; <span class="string">"before"</span>: <span class="literal">true</span>, <span class="string">"after"</span>: <span class="literal">true</span> &#125;],</div><div class="line">        <span class="comment">// 强制在子类构造函数中用super()调用父类构造函数，TypeScrip的编译器也会提示</span></div><div class="line">        <span class="string">"constructor-super"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 强制 generator 函数中 * 号周围使用一致的空格</span></div><div class="line">        <span class="string">"generator-star-spacing"</span>: [<span class="number">2</span>, &#123; <span class="string">"before"</span>: <span class="literal">true</span>, <span class="string">"after"</span>: <span class="literal">true</span> &#125;],</div><div class="line">        <span class="comment">// 禁止修改类声明的变量</span></div><div class="line">        <span class="string">"no-class-assign"</span>:<span class="number">2</span>,</div><div class="line">        <span class="comment">// 不允许箭头功能，在那里他们可以混淆的比较</span></div><div class="line">        <span class="string">"no-confusing-arrow"</span>:<span class="number">0</span>,</div><div class="line">        <span class="comment">// 禁止修改 const 声明的变量</span></div><div class="line">        <span class="string">"no-const-assign"</span>:<span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止类成员中出现重复的名称</span></div><div class="line">        <span class="string">"no-dupe-class-members"</span>:<span class="number">2</span>,</div><div class="line">        <span class="comment">// 不允许复制模块的进口</span></div><div class="line">        <span class="string">"no-duplicate-imports"</span>:<span class="number">0</span>,</div><div class="line">        <span class="comment">// 禁止 Symbol  的构造函数</span></div><div class="line">        <span class="string">"no-new-symbol"</span>:<span class="number">2</span>,</div><div class="line">        <span class="comment">// 允许指定模块加载时的进口</span></div><div class="line">        <span class="string">"no-restricted-imports"</span>:<span class="number">0</span>,</div><div class="line">        <span class="comment">// 禁止在构造函数中，在调用 super() 之前使用 this 或 super</span></div><div class="line">        <span class="string">"no-this-before-super"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止不必要的计算性能键对象的文字</span></div><div class="line">        <span class="string">"no-useless-computed-key"</span>:<span class="number">0</span>,</div><div class="line">        <span class="comment">// 要求使用 let 或 const 而不是 var</span></div><div class="line">        <span class="string">"no-var"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 要求或禁止对象字面量中方法和属性使用简写语法</span></div><div class="line">        <span class="string">"object-shorthand"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 要求使用箭头函数作为回调</span></div><div class="line">        <span class="string">"prefer-arrow-callback"</span>:<span class="number">0</span>,</div><div class="line">        <span class="comment">// 要求使用 const 声明那些声明后不再被修改的变量</span></div><div class="line">        <span class="string">"prefer-const"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 要求在合适的地方使用 Reflect 方法</span></div><div class="line">        <span class="string">"prefer-reflect"</span>:<span class="number">0</span>,</div><div class="line">        <span class="comment">// 要求使用扩展运算符而非 .apply()</span></div><div class="line">        <span class="string">"prefer-spread"</span>:<span class="number">0</span>,</div><div class="line">        <span class="comment">// 要求使用模板字面量而非字符串连接</span></div><div class="line">        <span class="string">"prefer-template"</span>:<span class="number">0</span>,</div><div class="line">        <span class="comment">// Suggest using the rest parameters instead of arguments</span></div><div class="line">        <span class="string">"prefer-rest-params"</span>:<span class="number">0</span>,</div><div class="line">        <span class="comment">// 要求generator 函数内有 yield</span></div><div class="line">        <span class="string">"require-yield"</span>:<span class="number">0</span>,</div><div class="line">        <span class="comment">// enforce spacing between rest and spread operators and their expressions</span></div><div class="line">        <span class="string">"rest-spread-spacing"</span>:<span class="number">0</span>,</div><div class="line">        <span class="comment">// 强制模块内的 import 排序</span></div><div class="line">        <span class="string">"sort-imports"</span>:<span class="number">0</span>,</div><div class="line">        <span class="comment">// 要求或禁止模板字符串中的嵌入表达式周围空格的使用</span></div><div class="line">        <span class="string">"template-curly-spacing"</span>:<span class="number">1</span>,</div><div class="line">        <span class="comment">// 强制在 yield* 表达式中 * 周围使用空格</span></div><div class="line">        <span class="string">"yield-star-spacing"</span>:<span class="number">2</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>更多内容，以及每一项的配置详情可以在 <a href="http://eslint.cn/" target="_blank" rel="external">官网查看</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;因为前几天发现 CSDN上有直接把我文章 复制过去然后标原创的情况，以后会统一在博客头部加入原文链接~&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://guowenfh.github.io/2016/08/07/ESLint-Rules/&quot;&gt;本文个人
    
    </summary>
    
      <category term="前端技术" scheme="http://guowenfh.github.io/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="js" scheme="http://guowenfh.github.io/tags/js/"/>
    
      <category term="代码风格" scheme="http://guowenfh.github.io/tags/%E4%BB%A3%E7%A0%81%E9%A3%8E%E6%A0%BC/"/>
    
  </entry>
  
  <entry>
    <title>Javascript中this与闭包学习笔记</title>
    <link href="http://guowenfh.github.io/2016/08/03/javascript-this-closure/"/>
    <id>http://guowenfh.github.io/2016/08/03/javascript-this-closure/</id>
    <published>2016-08-02T16:30:29.000Z</published>
    <updated>2016-09-11T08:24:40.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="理解-Javascript中的this"><a href="#理解-Javascript中的this" class="headerlink" title="理解 Javascript中的this"></a>理解 <code>Javascript</code>中的<code>this</code></h3><p>基于不同的调用方式this的指向也会有所不同，调用方式大致有如下几种：</p>
<table>
<thead>
<tr>
<th>调用方式</th>
<th>表达式</th>
</tr>
</thead>
<tbody>
<tr>
<td>构造函数调用</td>
<td><code>new Foo();</code></td>
</tr>
<tr>
<td>对象方法调用</td>
<td><code>o.method();</code></td>
</tr>
<tr>
<td>函数直接调用</td>
<td><code>foo();</code></td>
</tr>
<tr>
<td>call/apply/bind</td>
<td><code>func.call(o);</code></td>
</tr>
</tbody>
</table>
<p>现在就来看看这些不同的调用模式，this的指向会有怎么样的区别：</p>
<h4 id="构造函数调用模式"><a href="#构造函数调用模式" class="headerlink" title="构造函数调用模式"></a>构造函数调用模式</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">    <span class="keyword">this</span>.age = age;</div><div class="line">    <span class="keyword">this</span>.sayName  = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.info(<span class="keyword">this</span>.name);</div><div class="line">    &#125;;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> allen = <span class="keyword">new</span> Person(<span class="string">"allen"</span>,<span class="number">12</span>);</div><div class="line"><span class="built_in">console</span>.info(allen);<span class="comment">//&#123;name: "allen", age: 12&#125;;...</span></div></pre></td></tr></table></figure>
<p>通过这样的代码可以很清楚的的看出，构造函数 Person 内部的<code>this</code>指向被创建的调用对象 allen</p>
<h4 id="对象方法调用"><a href="#对象方法调用" class="headerlink" title="对象方法调用"></a>对象方法调用</h4><p>通过上面的代码很明显我们创建了一个 allen 对象，其中有一个 <code>sayName</code> 方法, 直接打印 this.name ，现在我们就来看一下它会输出什么。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">allen.sayName();<span class="comment">//allen</span></div></pre></td></tr></table></figure></p>
<p>很明显，这里函数中的<code>this</code>指向<code>allen</code>对象本身。</p>
<h4 id="函数直接调用"><a href="#函数直接调用" class="headerlink" title="函数直接调用"></a>函数直接调用</h4><p>先来看一段代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a, b</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> a + b;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> myNumber = &#123;</div><div class="line">    value: <span class="number">1</span>,</div><div class="line">    double: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">this</span>.value = add(<span class="keyword">this</span>.value, <span class="keyword">this</span>.value);</div><div class="line">        &#125;</div><div class="line">        handle();</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"><span class="built_in">console</span>.info(myNumber.value);<span class="comment">//1</span></div><div class="line">myNumber.double();</div><div class="line"><span class="built_in">console</span>.info(myNumber.value);<span class="comment">//1</span></div></pre></td></tr></table></figure></p>
<p>解析： 首先我们定义了一个全局函数<code>add</code>用于加法运算，接着我们定义了一个对象，有一属性value为1，还有一个方法的目的是让value值乘以二。我们在函数内嵌套定义了一个函数<code>handle</code>,调用<code>add</code>方法并且执行。但是在调用函数值执行之后并没有达到我们想要的效果。这是为什么呢？<br>如何你打开chrome调试工具并打下断点会发现在<code>handle</code>函数内部的this会指向window！<br>由此可以发现，<strong>在函数内部创建的函数，在这个函数调用时，函数内部的<code>this</code>会指向window而不是外部的函数</strong></p>
<p>下面就就可以看一下常见的两个方案：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 取消 handle函数的定义，直接在对象的方法中使用this</span></div><div class="line">double2: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.value = add(<span class="keyword">this</span>.value, <span class="keyword">this</span>.value);</div><div class="line">&#125;,</div><div class="line"><span class="comment">// 使用变量保存外部函数的this。</span></div><div class="line">double3: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> that = <span class="keyword">this</span>;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        that.value = add(that.value, that.value);</div><div class="line">    &#125;</div><div class="line">    handle();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="使用-call-apply与bind-手动改变-this"><a href="#使用-call-apply与bind-手动改变-this" class="headerlink" title="使用 call/apply与bind 手动改变 this"></a>使用 <code>call</code>/<code>apply</code>与<code>bind</code> 手动改变 this</h4><p>先来看下面这样一段代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Point</span>(<span class="params">x, y</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.x = x;</div><div class="line">    <span class="keyword">this</span>.y = y;</div><div class="line">&#125;</div><div class="line">Point.prototype.move = <span class="function"><span class="keyword">function</span>(<span class="params">stepX, stepY</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.x += stepX;</div><div class="line">    <span class="keyword">this</span>.y += stepY;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Point(<span class="number">0</span>, <span class="number">0</span>);</div><div class="line"><span class="built_in">console</span>.log(p);<span class="comment">//&#123;x: 0, y: 0&#125;</span></div><div class="line">p.move(<span class="number">2</span>,<span class="number">2</span>);</div><div class="line"><span class="built_in">console</span>.log(p);<span class="comment">//&#123;x: 2, y: 2&#125;</span></div><div class="line"><span class="keyword">var</span> circle = &#123;x:<span class="number">1</span>,y:<span class="number">1</span>,r:<span class="number">1</span>&#125;;</div><div class="line">p.move.apply(circle, [<span class="number">2</span>,<span class="number">1</span>]);</div><div class="line"><span class="built_in">console</span>.info(circle);<span class="comment">//&#123;x: 3, y: 2, r: 1&#125;</span></div></pre></td></tr></table></figure></p>
<p>我们使用<code>Point</code>构造函数可以创建出一个点，在其原型上有一个<code>move</code>方法可以使这个点坐标移动。<br>之后我们又创建<code>circle</code>对象，有x/y/r属性（把它想象成一个圆），之后我们的需求是：将这个圆的圆心移动，我们就使用了<code>apply</code>来借用<code>move</code>方法，最终将圆移动了位置，最终效果如下图：<br><img src="http://ww4.sinaimg.cn/large/82d12951gw1f6emf8rigdj208l07tglm.jpg" alt="apply使用圆示意图"></p>
<ul>
<li><code>function.prototype.apply/call</code></li>
</ul>
<p>在上面我们可以看到能实现圆心移动的关键方法就是<code>apply</code>，大致解析如下，<code>p.move</code>是一个函数它的作用就是将一个点移动，然后我们通过<code>apply</code>方法把它借用给<code>circle</code>这个对象。将<code>circle</code>对象上的x/y属性进行变更，分别加2和1，实现了圆心的移动。很明显在这里 <strong><code>apply</code>方法描述的就是一个借用的功能</strong>.</p>
<p>为什么会把<code>apply/call</code>放在一起说呢，因为他们的功能并没有实质性的区别。只是在传入参数的时候，apply需要将参数以数组的形式进行传递，而call是将需要传入的参数一个一个跟在借用的对象后。下面一个小例子足以说明：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a, b</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> a + b;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">call1</span>(<span class="params">num1, num2</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> sum.call(<span class="keyword">this</span>, num1, num2);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">apply1</span>(<span class="params">num1, num2</span>) </span>&#123;</div><div class="line">    <span class="comment">// return sum.apply(this,[num1,num2])</span></div><div class="line">    <span class="keyword">return</span> sum.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);<span class="comment">//利用函数的arguments对象</span></div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.info(call1(<span class="number">10</span>, <span class="number">20</span>));<span class="comment">//30</span></div><div class="line"><span class="built_in">console</span>.info(call1(<span class="number">5</span>, <span class="number">10</span>));<span class="comment">//15</span></div></pre></td></tr></table></figure>
<p>可以看到我们在后两个函数中，可以直接使用sum方法。</p>
<ul>
<li><code>function.prototype.bind</code></li>
</ul>
<p>这里来看看ES5引入的<code>bind</code>，又有什么不同，还是和上面类似的代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Point</span>(<span class="params">x, y</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.x = x;</div><div class="line">    <span class="keyword">this</span>.y = y;</div><div class="line">&#125;</div><div class="line">Point.prototype.move = <span class="function"><span class="keyword">function</span>(<span class="params">stepX, stepY</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.x += stepX;</div><div class="line">    <span class="keyword">this</span>.y += stepY;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Point(<span class="number">0</span>, <span class="number">0</span>);</div><div class="line"><span class="keyword">var</span> circle = &#123;x:<span class="number">1</span>,y:<span class="number">1</span>,r:<span class="number">1</span>&#125;;</div><div class="line"><span class="keyword">var</span> circleMove = p.move.bind(circle,<span class="number">2</span>,<span class="number">2</span>);</div><div class="line">circleMove();</div><div class="line"><span class="built_in">console</span>.info(circle);<span class="comment">//&#123;x: 3, y: 3, r: 1&#125;</span></div><div class="line">circleMove(<span class="number">3</span>,<span class="number">4</span>);</div><div class="line"><span class="built_in">console</span>.info(circle);<span class="comment">//&#123;x: 5, y: 5, r: 1&#125;</span></div></pre></td></tr></table></figure></p>
<p>这里我使用了和 call 类似的调用方法，但是显然 bind 和 call 不一样，使用 bind 时，它会将我们绑定 this 后的函数引用返回，然后手动执行。可以看到的是，因为在这里我们绑定的对象的后面传入了x/y两个值，所以执行后坐标立即变化，并且在后来手动设置偏移量时也不再起到效果。<br>这样的相比于apply立即执行的好处时，我们可以使用定时器，例如:<code>setTimeout(circleMove,1000)</code>，延迟一秒后移动。</p>
<p>当然，每次只能移动固定的值也不是一件很好的事情，所以我们在使用 bind 的时候常常不会设置其默认参数， <code>var circleMove2 = p.move.bind(circle,);</code>,之后在执行函数时，再将参数传入<code>circleMove(3,4);</code>，这样就可以实现每次自定义偏移量了</p>
<p>这又引出了<code>call</code>/<code>apply</code>与<code>bind</code>的作用的另外一种说法： <strong>扩充作用域</strong></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> color = <span class="string">'red'</span>;</div><div class="line"><span class="keyword">var</span> obj = &#123;color:<span class="string">'blue'</span>&#125;;</div><div class="line"><span class="keyword">var</span> obj1 = &#123;color:<span class="string">'black'</span>&#125;;</div><div class="line"><span class="keyword">var</span> obj2 = &#123;color:<span class="string">'yellow'</span>&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">showColor</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.info(<span class="keyword">this</span>.color);</div><div class="line">&#125;</div><div class="line">showColor();<span class="comment">//red</span></div><div class="line">showColor.call(obj);<span class="comment">//blue</span></div><div class="line">showColor.apply(obj1);<span class="comment">//black</span></div><div class="line">showColor.bind(obj2)();<span class="comment">//yellow</span></div></pre></td></tr></table></figure>
<p>可以看到这里都实现了一样的效果。值得说的是使用<code>call</code>、<code>aplly()</code>来扩充作用域的最大好处就是对象不需要与方法有任何耦合关系。</p>
<p>###　闭包</p>
<h4 id="简单定义"><a href="#简单定义" class="headerlink" title="简单定义"></a>简单定义</h4><p>先来看这样的一段代码，在chrome中找到<code>Scope</code>列表，可以看到，在作用域链上我们已经创建了一个闭包作用域！<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> a = <span class="number">0</span>;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        a = <span class="number">1</span>;</div><div class="line">        <span class="keyword">debugger</span>;</div><div class="line">    &#125;</div><div class="line">    b();</div><div class="line">&#125;)();</div></pre></td></tr></table></figure></p>
<p>闭包一个最简单的定义就是：闭包就是说在函数内部定义了一个函数，然后这个函数调用到了父函数内的相关临时变量，这些相关的临时变量就会存入闭包作用域里面.这就是闭包最基础的定义</p>
<h4 id="保存变量"><a href="#保存变量" class="headerlink" title="保存变量"></a>保存变量</h4><p>下面就来看一下闭包的一个基本特性保存变量</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> i = <span class="number">0</span>;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.info(i++);</div><div class="line">    &#125;;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> f = add();</div><div class="line">f();<span class="comment">//1</span></div><div class="line">f();<span class="comment">//2</span></div></pre></td></tr></table></figure>
<p>我们定义了一个 add 方法，执行完毕后会返回一个函数，接着我们就把这个函数赋值给了变量f，由于 add 函数也是返回一个函数，在我们每一次执行<code>f()</code>的时候，它引用了add内的变量i，并且保存在自己的闭包作用域内，所以一直输出执行的话，也会累加输出。</p>
<h4 id="小tips"><a href="#小tips" class="headerlink" title="小tips"></a>小tips</h4><p>需要我们记住的是 <strong>每次函数调用的时候创建一个新的闭包</strong>：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fun = add();</div><div class="line">fun();<span class="comment">//1</span></div><div class="line">fun();<span class="comment">//2</span></div></pre></td></tr></table></figure>
<p>我们再来通过简单的例子看看另一个注意的地方：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> a  = <span class="number">0</span>;</div><div class="line">    <span class="keyword">var</span> ff =  <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.info(a);</div><div class="line">    &#125;;</div><div class="line">    a = <span class="number">1214</span>;</div><div class="line">    <span class="keyword">return</span> ff;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> b = test();</div><div class="line">b();<span class="comment">//1214</span></div></pre></td></tr></table></figure>
<p>执行的结果是1214，从这里我们可以看到 <strong>闭包中局部变量是引用而非拷贝</strong>，其实这样的改变发散开来我们就可以知道，即使在这里变量 a 未在函数 ff 之前定义，而是<code>var a = 1214;</code>我们同样会得到同样的结果</p>
<h4 id="点击li显示对应编号案例解析"><a href="#点击li显示对应编号案例解析" class="headerlink" title="点击li显示对应编号案例解析"></a>点击li显示对应编号案例解析</h4><p>其实上面这些我是很晕的，来看一个我们实际在前端编程过程中经常遇到的问题。<br>我们有一个列表，分别为1/2/3，我们的需求是在点击不同的数字时，也能把它对应的编号弹出来。然后我们洋洋洒洒写下了这样的代码：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"#list"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> oLi = <span class="built_in">document</span>.getElementById(<span class="string">"#list"</span>).getElementsByTagName(<span class="string">"li"</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; oLi.length; i++) &#123;</div><div class="line">        oLi[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            alert(i);</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line">&#125;)();</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>一运行，发现懵了。怎么弹出来的都是3？不对啊，我不是用循环将值都传进去了吗？</p>
<p>如果你确实理解了上面的 <strong>闭包中局部变量是引用而非拷贝</strong>这一节中的两个案例的话，那么就应该能了解一些。</p>
<p>解析：在这里我们为每一个li的<code>onclick</code>事件 <strong>绑定</strong>了一个匿名函数，这个匿名函数就形成了一个闭包。这些匿名函数并不立即执行，而是在点击对应的li的时候才回去执行它。<br>而在这时就和上面的<code>a = 1214;</code>这个例子一样，此时的循环早已结束，i 就等于<code>oLi.length</code>，在我们点击不同的<code>li</code>时，闭包中引用的其实都是引用的同一个变量i自然弹出来的都是3，（这里不理解引用的都是用一个i的话，可以将<code>alert(i);</code>替换成<code>alert(i++);</code>，再到浏览器上去进行测试）</p>
<p>解决方案：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> oLi = <span class="built_in">document</span>.getElementById(<span class="string">"#list"</span>).getElementsByTagName(<span class="string">"li"</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; oLi.length; i++) &#123;</div><div class="line">        oLi[i].onclick = (<span class="function"><span class="keyword">function</span>(<span class="params">j</span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                alert(j);</div><div class="line">            &#125;;</div><div class="line">        &#125;)(i);</div><div class="line">    &#125;</div><div class="line">&#125;)();</div><div class="line"><span class="comment">/*</span></div><div class="line">(function() &#123;</div><div class="line">    var oLi = document.getElementById("#list").getElementsByTagName("li");</div><div class="line">    for (var i = 0; i &lt; oLi.length; i++) &#123;</div><div class="line">        (function(j)&#123;</div><div class="line">            oLi[i].onclick= function()&#123;</div><div class="line">                alert(j);</div><div class="line">            &#125;;</div><div class="line">        &#125;)(i);</div><div class="line">    &#125;</div><div class="line">&#125;)();</div><div class="line">*/</div></pre></td></tr></table></figure>
<p>可以看到这里给出了两个简单的写法，但实际上除了写法不同之外、闭包包含范围、内容也不太一样（有兴趣的可以打开chrome调试工具看看），但是达到的效果是一样的。这样我们就为每个<code>li</code>的<code>onclick</code>事件的匿名函数，都保存下了自己闭包变量。就可以实现在点击每个li的时候弹出对应的标号了。（还可以将<code>alert(j);</code>替换成<code>alert(j++);</code>欣赏一下点击不同li时的累加效果）</p>
<p>当然如果你只是想要记住一些标号这么简单的事情，其实还可以将变量保留于元素节点上，也能达到一样的效果，如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> oLi = <span class="built_in">document</span>.getElementById(<span class="string">"#list"</span>).getElementsByTagName(<span class="string">"li"</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; oLi.length; i++) &#123;</div><div class="line">        oLi[i].flag = i;</div><div class="line">        oLi[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            alert(<span class="keyword">this</span>.flag);</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
<p>如果有错误之处，请指正。谢谢！</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;理解-Javascript中的this&quot;&gt;&lt;a href=&quot;#理解-Javascript中的this&quot; class=&quot;headerlink&quot; title=&quot;理解 Javascript中的this&quot;&gt;&lt;/a&gt;理解 &lt;code&gt;Javascript&lt;/code&gt;中的&lt;
    
    </summary>
    
      <category term="JS深度学习" scheme="http://guowenfh.github.io/categories/JS%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="JS" scheme="http://guowenfh.github.io/tags/JS/"/>
    
      <category term="百度前端技术学院" scheme="http://guowenfh.github.io/tags/%E7%99%BE%E5%BA%A6%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E5%AD%A6%E9%99%A2/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript函数学习笔记</title>
    <link href="http://guowenfh.github.io/2016/07/31/javascriptFunctionBasic/"/>
    <id>http://guowenfh.github.io/2016/07/31/javascriptFunctionBasic/</id>
    <published>2016-07-31T12:03:45.000Z</published>
    <updated>2016-09-11T08:24:40.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><blockquote>
<p>函数式一块javascript代码，定义一次，可以被多次调用与执行，JS中的函数也是对象，所以JS函数可以像其他对象那样操作，和传递，所以也称函数对象<br>函数的参数列表相当于函数的人口，<code>return</code>相当于函数的出口，函数本身就是一种数据类型，函数是可以嵌套定义的。</p>
</blockquote>
<h3 id="函数基础"><a href="#函数基础" class="headerlink" title="函数基础"></a>函数基础</h3><p>####　定义函数的方式</p>
<p>有三种方式可以定义函数。并且有着如下区别：</p>
<table>
<thead>
<tr>
<th>定义方式：</th>
<th><code>function</code> 语句（函数声明）</th>
<th><code>Function</code> 构造函数</th>
<th>函数表达式</th>
</tr>
</thead>
<tbody>
<tr>
<td>解析时机：</td>
<td>优先解析(声明前置)</td>
<td>顺序解析</td>
<td>顺序解析(声明提前，赋值不提前)</td>
</tr>
<tr>
<td>允许匿名：</td>
<td>有名</td>
<td>匿名</td>
<td>匿名</td>
</tr>
<tr>
<td>形式：</td>
<td>句子</td>
<td>表达式</td>
<td>表达式</td>
</tr>
<tr>
<td>性质：</td>
<td>静态</td>
<td>动态</td>
<td>静态</td>
</tr>
<tr>
<td>作用域：</td>
<td>具有函数的作用域</td>
<td>顶级函数(顶级作用域)</td>
<td>具有函数作用域</td>
</tr>
</tbody>
</table>
<p>主要有下面两个需要注意的地方：</p>
<ul>
<li>理解<code>Function</code> 构造函数的顶级作用域，直接看代码就好：很直观就可以表示出来</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> a  = <span class="number">2</span>;</div><div class="line">    <span class="keyword">var</span> func = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">"console.info(a)"</span>);</div><div class="line">    func();</div><div class="line">&#125;</div><div class="line">test();<span class="comment">//1;</span></div></pre></td></tr></table></figure>
<ul>
<li>函数表达式的多种创建方式：</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 最简单的形式，将函数赋值给一个变量</span></div><div class="line"><span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</div><div class="line">    <span class="comment">//do ..</span></div><div class="line">&#125;</div><div class="line"><span class="comment">// 立即执行匿名函数表达式IIFE</span></div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//do ..</span></div><div class="line">&#125;)();</div><div class="line"><span class="comment">// 将函数当成返回值</span></div><div class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">//do ..</span></div><div class="line">&#125;</div><div class="line"><span class="comment">//命名式函数表达式NFE</span></div><div class="line"><span class="keyword">var</span> add  = <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a,b</span>)</span>&#123;</div><div class="line">    <span class="comment">// do..</span></div><div class="line">    <span class="comment">// 只在foo函数内部可以使用foo这个名称(用途如：递归调用)（在新版浏览器下可用）</span></div><div class="line">    <span class="comment">// 外部访问不到foo这个函数名</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h4><blockquote>
<p>在JS中函数的参数分为形式参数和实际参数两个概念</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">a,b,c,d</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(test.length)<span class="comment">//4</span></div><div class="line">    <span class="keyword">return</span> a+b+c;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.info(test(<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>))<span class="comment">//60</span></div><div class="line"><span class="built_in">console</span>.log(test.length)<span class="comment">//4</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">arguments</span>.length);<span class="comment">//3,表示实际接受的参数个数</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">arguments</span>[<span class="number">0</span>]);<span class="comment">//10，传进来的第一个参数===a</span></div></pre></td></tr></table></figure>
<p>在 <strong>函数内部</strong> ，JS使用了一个特别的变量<code>arguments</code>的 <strong>类数组对象</strong>（以后再来说这个问题），用来接受传入函数的实际参数列表。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">arg</span>(<span class="params">a,b,c</span>)</span>&#123;</div><div class="line">    <span class="built_in">arguments</span>[<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">    <span class="built_in">console</span>.info(a,b,c)</div><div class="line">&#125;</div><div class="line">arg(<span class="number">143</span>,<span class="number">456</span>,<span class="number">6</span>)<span class="comment">//1 456 6</span></div></pre></td></tr></table></figure>
<p>普通模式下可以直接对于<code>arguments</code>对象进行更改，上面的代码就是一个很直观的例子，我们直接更改了第一个参数的值，<strong>但建议不要去试图更改<code>arguments</code>对象的属性</strong>，不符合规范。<br>注：严格模式下<code>arguments</code>对象是实参的一个副本，所以上面的改动不会生效(自行尝试)</p>
<h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><p>什么是构造函数？</p>
<p>其实构造函数只是普通函数的一个变种，它可以当成普通的函数方式调用，也能通过<code>new</code>关键字来调用。 在<code>Javascript</code>中通过 <code>new</code> 关键字方式调用的函数都被认为是构造函数。<br>在构造函数内部（ 也就是被调用的函数内） <code>this</code> 指向新创建的对象<code>Object</code>。 这个新创建的对象的 <code>prototype</code> 被指向到构造函数的 <code>prototype</code>。<br>如果被调用的函数没有显式的 <code>return</code> 表达式，则隐式的会返回 <code>this</code> 对象(也就是新创建的对象)。</p>
<p>这就来看看实际中不同情况下的区别：</p>
<ol>
<li>使用<code>new</code>关键字吗，不指定<code>return</code>语句</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.father = <span class="string">'allen'</span>;</div><div class="line">&#125;</div><div class="line">Person.prototype.getFatherName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.info(<span class="keyword">this</span>.father);</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> hong = <span class="keyword">new</span> Person();</div><div class="line"><span class="built_in">console</span>.info( <span class="keyword">new</span> Person());<span class="comment">//Person &#123;father: "allen"&#125;</span></div><div class="line">hong.getFatherName();<span class="comment">//allen</span></div></pre></td></tr></table></figure>
<ol>
<li>使用<code>new</code>关键字，并且指定<code>return</code>语句</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.father = <span class="string">'allen'</span>;</div><div class="line">    <span class="keyword">return</span> <span class="string">"1"</span>;</div><div class="line">&#125;</div><div class="line">Person.prototype.getFatherName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.info(<span class="keyword">this</span>.father);</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> hong = <span class="keyword">new</span> Person();</div><div class="line"><span class="built_in">console</span>.info( hong);<span class="comment">//Person &#123;father: "allen"&#125;</span></div><div class="line">hong.getFatherName();<span class="comment">//allen</span></div><div class="line"></div><div class="line"><span class="comment">//把return的值换成一个对象：</span></div><div class="line"><span class="comment">//return "1";-----------&gt;return &#123;a:1&#125;;或者return new String("12");</span></div><div class="line"><span class="keyword">var</span> hong = <span class="keyword">new</span> Person();</div><div class="line"><span class="built_in">console</span>.info( hong);<span class="comment">//Object &#123;a: 1&#125;</span></div><div class="line">hong.getFatherName();<span class="comment">//[脚本错误]</span></div></pre></td></tr></table></figure>
<ol>
<li>不使用<code>new</code>关键字，当成普通函数直接调用</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.father = <span class="string">'allen'</span>;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> &#123;&#125;</div><div class="line">    &#125;;</div><div class="line">&#125;</div><div class="line">Person.prototype.getFatherName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.info(<span class="keyword">this</span>.father);</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> bai = Person();</div><div class="line"><span class="built_in">console</span>.info(bai);<span class="comment">//undefined</span></div><div class="line"><span class="built_in">console</span>.info(father);<span class="comment">//allen</span></div><div class="line">bai.getFatherName();<span class="comment">//[脚本错误]</span></div></pre></td></tr></table></figure>
<p>通过这三段不同情况的示例代码，应该可以发现一些区别：</p>
<ol>
<li>使用<code>new</code>关键字吗，不指定<code>return</code>语句时，将隐式的会返回 <code>this</code> 对象(返也就是新创建的对象)。</li>
<li>使用<code>new</code>关键字，并且指定<code>return</code>语句时，需分为两种情况：<ul>
<li>返回值为标准类型，显式的 <code>return</code> 表达式将<strong>不会</strong>影响返回结果</li>
<li>返回值为对象，将直接返回你显式设置的对象</li>
</ul>
</li>
<li>不使用<code>new</code>关键字，当成普通函数直接调用时，<code>this</code>指向全局对象 window，所以内部this指定的属性与方法，全部都暴露到全局，导致全局变量污染。prototype上的方法不起效果(当然你要是这样的形式指定了return返回的内容，它自然会原样返回啦！)</li>
</ol>
<h4 id="工厂模型"><a href="#工厂模型" class="headerlink" title="工厂模型"></a>工厂模型</h4><p>为了不使用<code>new</code>关键字，构造函数必须显式的返回一个值。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPerson</span>(<span class="params">name, age, sex</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> obj = &#123;&#125;;</div><div class="line">    obj.name = name;</div><div class="line">    obj.age = age;</div><div class="line">    <span class="keyword">var</span> private = <span class="number">2</span>;<span class="comment">//私有外部不可访问</span></div><div class="line">    obj.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.info(<span class="keyword">this</span>.name)</div><div class="line">    &#125;</div><div class="line">    obj.getPrivate = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> private;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> obj;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> p1 = createPerson(<span class="string">"小红"</span>,<span class="number">21</span>,<span class="string">"女"</span>)</div><div class="line"><span class="keyword">var</span> p2 = createPerson(<span class="string">"小国"</span>,<span class="number">22</span>,<span class="string">"男"</span>)</div><div class="line"><span class="built_in">console</span>.info(p1.name);<span class="comment">//小红</span></div><div class="line"><span class="built_in">console</span>.info(p2.age);<span class="comment">//22</span></div><div class="line">p2.sayName();<span class="comment">//小国</span></div></pre></td></tr></table></figure>
<p>这就是一个简单的工厂模型，使用或者不使用<code>new</code>关键字没有功能性的区别。这样的方式比起 <code>new</code>的调用方式不容易出错，并且可以充分利用 <strong>私有变量</strong>带来的便利， 但是也有下面这样的问题</p>
<ol>
<li>占用更多的内存，因为新创建的对象不能共享原型上的方法。</li>
<li>为了实现继承，工厂方法需要从另外一个对象拷贝所有属性，或者把一个对象作为新创建对象的原型。</li>
</ol>
<p>这一篇博客最主要是对于函数学习的笔记，不过用自己的话来描述总描述的还不够清晰。<br>有错误之处请指出！</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;函数&quot;&gt;&lt;a href=&quot;#函数&quot; class=&quot;headerlink&quot; title=&quot;函数&quot;&gt;&lt;/a&gt;函数&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;函数式一块javascript代码，定义一次，可以被多次调用与执行，JS中的函数也是对象，所以JS函数可以像其他对
    
    </summary>
    
      <category term="JS深度学习" scheme="http://guowenfh.github.io/categories/JS%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="JS" scheme="http://guowenfh.github.io/tags/JS/"/>
    
      <category term="百度前端技术学院" scheme="http://guowenfh.github.io/tags/%E7%99%BE%E5%BA%A6%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E5%AD%A6%E9%99%A2/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript数组方法学习笔记</title>
    <link href="http://guowenfh.github.io/2016/07/24/JavaScript-ArrayMethod/"/>
    <id>http://guowenfh.github.io/2016/07/24/JavaScript-ArrayMethod/</id>
    <published>2016-07-24T12:46:15.000Z</published>
    <updated>2016-09-11T08:24:40.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><blockquote>
<p>在ECMAScript中数组是非常常用的引用类型了。ECMAScript所定义的数组和其他语言中的数组有着很大的区别。那么首先要说的就是数组也是一种对象。</p>
<p>特点:</p>
<ul>
<li>在JS中,”数组”即一组数据的集合长度可变，元素类型也可以不同！</li>
<li>数组长度随时可变！随时可以修改！（length属性）</li>
</ul>
</blockquote>
<p>一般来说我们定义数组的方法很简单，直接使用<code>[]</code>即可，当然也可以使用<code>new Array()</code>这样的构造函数的形式，不过并不常用。对于数组本身本没有太多可以说的东西，还是直接来过一遍它的方法</p>
<h3 id="Array实例的方法"><a href="#Array实例的方法" class="headerlink" title="Array实例的方法"></a>Array实例的方法</h3><ol>
<li><p><code>push</code>：向数组尾部添加元素（可多个）</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr =[];</div><div class="line"><span class="keyword">var</span> result = arr.push(<span class="number">1</span>,<span class="literal">true</span>);</div><div class="line"><span class="comment">// arr =[1,true] </span></div><div class="line"><span class="comment">// result=2;push方法返回值为新数组的长度</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>pop</code>：从数组尾部移除一个元素</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr =[<span class="number">1</span>,<span class="literal">true</span>];</div><div class="line"><span class="keyword">var</span> result = arr.pop();</div><div class="line"><span class="comment">// arr=[1]</span></div><div class="line"><span class="comment">// result = true;pop方法返回值为被移除的元素</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>shift</code>：从数组头部删除一个元素</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="literal">true</span>,<span class="keyword">new</span> <span class="built_in">Date</span>()];</div><div class="line"><span class="keyword">var</span> result = arr.shift();<span class="comment">//</span></div><div class="line"><span class="comment">// arr =[2, true, Fri May 20 2016 00:50:33 GMT+0800 (中国标准时间)] </span></div><div class="line"><span class="comment">// result = 1;shift方法返回值为被移除的元素</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>unshift</code>：向数组头部添加元素（可多个）</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [];</div><div class="line"><span class="keyword">var</span> result  = arr.unshift(<span class="number">1</span>,<span class="number">2</span>,<span class="literal">false</span>);</div><div class="line"><span class="comment">// arr = [1, 2, false]</span></div><div class="line"><span class="comment">// result = 3 ; unshift方法返回新数组的长度</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>splice</code>：数组截取/插入的方法（操作数组本身）</p>
<ol>
<li>第一个参数：截取的起始位置</li>
<li>第二个参数：表示截取的个数</li>
<li>第三个参数以后：从截取处插入新的元素（可多个）<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</div><div class="line"><span class="keyword">var</span> result = arr.splice(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</div><div class="line"><span class="comment">// arr = [1, 3, 4, 5, 4, 5];splice方法操作直接操作数组本身</span></div><div class="line"><span class="comment">// result = [2,3];splice方法返回被截取的元素</span></div></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p><code>slice</code>：数组截取（不操作数组本身）</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</div><div class="line"><span class="keyword">var</span> result = arr.slice(<span class="number">2</span>,<span class="number">4</span>);</div><div class="line"><span class="comment">// arr = [1,2,3,4,5];不操作数组本身</span></div><div class="line"><span class="comment">// result = [3,4];slice方法返回被截取的元素</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>concat</code>：链接两个数组的方法（不操作数组本身）</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</div><div class="line"><span class="keyword">var</span> arr2 = [<span class="literal">true</span>,<span class="number">5</span>];</div><div class="line"><span class="keyword">var</span> result = arr1.concat(arr2); </div><div class="line"><span class="comment">// arr1 = [1, 2, 3];</span></div><div class="line"><span class="comment">// arr2 = [true, 5];</span></div><div class="line"><span class="comment">// result = [1, 2, 3, true, 5];concat方法返回链接后的新数组</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>join</code>：在每个元素之间加入内容（不操作数组本身）</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</div><div class="line"><span class="keyword">var</span> result = arr.join(<span class="string">"-"</span>);</div><div class="line"><span class="comment">// arr = [1, 2, 3, 4, 5];</span></div><div class="line"><span class="comment">// result = "1-2-3-4-5"; join方法返回每个元素加入内容后的字符串</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>sort</code>：排序（直接操作数组本身）</p>
<ul>
<li>sort方法默认按照字符串形式的utf编码进行排序，需要确切的正序或倒序排序时，需要写入自己的函数 <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">345</span>,<span class="number">23</span>,<span class="number">22</span>,<span class="number">10</span>,<span class="number">9</span>];</div><div class="line"><span class="keyword">var</span> result1   = arr.sort();</div><div class="line"><span class="comment">// arr = [1, 10, 22, 23, 345, 9]</span></div><div class="line"><span class="comment">// result1 = [1, 10, 22, 23, 345, 9]sort方法返回排序后的数组</span></div><div class="line"><span class="keyword">var</span> result2   = arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> a-b;</div><div class="line">&#125;);</div><div class="line"><span class="comment">// result2 = [1, 9, 10, 22, 23, 345];正确的从小到大排列</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><code>reverse</code>：数组反转(直接操作数组本身)</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">12</span>,<span class="number">324</span>,<span class="number">543</span>,<span class="number">10</span>,<span class="number">9</span>];</div><div class="line"><span class="keyword">var</span> result = arr.reverse();</div><div class="line"><span class="comment">// arr = [9, 10, 543, 324, 12];</span></div><div class="line"><span class="comment">// result = [9, 10, 543, 324, 12]; //返回反转后的数组</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>indexOf</code>:正序查找元素的索引（0开始）</p>
<ul>
<li>只有一个参数时，表示待查找的元素</li>
<li>两个参数时，第一个参数表示表示待查找的元素，<br>第二个参数从第几个元素开始查<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>];</div><div class="line"><span class="keyword">var</span> result1 = arr.indexOf(<span class="number">4</span>)</div><div class="line"><span class="keyword">var</span> result2 = arr.indexOf(<span class="number">4</span>,<span class="number">4</span>)</div><div class="line"><span class="comment">// arr = [1,2,3,4,5,4,3,2,1];</span></div><div class="line"><span class="comment">// result1 = 3；返回值为查找到的元素索引</span></div><div class="line"><span class="comment">// result2 = 5</span></div><div class="line"><span class="comment">// 没有返回-1</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><code>lastIndexOf</code>:倒序版本：倒序查找元素的索引（最后一个元素开始）</p>
<ul>
<li>只有一个参数时，表示待查找的元素</li>
<li>两个参数时，第一个参数表示待查找的元素，第二个参数表示从倒数第几个元素开始查<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>];</div><div class="line"><span class="keyword">var</span> result1 = arr.lastIndexOf(<span class="number">4</span>)</div><div class="line"><span class="keyword">var</span> result2 = arr.lastIndexOf(<span class="number">4</span>,<span class="number">4</span>)</div><div class="line"><span class="comment">// arr = [1,2,3,4,5,4,3,2,1];</span></div><div class="line"><span class="comment">// result1 = 5；返回值为查找到的元素索引</span></div><div class="line"><span class="comment">// result2 = 3</span></div><div class="line"><span class="comment">// 没有返回-1</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><code>forEach</code>：循环数组的每一个元素，并且对每一项执行一个方法。没有返回值（不操作数组本身）</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</div><div class="line"><span class="keyword">var</span> result = arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item,index,arr</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> item+<span class="number">1</span>; </div><div class="line">&#125;)</div><div class="line"><span class="comment">// arr = [1, 2, 3, 4, 5];</span></div><div class="line"><span class="comment">// result = undefined;forEach方法没有返回值</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>map</code>：循环数组的每一个元素，并且对每一项执行一个方法，执行完毕后，新的数组返回（不操作数组本身）</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</div><div class="line"><span class="keyword">var</span> result = arr.map(<span class="function"><span class="keyword">function</span>(<span class="params">item,index,arr</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> item+<span class="number">1</span>; </div><div class="line">&#125;)</div><div class="line"><span class="comment">// arr = [1, 2, 3, 4, 5];</span></div><div class="line"><span class="comment">// result = [2, 3, 4, 5, 6];map方法返回运行函数后的新数组</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>filter</code>：对于数组的每一个元素，进行一个函数的运行，给定条件去执行，返回过滤后的结果（不操作数组本身）</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</div><div class="line"><span class="keyword">var</span> result = arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item,index,arr</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> item&gt;<span class="number">2</span>; </div><div class="line">&#125;)</div><div class="line"><span class="comment">// arr = [1,2,3,4,5];</span></div><div class="line"><span class="comment">// result = [3,4,5];返回满足条件的值</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>every</code>：对于数组的每一个元素都执行一个函数，如果都返回<code>true</code>,最后则返回<code>true</code>；如果有一个返回<code>false</code>,最后结果返回<code>false</code>.（不操作数组本身）</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</div><div class="line"><span class="keyword">var</span> result1 = arr.every(<span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">item,index,arr</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> item &gt; <span class="number">2</span>;</div><div class="line">&#125;);</div><div class="line"><span class="keyword">var</span> result2 = arr.every(<span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">item,index,arr</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> item &gt; <span class="number">0</span>;</div><div class="line">&#125;);</div><div class="line"><span class="comment">// arr = [1,2,3,4,5];</span></div><div class="line"><span class="comment">// result1 = false;不全部满足条件</span></div><div class="line"><span class="comment">// result2 = true;全部满足条件</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>some</code>：对于数组的每一个元素都执行一个函数，如果有一项返回<code>true</code>,最后则返回<code>true</code>；如果每一项返回<code>false</code>,最后结果才返回<code>false</code>.（不操作数组本身）（与上一个<code>every</code>相反）</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</div><div class="line"><span class="keyword">var</span> result1 = arr.some(<span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">item,index,arr</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> item&gt;=<span class="number">5</span>;</div><div class="line">&#125;);</div><div class="line"><span class="keyword">var</span> result2 = arr.some(<span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">item,index,arr</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> item&lt;<span class="number">0</span>;</div><div class="line">&#125;);</div><div class="line"><span class="comment">// arr = [1,2,3,4,5];</span></div><div class="line"><span class="comment">// result1 = true;不全部满足条件</span></div><div class="line"><span class="comment">// result2 = false;每一项都返回false</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>reduce</code>:最终构建一个返回值，接收一个函数作为累加器（accumulator），数组中的每个值（从左到右）开始合并，最终为一个值。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</div><div class="line"><span class="comment">/**</span></div><div class="line"> * perv:前一个值</div><div class="line"> * cur：当前值</div><div class="line"> * index：当前索引位置</div><div class="line"> * arr：原数组</div><div class="line"> **/</div><div class="line"><span class="keyword">var</span> result = arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">perv,cur,index,arr</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> perv +cur;</div><div class="line">&#125;);</div><div class="line"><span class="comment">// arr = [1,2,3,4,5];</span></div><div class="line"><span class="comment">// result = 15;</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>reduceRight</code>:倒序版本：最终构建一个返回值，<br>遍历的起始位置不同</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</div><div class="line"><span class="comment">/**</span></div><div class="line"> * perv:前一个值</div><div class="line"> * cur：当前值</div><div class="line"> * index：当前索引位置</div><div class="line"> * arr：原数组</div><div class="line"> **/</div><div class="line"><span class="keyword">var</span> result = arr.reduceRight(<span class="function"><span class="keyword">function</span>(<span class="params">perv,cur,index,arr</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> perv +cur;</div><div class="line">&#125;);</div><div class="line"><span class="comment">// arr = [1,2,3,4,5];</span></div><div class="line"><span class="comment">// result = 15;</span></div></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;数组&quot;&gt;&lt;a href=&quot;#数组&quot; class=&quot;headerlink&quot; title=&quot;数组&quot;&gt;&lt;/a&gt;数组&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;在ECMAScript中数组是非常常用的引用类型了。ECMAScript所定义的数组和其他语言中的数组有着很大的区
    
    </summary>
    
      <category term="前端技术" scheme="http://guowenfh.github.io/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="JS" scheme="http://guowenfh.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript作用域学习笔记</title>
    <link href="http://guowenfh.github.io/2016/07/08/JavaScript-scopeChain/"/>
    <id>http://guowenfh.github.io/2016/07/08/JavaScript-scopeChain/</id>
    <published>2016-07-07T16:45:23.000Z</published>
    <updated>2016-09-11T08:24:40.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>无论什么语言中，作用域都是一个十分重要的概念，在JavaScript中也不例外，作用域定义了变量或者函数有权访问的范围，决定了它们各自的行为。要理解JavaScript中的作用域首先就要知道：在<code>let</code>出现之前，JS中变量的作用域只有两种：全局作用域和局部作用域。（本文也只讨论这两种作用域）</p>
</blockquote>
<h3 id="全局作用域"><a href="#全局作用域" class="headerlink" title="全局作用域"></a>全局作用域</h3><p>全局作用域是最外围的一个执行环境，可以在代码的任何地方访问到。在浏览器中，我们的全局作用域就是<code>window</code>。因此在浏览器中，所有的全局变量和函数都是作为<code>window</code>对象的属性和方法创建的。</p>
<p>下面就来看看全局作用域的创建方式：</p>
<ol>
<li>全局变量与全局函数</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> name = <span class="string">"小红"</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> anotherName = <span class="string">"小黑"</span>;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">showName</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.info(name)</div><div class="line">        <span class="built_in">console</span>.info(anotherName)</div><div class="line">    &#125;</div><div class="line">    showName();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.info(name);<span class="comment">//小红</span></div><div class="line"><span class="built_in">console</span>.info(anotherName);<span class="comment">//【脚本出错】</span></div><div class="line">doSomething();<span class="comment">//小红---小黑</span></div><div class="line">showName();<span class="comment">//【脚本出错】</span></div></pre></td></tr></table></figure>
<p>通过代码可以很清楚的看出来，我在前面所说的 <strong>作用域定义了变量或者函数有权访问的范围</strong> ，在这里我们定义了一个全局的变量<code>name</code>与全局函数<code>doSomething()</code>，他可以在任何地方被直接访问。但是我们又在函数内部创建了变量<code>anotherName</code>与函数<code>showName()</code>，通过代码中的调用情况可以发现，我们在外部调用它时提示【脚本出错】，因为他们处于局部作用域内（稍后讲），而 <strong>外部环境不能访问内部环境的任何变量与函数</strong>。这就涉及到了作用域的概念(稍后讲)</p>
<ol>
<li>未声明直接定义的变量</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">showName</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> fullName = <span class="string">"小红"</span>;</div><div class="line">    anotherName = <span class="string">"小黑"</span>;</div><div class="line">    <span class="built_in">console</span>.info(fullName)</div><div class="line">&#125;</div><div class="line">showName();<span class="comment">//小红</span></div><div class="line"><span class="built_in">console</span>.info(anotherName);<span class="comment">//小黑</span></div><div class="line"><span class="built_in">console</span>.info(fullName);<span class="comment">//【脚本出错】</span></div></pre></td></tr></table></figure>
<p>在这样的情况下，变量<code>anotherName</code>拥有全局作用域，而<code>fullName</code>在函数外部无法访问到。（注：在高程中明确说明，不声明而直接初始化变量是错误做法，应该避免这样的情况<code>严格模式下，初始化未声明的变量将报错</code>）</p>
<ol>
<li>所有window对象上的属性都具有全局作用</li>
</ol>
<p>这个实际上在上面已经提到了：<strong>所有的全局变量和函数都是作为<code>window</code>对象的属性和方法创建的。</strong>，自然<code>window</code>对象它本身所具有的属性和方法，同样是处于全局作用域，例如：<code>window.location</code>，<code>window.name</code>等等。</p>
<h3 id="局部作用域"><a href="#局部作用域" class="headerlink" title="局部作用域"></a>局部作用域</h3><p>其实在上面的代码中，为了展示全局作用域的效果，我们就已经创造了局部作用域。局部作用域和全局作用域正好相反，局部作用域一般只在固定的代码片段内可访问到，最常见的就是函数内部，所以在很多地方就会有人把它称为函数作用域。（记住<code>let</code>之前无块级作用域）。我们再来看一下第一段代码：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> name = <span class="string">"小红"</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> anotherName = <span class="string">"小黑"</span>;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">showName</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.info(name)</div><div class="line">        <span class="built_in">console</span>.info(anotherName)</div><div class="line">    &#125;</div><div class="line">    showName();</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.info(anotherName);<span class="comment">//【脚本出错】</span></div><div class="line">showName();<span class="comment">//【脚本出错】</span></div></pre></td></tr></table></figure>
<p>在这段代码中变量 <code>anotherName</code>,与函数 <code>showName()</code>，都拥有局部作用域。因此它不能被外部所访问，那么问题就来了，为什么全局变量他就能在局部作用域内被访问到呢？这就是 JavaScript 中的作用域链概念！</p>
<h3 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h3><p>在JS中:”一切皆是对象, 函数也是”。</p>
<p>在 JavaScript 中，每个函数都有着自己的作用域，在每次调用一个函数的时候 ，就会进入一个函数内的作用域，而当函数执行返回以后，就返回调用前的作用域。</p>
<p>当代码在一个作用域内执行时，就会根据其上下文创建一个作用域链，该作用域链的用途就是控制当前作用域对于内所有的变量与函数的有序访问。作用域链的最前端，始终都是当前执行代码所在的作用域的变量对象。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> name = <span class="string">"小红"</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeName</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(name ===<span class="string">"小红"</span>)&#123;</div><div class="line">        name=<span class="string">"小黑"</span>;</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        name =<span class="string">"小红"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">changeName();</div><div class="line"><span class="built_in">console</span>.info(<span class="string">"新名字:"</span>+name);<span class="comment">//小黑</span></div></pre></td></tr></table></figure>
<p>在这个例子中，<code>changName()</code>被定义在全局作用域下，他的作用域链包含着包含两个对象：1.它本身的变量对象(函数都会包含<code>arguments</code>对象)，2.全局环境对象。之所以能在函数内部访问到变量<code>name</code>,就是因为在它的作用域中，能找到它。（<strong>JS的标识符解析，是沿着作用域链一级一级的查找搜索的过程，从作用域链的最前端开始直到全局环境，最终没有查找到时将报错。</strong>）我们再回过头来稍微改一下第一段代码：并且看看他们能访问到那些变量：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> name = <span class="string">"小红"</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> anotherName = <span class="string">"小黑"</span>;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">showName</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> author =<span class="string">"三省吾身丶丶"</span>;</div><div class="line">        <span class="built_in">console</span>.info(name)</div><div class="line">        <span class="built_in">console</span>.info(anotherName)</div><div class="line">        <span class="comment">// 在这里可以访问到 name 、anotherName 、author</span></div><div class="line">    &#125;</div><div class="line">    showName();</div><div class="line">    <span class="comment">// 在这里可以访问到 name anotherName ,不能访问到 author</span></div><div class="line">&#125;</div><div class="line">doSomething();</div><div class="line"><span class="comment">// 在这里只能访问到 name</span></div></pre></td></tr></table></figure>
<p>要想理解这种作用域其实也很简单，作用域就像是一架 <strong>每一个台阶都是相对封闭（同级），并且只能上不能下的梯子</strong>，在越底层的台阶上，它能走的步数越多（作用域链越长）。为了找到它想要的东西，就开始爬台阶，每爬一步台阶，都能看到这一级台阶上有什么东西，直到最顶上的那一阶。（找到了就带回去一起玩耍，玩完了之后还得换回去，要是最后都没找到就掉下去摔死了）</p>
<h3 id="坑与示例解析"><a href="#坑与示例解析" class="headerlink" title="坑与示例解析"></a>坑与示例解析</h3><p>在了解坑之前，其实只要记住权威指南里面的一句话，就可以躲过很多这方面的坑了，那就是：<strong>JavaScript中的函数运行在它们被定义的作用域里,而不是它们被执行的作用域里</strong></p>
<p>下面就来看看这一个例子：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> name = <span class="string">'小红'</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">showName</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.info(name);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> name = <span class="string">'小黑'</span>;</div><div class="line">    showName();</div><div class="line">&#125;</div><div class="line"></div><div class="line">show();</div></pre></td></tr></table></figure>
<p>结果会是什么呢？ </p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">小红</div></pre></td></tr></table></figure>
<p>如果你记住并且理解了上面的话，那么应该可以得到这个结果。用作用域链的角度解析：执行<code>show()</code>函数时，进入<code>function show(){}</code>的作用域内，然后执行<code>showName()</code>函数，再进入到<code>function showName(){}</code>的作用域内，要输出<code>name</code>，就在当前作用域找，但是找不到，然后就向上爬一层，在全局环境中找到了<code>var name = &#39;小红&#39;;</code>，所以<code>show()</code>就输出了小红。</p>
<p>再来看一个这个例子的改动版本</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> name = <span class="string">'小红'</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> name = <span class="string">'小黑'</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">showName</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.info(name);</div><div class="line">    &#125;</div><div class="line">    showName();</div><div class="line">&#125;</div><div class="line">show();</div></pre></td></tr></table></figure>
<p>结果是：<code>小黑</code></p>
<p>解析：执行<code>show()</code>函数时，进入<code>function show(){}</code>的作用域内，然后执行<code>showName()</code>函数，再进入到<code>function showName(){}</code>的作用域内，要输出<code>name</code>，就在当前作用域找，发现本身找不到，就向上爬一层到了<code>show()</code>里面，发现已经找到了<code>var name = &#39;小黑&#39;;</code>，那么就停止查找，输出了<code>小黑</code><br>。</p>
<p>先到这，不知道有没有对作用域有了更多的了解呢？感觉有些地方还了解的不够透彻，希望在开发项目的过程中能有更深的理解。</p>
<p>如果有错误之处，请指正。谢谢！</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;无论什么语言中，作用域都是一个十分重要的概念，在JavaScript中也不例外，作用域定义了变量或者函数有权访问的范围，决定了它们各自的行为。要理解JavaScript中的作用域首先就要知道：在&lt;code&gt;let&lt;/code&gt;出现之前，JS中变量的
    
    </summary>
    
      <category term="JS深度学习" scheme="http://guowenfh.github.io/categories/JS%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="JS" scheme="http://guowenfh.github.io/tags/JS/"/>
    
      <category term="百度前端技术学院" scheme="http://guowenfh.github.io/tags/%E7%99%BE%E5%BA%A6%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E5%AD%A6%E9%99%A2/"/>
    
  </entry>
  
  <entry>
    <title>思想汇报</title>
    <link href="http://guowenfh.github.io/2016/07/03/thoughtReport-2016-07-03/"/>
    <id>http://guowenfh.github.io/2016/07/03/thoughtReport-2016-07-03/</id>
    <published>2016-07-03T09:14:29.000Z</published>
    <updated>2016-09-11T08:24:40.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>闲来无事，翻了翻朋友圈，看到自己年初定下的几个小目标，突然想到原来王自如的思想汇报，我觉得自己也应该要反思一下自己，正好写下来做一个沉淀。</p>
</blockquote>
<p>时间真快啊，到写博客的时候才发现上一篇博客还是三月份在广州实习的时候写的，到今天已经有96天了。沉默了那么长一段时间，也并没有憋什么大招，不是太满意，现在重新开始写，最低产量一个星期一篇吧，不过什么都可以写，都是自己心境的一个记录。</p>
<p>正好2016年已经过去一半了，那就先从年初定下的目标开始说起吧</p>
<h3 id="说说目标"><a href="#说说目标" class="headerlink" title="说说目标"></a>说说目标</h3><p>还记得当时是15年最后一天，本来东拼西凑写了千把字的总结，因为太散就只留下了下面这几个目标：</p>
<blockquote>
<ol>
<li>前端实习，答辩，工作。</li>
<li>前端技术与编程思想的学习。</li>
<li>继续消除自卑心理，提升自信，积极面对。</li>
<li>多看书，先定个最低目标吧，30本。</li>
<li>写作表达，开口说话，冷场说话，脸皮薄也要说话，挨打也要说话。</li>
<li>尽心尽力把每一件事情最好，但求问心无愧。</li>
</ol>
</blockquote>
<p>半年时间，对自己不够满意，但也算是完成了一些吧，如下：</p>
<ul>
<li>结束广州的前端实习，到重庆的毕业答辩，再到现在杭州的前端工作，辗转几个地方，第一个目标算是完成了。</li>
<li>书这方面，无营养的网文看了不少，正儿八经的书就有点惨不忍睹了，看完的有：《大学之路（上、下册）》、《Web全栈开发师的自我修养》、《自卑与超越》、《慕课革命》。确实完成的不像话，后面这半年得加油了，书买回来就要看，自己定下的目标还是要去完成</li>
<li>其他的几个目标其实说的比较泛泛，不是太好评价。<ul>
<li>前端技术和编程思想方面，其实个人觉得进步不多，不过在和老友一起做一个外包项目之后，明白以及确定以解决问题为完成工作的第一要务，而后再去考虑其他的种种因素，这也是一个进步吧！</li>
<li>关于自卑和说话，现在已经好很多了，在分享与提出质疑中继续加油吧！大不了就是挨打不是么？</li>
</ul>
</li>
</ul>
<p><strong>尽心尽力把每一件事情最好，但求问心无愧。</strong>，这个继续加油吧！</p>
<p>不知不觉中学习前端到这个月已经整整一年时间，算是正式跨入了互联网的行当里面。</p>
<p>其实第一次接触编程是大一，当时买了本C语言的书，对着教程就开始学，然后…就从入门到放弃了，直到去年再次想学习编程，接触到前端，因为易入门、浏览器的直观显示（至今我还更喜欢调界面，为了1px耗上个半天，毕竟处女座嘛）、再到了解到响应式网页开发的强大，才真正的喜欢上了编程。前路漫漫，继续加油！</p>
<h3 id="思考和感悟"><a href="#思考和感悟" class="headerlink" title="思考和感悟"></a>思考和感悟</h3><ol>
<li><p>其实每次写博客都希望自己写的很好，写一些别人没有写过的东西出来，但是现在还没达到那样的水平，然后一味的想，导致根本没有产出。其实产出可以是对自己的，你把别人的东西学会、用出来，把过程记录下来，然后学到的东西不就是自己的了么？所以现在改变策略了，事无巨细，我更多的可能会把博客当成笔记来使用，只是把记的笔记使用讲述的方式来帮助我理解。</p>
</li>
<li><p>这半年看书确实看的有点少了，当初刚学前端的时候，学校安排到医院实习，除去正常的医院工作外，在办公室就是看书了。哦，不对，抄书。css一个一个属性抄过去，js秘密花园抄了一遍，结果后来开始找实习之后就没有这样了，看博客、敲代码。做了很多重复的事情，现在要改变策略了，又在知乎上看到CSS魔法在半年前对我说的：<code>疯狂啃书，野蛮生长！</code>，这半年没这样做到，就像乔老爷子说的那句话 <code>Stay Hungry. Stay Foolish.</code>，保持这种饥饿感，保持一种初学者的心态， 那么下半年就要加油了。</p>
</li>
<li><p>我学习有一个很大的问题想得太多，做的太少，可能真的是我一个特别需要去改进的地方吧，就像完成工作一样，首先一定是要把工作完成，然后再想着怎么去优化，改进。在这个新型技术一浪接着一浪的时代，一定要快速开发，功能都没有完成，想着优化有什么用呢?</p>
</li>
<li><p>质疑和沟通很重要，有什么问题在尝试过后，解决不了就和别人沟通，说不定是别人的问题，或者别人可能很轻松的帮你解决，记得把问题的解决记录下来。不要一个人闷着，做太多的额外功，等到别人催你之后再去和别人沟通，这时，项目的进度就被你拉下来了，这样不好。</p>
</li>
<li><p>做事情积极主动一点，手上工作完成了就想想能不能优化，和同事一起商量一下有没有更好的解决方案，同事那边有什么是你能帮上忙的，不要被动的被推着走，积极主动点没错的。</p>
</li>
<li><p>记下这句可以警醒的话</p>
<blockquote>
<p>这才是真正的人生，每个人都按照惯性进步或者滑落，更多是在煮沸温水中逐渐死去的青蛙，愚昧无知到连跳出去的欲望都欠奉。</p>
</blockquote>
</li>
<li><p>嗯，还有都快130了。。。。这么胖，你能忍? 多跑步健身减肥，健康是最大的本钱，平安是福，对人对己都是。</p>
</li>
</ol>
<p>今天就这样吧，最重要的是：</p>
<p><strong>坚持去坚持。</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;闲来无事，翻了翻朋友圈，看到自己年初定下的几个小目标，突然想到原来王自如的思想汇报，我觉得自己也应该要反思一下自己，正好写下来做一个沉淀。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;时间真快啊，到写博客的时候才发现上一篇博客还是三月份在广州实习的时
    
    </summary>
    
      <category term="生活" scheme="http://guowenfh.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="思想汇报" scheme="http://guowenfh.github.io/tags/%E6%80%9D%E6%83%B3%E6%B1%87%E6%8A%A5/"/>
    
  </entry>
  
  <entry>
    <title>webpack入坑之旅（六）配合vue-router实现SPA</title>
    <link href="http://guowenfh.github.io/2016/03/28/vue-webpack-06-router/"/>
    <id>http://guowenfh.github.io/2016/03/28/vue-webpack-06-router/</id>
    <published>2016-03-28T05:57:57.000Z</published>
    <updated>2016-09-11T08:24:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>这是一系列文章，此系列所有的练习都存在了我的github仓库中<a href="https://github.com/guowenfh/vue-webpack" target="_blank" rel="external">vue-webpack</a>，在本人有了新的理解与认识之后,会对文章有不定时的更正与更新。下面是目前完成的列表：</p>
<ul>
<li><a href="http://guowenfh.github.io/2016/03/24/vue-webpack-01-base/">webpack入坑之旅（一）不是开始的开始</a></li>
<li><a href="http://guowenfh.github.io/2016/03/24/vue-webpack-02-deploy/">webpack入坑之旅（二）loader入门</a></li>
<li><a href="http://guowenfh.github.io/2016/03/24/vue-webpack-03-config/">webpack入坑之旅（三）webpack.config入门</a></li>
<li><a href="http://guowenfh.github.io/2016/03/24/vue-webpack-04-custom/">webpack入坑之旅（四）扬帆起航</a></li>
<li><a href="http://guowenfh.github.io/2016/03/25/vue-webpack-05-vue/">webpack入坑之旅（五）加载vue单文件组件</a> </li>
<li><a href="http://guowenfh.github.io/2016/03/28/vue-webpack-06-router/">webpack入坑之旅（六）配合vue-router实现SPA</a></li>
</ul>
<p>在上面的练习当中我们已经成功的加载了一个<code>.vue</code>格式的单文件组件，并且实现了在使用vue情况下的自动刷新。</p>
<p>但是我们最终的目的还是要实现单页面应用程序，这个时候我们就必不可少的需要使用到路由管理器来进行SPA的开发，vue官方为我们提供了一个官方库<a href="https://github.com/vuejs/vue-router" target="_blank" rel="external">vue-router</a>，并且配有对应的<a href="http://vuejs.github.io/vue-router/zh-cn/index.html" target="_blank" rel="external">中文文档</a>。关于里面的内容大家自行前去观看。在这里，只会把我们需要的东西拿出来讲。</p>
<h2 id="vue组件"><a href="#vue组件" class="headerlink" title="vue组件"></a>vue组件</h2><blockquote>
<p><a href="http://cn.vuejs.org/guide/components.html" target="_blank" rel="external">官网对于组件讲解</a></p>
</blockquote>
<p>在<code>Vue</code>中定义一个组件非常简单，只需要一对<strong>自定义标签</strong>，在其中填入内容就可以进行我们的组件编写了，然后使用<code>Vue.component()</code>去注册我们的组件下面来看一个例子，来直观的看看vue的组件。</p>
<h3 id="组件入门"><a href="#组件入门" class="headerlink" title="组件入门"></a>组件入门</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">my-component</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 自定义标签作为组件名称 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">my-component</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 复用 --&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript"></span></div><div class="line">        <span class="comment">// 定义并且注册组件</span></div><div class="line">        <span class="comment">// 在官方的示例中使用 Vue.extend(&#123;&#125;)先注册了一个定义模板，再引用，看个人喜好吧</span></div><div class="line">        Vue.component(<span class="string">"my-component"</span>, &#123;</div><div class="line">            template:<span class="string">"&lt;h2&gt;hello Vue component&lt;/h2&gt;"</span></div><div class="line">        &#125;)</div><div class="line">        <span class="comment">// 创建根实例</span></div><div class="line">        <span class="comment">// 在这里 定义并且注册组件 必须创建根实例前，不然会报错，因为解析顺序的问题？</span></div><div class="line">        <span class="keyword">new</span> Vue(&#123;</div><div class="line">            el:<span class="string">"#app"</span></div><div class="line">        &#125;);</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<p>上面就是最简单的定义组件的方式，<strong><code>template</code>属性中写的东西</strong>:就是<code>&lt;my-component&gt;</code>这个自定义标签渲染后展现出来的样式，这里渲染为：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>hello Vue component<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>hello Vue component<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="使用template标签"><a href="#使用template标签" class="headerlink" title="使用template标签"></a>使用template标签</h3><p>在上面这段代码中组件内的内容都被写在<code>template</code>属性中，如果组件中的内容继续增加，一堆的引号和加号来拼接这些字符串简直就是噩梦。所以Vue 引入了<code>template</code>标签（html5定义的，浏览器默认不去解析里面的内容）。<strong><code>&lt;template&gt; 不能用在 &lt;table&gt; 内</code></strong>下面来看看它的使用方法：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 使用 template 并且添加选择器(只能使用id)--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"myTemp"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>This is Template <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>add ...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">my-component</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">my-component</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript"></span></div><div class="line">        Vue.component(<span class="string">"my-component"</span>, &#123;</div><div class="line">            template:<span class="string">"#myTemp"</span><span class="comment">//对应上面定义的template标签中的选择器</span></div><div class="line">        &#125;)</div><div class="line">        <span class="keyword">new</span> Vue(&#123;</div><div class="line">            el:<span class="string">"#app"</span></div><div class="line">        &#125;);</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<p>可以看到在注册组件中，可以<code>template</code>可以使用选择器来获取到上面我们<code>&lt;template&gt;</code>标签中的内容。所以这里应该会被渲染为：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>This is Template <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>add ...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>This is Template <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>add ...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>组件的基础介绍就到这，更多详细内容请移步<a href="http://cn.vuejs.org/guide/" target="_blank" rel="external">官网</a> </p>
<h2 id="vue-router"><a href="#vue-router" class="headerlink" title="vue-router"></a>vue-router</h2><p>刚刚已经对于vue的组件有了一定的了解。现在来结合vue-router，来进行一下动态的切换。</p>
<p>首先是安装，如果使用npm的形式的话，直接运行<code>npm install vue-router --save</code>,就可以看到<code>vue-router</code>，已经被添加到了项目依赖中。直接上<code>ES6</code>的语法来进行引入</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">"vue"</span>;</div><div class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">"vue-router"</span>;</div><div class="line">Vue.use(VueRouter);</div></pre></td></tr></table></figure>
<h3 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h3><p>其实这一部分<code>vue-router</code>的<a href="http://vuejs.github.io/vue-router/zh-cn/basic.html" target="_blank" rel="external">中文文档</a>中已经讲的非常详细了。。在这里与它不同的是它用的<code>CommonJS</code>的规范来进行模块安装，而我使用ES6的import，有兴趣自己去看- -。其他的内容我就直接扒下来了。</p>
<p>html:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello App!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 使用指令 v-link 进行导航。 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-link</span>=<span class="string">"&#123; path: '/foo' &#125;"</span>&gt;</span>Go to Foo<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-link</span>=<span class="string">"&#123; path: '/bar' &#125;"</span>&gt;</span>Go to Bar<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- 路由外链 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>javascript:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 定义组件</span></div><div class="line"><span class="keyword">var</span> Foo = Vue.extend(&#123;</div><div class="line">    template: <span class="string">'&lt;p&gt;This is foo!&lt;/p&gt;'</span></div><div class="line">&#125;)</div><div class="line"><span class="keyword">var</span> Bar = Vue.extend(&#123;</div><div class="line">    template: <span class="string">'&lt;p&gt;This is bar!&lt;/p&gt;'</span></div><div class="line">&#125;)</div><div class="line"><span class="comment">// 路由器需要一个根组件。</span></div><div class="line"><span class="comment">// 出于演示的目的，这里使用一个空的组件，直接使用 HTML 作为应用的模板</span></div><div class="line"><span class="keyword">var</span> App = Vue.extend(&#123;&#125;)</div><div class="line"><span class="comment">// 创建一个路由器实例</span></div><div class="line"><span class="comment">// 创建实例时可以传入配置参数进行定制，为保持简单，这里使用默认配置</span></div><div class="line"><span class="keyword">var</span> router = <span class="keyword">new</span> VueRouter()</div><div class="line"><span class="comment">// 定义路由规则</span></div><div class="line"><span class="comment">// 每条路由规则应该映射到一个组件。这里的“组件”可以是一个使用 Vue.extend</span></div><div class="line"><span class="comment">// 创建的组件构造函数，也可以是一个组件选项对象。</span></div><div class="line"><span class="comment">// 稍后我们会讲解嵌套路由</span></div><div class="line">router.map(&#123;</div><div class="line">    <span class="string">'/foo'</span>: &#123;</div><div class="line">        component: Foo</div><div class="line">    &#125;,</div><div class="line">    <span class="string">'/bar'</span>: &#123;</div><div class="line">        component: Bar</div><div class="line">    &#125;</div><div class="line">&#125;)</div><div class="line"><span class="comment">// 现在我们可以启动应用了！</span></div><div class="line"><span class="comment">// 路由器会创建一个 App 实例，并且挂载到选择符 #app 匹配的元素上。</span></div><div class="line">router.start(App, <span class="string">'#app'</span>)</div></pre></td></tr></table></figure>
<p>我个人感觉这部分还是很好理解的，官方也给了一个<a href="http://jsfiddle.net/yyx990803/xyu276sa/" target="_blank" rel="external">在线示例应用</a>。很好的展现了它的路由切换。</p>
<p>简单的介绍到这，下面最重要的部分到了，看看如何结合我们定义的<code>.vue</code>单文件组件。</p>
<p>首先来看我们的文件目录结构：</p>
<p><img src="/images/vue-webpack/01-webpack-vuerouter.jpg" alt="01-webpack-vuerouter"></p>
<h3 id="定义路由规则"><a href="#定义路由规则" class="headerlink" title="定义路由规则"></a>定义路由规则</h3><p><strong>最主要是<code>main.js</code></strong>的变化，直接在文件中讲解了：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 引入vue以及vue-router</span></div><div class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">"vue"</span>;</div><div class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">"vue-router"</span>;</div><div class="line">Vue.use(VueRouter);</div><div class="line"><span class="comment">// 引入组件！直接使用es6的语法</span></div><div class="line"><span class="keyword">import</span> index <span class="keyword">from</span> <span class="string">'./components/app.vue'</span>;</div><div class="line"><span class="keyword">import</span> list <span class="keyword">from</span> <span class="string">'./components/list.vue'</span>;</div><div class="line"><span class="keyword">import</span> hello <span class="keyword">from</span> <span class="string">'./components/hello.vue'</span>;</div><div class="line"><span class="comment">//开启debug模式</span></div><div class="line">Vue.config.debug = <span class="literal">true</span>;</div><div class="line"><span class="comment">// new Vue(app);//这是上一篇用到的，新建一个vue实例，现在使用vue-router就不需要了。</span></div><div class="line"><span class="comment">// 路由器需要一个根组件。</span></div><div class="line"><span class="keyword">var</span> App = Vue.extend(&#123;&#125;);</div><div class="line"><span class="comment">// 创建一个路由器实例</span></div><div class="line"><span class="keyword">var</span> router = <span class="keyword">new</span> VueRouter();</div><div class="line"><span class="comment">// 每条路由规则应该映射到一个组件。这里的“组件”可以是一个使用 Vue.extend创建的组件构造函数，也可以是一个组件选项对象。</span></div><div class="line"><span class="comment">// 稍后我们会讲解嵌套路由</span></div><div class="line">router.map(&#123;<span class="comment">//定义路由映射</span></div><div class="line">    <span class="string">'/index'</span>:&#123;<span class="comment">//访问地址</span></div><div class="line">        name:<span class="string">'index'</span>,<span class="comment">//定义路由的名字。方便使用。</span></div><div class="line">        component:index,<span class="comment">//引用的组件名称，对应上面使用`import`导入的组件</span></div><div class="line">        <span class="comment">//component:require("components/app.vue")//还可以直接使用这样的方式也是没问题的。不过会没有import集中引入那么直观</span></div><div class="line">    &#125;,</div><div class="line">    <span class="string">'/list'</span>: &#123;</div><div class="line">        name:<span class="string">'list'</span>,</div><div class="line">        component: list</div><div class="line">    &#125;,</div><div class="line">&#125;);</div><div class="line">router.redirect(&#123;<span class="comment">//定义全局的重定向规则。全局的重定向会在匹配当前路径之前执行。</span></div><div class="line">    <span class="string">'*'</span>:<span class="string">"/index"</span><span class="comment">//重定向任意未匹配路径到/index</span></div><div class="line">&#125;);</div><div class="line"><span class="comment">// 现在我们可以启动应用了！</span></div><div class="line"><span class="comment">// 路由器会创建一个 App 实例，并且挂载到选择符 #app 匹配的元素上。</span></div><div class="line">router.start(App, <span class="string">'#app'</span>);</div></pre></td></tr></table></figure>
<p>在index.html需要有用于渲染匹配的组件，如下<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>现在当我们运行 <code>npm start</code> 进入<code>http://localhost:8080/</code>就会自动跳转到<code>http://localhost:8080/#!/index</code>，并且读取里面的内容。</p>
<h3 id="实现路由跳转"><a href="#实现路由跳转" class="headerlink" title="实现路由跳转"></a>实现路由跳转</h3><p>主要抽出<code>app.vue</code>中的内容来讲解，的内容是：(<code>list.vue</code>里面的内容自行设置查看吧)<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>姓名：&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;age&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"golist"</span>&gt;</span>$route.router.go查看<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-link</span>=<span class="string">"&#123; name: 'list' &#125;"</span>&gt;</span>v-link查看列表<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-link</span>=<span class="string">"&#123; name: 'index' &#125;"</span>&gt;</span>回去主页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;<span class="comment">//这里是官方的写法，默认导出，ES6</span></div><div class="line">        data () &#123; <span class="comment">//ES6，等同于data:function()&#123;&#125;</span></div><div class="line">            <span class="keyword">return</span> &#123;    <span class="comment">//必须使用这样的形式，才能创建出单一的作用域</span></div><div class="line">                name:<span class="string">"guowenfh"</span>,</div><div class="line">                age:<span class="string">"21"</span></div><div class="line">            &#125;</div><div class="line">        &#125;,</div><div class="line">        methods :&#123;</div><div class="line">            golist () &#123;<span class="comment">//方法，定义路由跳转，注意这里必须使用this，不然报错</span></div><div class="line">                <span class="keyword">this</span>.$route.router.go(&#123;name:<span class="string">"list"</span>&#125;);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 样式自行设置，或者直接看源码就好 --&gt;</span></div></pre></td></tr></table></figure></p>
<p>因为自刷新的缘故，直接切换到浏览器。</p>
<p>点击上面使用的<code>v-link</code>，与<code>router.go</code>的方式都可以跳转到<code>list</code>定义的路由。（<strong>观察浏览器地址栏的变化</strong>）在这里我们使用的<code>{name:&quot;list&quot;}</code>，使用<code>{ path: &#39;/list&#39; }</code>会有同样的效果。</p>
<h2 id="引用Vue组件"><a href="#引用Vue组件" class="headerlink" title="引用Vue组件"></a>引用Vue组件</h2><p>在第一小点里面我们看到了在页面内的组件的使用方法，第二小点中学习到了<code>vue-router</code>的制定路由规则。</p>
<p>看过这两个地方之后，我们把思维发散开来，应该就能触类旁通的想到如何在页面中嵌套加载别的组件了。<br>我们创建一个<code>hello.vue</code> ，里面内容随意。现在我们如果要在<code>app.vue</code>中加载它，那么只需要在<code>app.vue</code>中使用<code>import hello from &quot;./hello.vue&quot;</code>（其实这个达到了使用require两步的效果。引入赋值）。</p>
<p>引入之后，只需要如下注册：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">    <span class="comment">//其它的就</span></div><div class="line">    components:&#123;</div><div class="line">        hello<span class="comment">//若还有更多的组件，只需要在import的情况下，以逗号分割，继续注册就好</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后在<code>app.vue</code>中添加<code>&lt;hello&gt;&lt;/hello&gt;</code>这一对自定义标签，就可以实现加载<code>hello.vue</code>中的内容。</p>
<p>组件的嵌套也就是这样，很简单的描述完了，但是怎么样去抽离组件，在工作中积累可以复用的组件才是我们真正需要去思考的。</p>
<p>那么先到这，关于组件之间通信的问题，留到以后慢慢了解。</p>
<h2 id="路由嵌套"><a href="#路由嵌套" class="headerlink" title="路由嵌套"></a>路由嵌套</h2><p>还是刚刚的代码与目录结构，我们已经实现了组件之间的嵌套，但是有时并不希望组件直接就加载进来，而是在用户点击后才展现在页面中，这是就需要使用到路由嵌套。</p>
<p>为了偷懒，这里就直接使用<code>hello.vue</code>。实现嵌套路由主要有以下几步：</p>
<p>第一步：制定嵌套路由规则：</p>
<p>看<code>main.js</code>下面这部分的代码：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">router.map(&#123;</div><div class="line">    <span class="string">'/index'</span>:&#123;</div><div class="line">        name:<span class="string">'index'</span>,</div><div class="line">        component:index,</div><div class="line">        <span class="comment">// 在/index下设置一个子路由</span></div><div class="line">        subRoutes:&#123; </div><div class="line">            <span class="comment">// 当匹配到/index/hello时，会在index的&lt;router-view&gt;内渲染</span></div><div class="line">            <span class="string">'/hello'</span>:&#123;</div><div class="line">                name:<span class="string">'hello'</span>,<span class="comment">//可有可无，主要是为了方便使用</span></div><div class="line">                <span class="comment">// 一个hello组件</span></div><div class="line">                component:hello</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>第二步：在组件中添加<code>&lt;router-view&gt;</code></p>
<blockquote>
<p>来自官网的解释：<code>&lt;router-view&gt;</code> 用于渲染匹配的组件，它基于Vue的动态组件系统，所以它继承了一个正常动态组件的很多特性。</p>
</blockquote>
<p>将<code>&lt;router-view&gt;</code>写在<code>app.vue</code>的<code>&lt;template&gt;&lt;/template&gt;</code>标签中。</p>
<p>第三步：写入跳转路径</p>
<p>还是在<code>app.vue</code>中：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-link</span>=<span class="string">"&#123; name: 'index' &#125;"</span>&gt;</span>回去主页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 点击这两个标签就会实现页面内的切换效果 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-link</span>=<span class="string">"&#123; name: 'hello' &#125;"</span>&gt;</span>嵌套的路由<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>，切换到浏览器，点击该<code>嵌套的路由</code>即可让<code>hello.vue</code>中的展现出来，在这里直接使用了<code>v-link</code>来实现跳转（知道为什么要写name了吧。。如果使用path会是这样的<code>{ path: &#39;/index/hello&#39; }</code>- -。 ） ，当然<code>router.go</code>同理。（注意在点击两个不同的文字时，地址栏的变化，以及展现内容的切换）</p>
<p><strong>注意：</strong></p>
<p>在我的源码中是在<code>&lt;style scoped&gt;&lt;/style&gt;</code>标签中定义样式的，请注意<code>scoped</code>的使用，它表示在该<code>style</code>中定义的样式只会在当前的组件中起到效果，而不会去影响全局的css样式。</p>
<p>最简单的理解应该就是：</p>
<p>未写该<code>scoped</code>属性的所有组件中的样式，在经过<code>vue-loader</code>编译之后拥有全局作用域。相当于共用一份<code>css</code>样式表。</p>
<p>而写了该属性的的组件中定义的样式，拥有独立作用域。相当于除去引入了公用的一份<code>css</code>样式表外，但单独拥有一份<code>css</code>的样式表。</p>
<p>好了，先到这。讲的有些凌乱，下次见</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是一系列文章，此系列所有的练习都存在了我的github仓库中&lt;a href=&quot;https://github.com/guowenfh/vue-webpack&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;vue-webpack&lt;/a&gt;，在本人有了新的理解
    
    </summary>
    
      <category term="前端框架" scheme="http://guowenfh.github.io/categories/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="webpack" scheme="http://guowenfh.github.io/tags/webpack/"/>
    
      <category term="vue" scheme="http://guowenfh.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>webpack入坑之旅（五）加载vue单文件组件</title>
    <link href="http://guowenfh.github.io/2016/03/25/vue-webpack-05-vue/"/>
    <id>http://guowenfh.github.io/2016/03/25/vue-webpack-05-vue/</id>
    <published>2016-03-25T03:57:50.000Z</published>
    <updated>2016-09-11T08:24:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>这是一系列文章，此系列所有的练习都存在了我的github仓库中<a href="https://github.com/guowenfh/vue-webpack" target="_blank" rel="external">vue-webpack</a>，在本人有了新的理解与认识之后,会对文章有不定时的更正与更新。下面是目前完成的列表：</p>
<ul>
<li><a href="http://guowenfh.github.io/2016/03/24/vue-webpack-01-base/">webpack入坑之旅（一）不是开始的开始</a></li>
<li><a href="http://guowenfh.github.io/2016/03/24/vue-webpack-02-deploy/">webpack入坑之旅（二）loader入门</a></li>
<li><a href="http://guowenfh.github.io/2016/03/24/vue-webpack-03-config/">webpack入坑之旅（三）webpack.config入门</a></li>
<li><a href="http://guowenfh.github.io/2016/03/24/vue-webpack-04-custom/">webpack入坑之旅（四）扬帆起航</a></li>
<li><a href="http://guowenfh.github.io/2016/03/25/vue-webpack-05-vue/">webpack入坑之旅（五）加载vue单文件组件</a> </li>
<li><a href="http://guowenfh.github.io/2016/03/28/vue-webpack-06-router/">webpack入坑之旅（六）配合vue-router实现SPA</a></li>
</ul>
<h2 id="需要什么？"><a href="#需要什么？" class="headerlink" title="需要什么？"></a>需要什么？</h2><p>在经过前面的四个练习，相信已经对于<code>webapck</code>有了一定的了解，现在我们就来一个综合案例，进一步加深对于<code>webpack</code>的理解。</p>
<p>首先我们应该思考要解析<code>.vue</code>类型的文件，需要什么样的东西？应该按照什么样的步骤来？我们应该怎么去搭建这个项目？</p>
<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="第一步：初始化项目目录"><a href="#第一步：初始化项目目录" class="headerlink" title="第一步：初始化项目目录"></a>第一步：初始化项目目录</h3><p>我们需要创建如下目录及文件夹，最终目录结构如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">- dist <span class="comment">//文件生成目录</span></div><div class="line">    -- <span class="comment">//自动生成</span></div><div class="line">- node_module <span class="comment">//自动安装</span></div><div class="line">    -- ...</div><div class="line">- src <span class="comment">//文件入口</span></div><div class="line">    -- components <span class="comment">//组件存放</span></div><div class="line">        -- app.vue <span class="comment">//主.vue</span></div><div class="line">    -- main.js <span class="comment">//主.js</span></div><div class="line">- index.html <span class="comment">//主.html</span></div><div class="line">- package.json <span class="comment">//npm 配置</span></div><div class="line">- webpack.cofig.js <span class="comment">// webpack配置</span></div></pre></td></tr></table></figure>
<h3 id="第二步：安装项目依赖"><a href="#第二步：安装项目依赖" class="headerlink" title="第二步：安装项目依赖"></a>第二步：安装项目依赖</h3><p>如果你上面没有创建<code>package.json</code>文件的话，可以直接使用<code>npm init</code>来初始化我们的<code>package.json</code>文件的配置。</p>
<p>想要去编译其他的文件比如<code>react</code>，<code>coffce</code>等等，就必须要加载很多对应的<code>loader</code>。要想加载一个<code>.vue</code>文件。当然也是同样的道理。<br>建议用<code>npm install xxx-loader --save-dev</code>这样的命令一条一条的敲。在命令行中，会有提示，可以帮助理解<code>webpack</code>的中的依赖管理关系。我的配置清单如下：<br><strong>在实际项目中，json文件中不能出现注释</strong>，在这里为了方便大家了解里面设置项的含义，就直接使用注释的方式加载后面了。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="string">"name"</span>: <span class="string">"05-five-vue"</span>, <span class="comment">//项目名称</span></div><div class="line">    <span class="string">"version"</span>: <span class="string">"1.0.0"</span>, <span class="comment">//版本</span></div><div class="line">    <span class="string">"description"</span>: <span class="string">"vue+webapck"</span>, <span class="comment">//描述</span></div><div class="line">    <span class="string">"main"</span>: <span class="string">"index.js"</span>, <span class="comment">//主文件</span></div><div class="line">    <span class="string">"scripts"</span>: &#123;</div><div class="line">        <span class="string">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span>,</div><div class="line">        <span class="string">"start"</span>: <span class="string">"webpack-dev-server --inline"</span></div><div class="line">    &#125;, <span class="comment">//scripts指定了运行脚本命令的npm命令行缩写，比如这是的start指定了运行npm run start时，所要执行的命令。</span></div><div class="line">    <span class="string">"dependencies"</span>: &#123; <span class="comment">//项目依赖</span></div><div class="line">        <span class="string">"vue"</span>: <span class="string">"^1.0.18"</span></div><div class="line">    &#125;,</div><div class="line">    <span class="string">"devDependencies"</span>: &#123; <span class="comment">//各种各样的loader，用来解析想相应的文件格式。要解析vue并且完成相应的功能，这些基本都是必须的。</span></div><div class="line">        <span class="string">"autoprefixer-loader"</span>: <span class="string">"^2.0.0"</span>,</div><div class="line">        <span class="string">"babel"</span>: <span class="string">"^6.3.13"</span>,</div><div class="line">        <span class="string">"babel-core"</span>: <span class="string">"^6.3.21"</span>,</div><div class="line">        <span class="string">"babel-loader"</span>: <span class="string">"^6.2.0"</span>,</div><div class="line">        <span class="string">"babel-plugin-transform-runtime"</span>: <span class="string">"^6.3.13"</span>,</div><div class="line">        <span class="string">"babel-preset-es2015"</span>: <span class="string">"^6.3.13"</span>,</div><div class="line">        <span class="string">"babel-runtime"</span>: <span class="string">"^5.8.34"</span>,</div><div class="line">        <span class="string">"css-loader"</span>: <span class="string">"^0.16.0"</span>,</div><div class="line">        <span class="string">"file-loader"</span>: <span class="string">"^0.8.5"</span>,</div><div class="line">        <span class="string">"html-loader"</span>: <span class="string">"^0.3.0"</span>,</div><div class="line">        <span class="string">"node-sass"</span>: <span class="string">"^3.4.2"</span>,</div><div class="line">        <span class="string">"sass-loader"</span>: <span class="string">"^3.2.0"</span>,</div><div class="line">        <span class="string">"style-loader"</span>: <span class="string">"^0.12.3"</span>,</div><div class="line">        <span class="string">"url-loader"</span>: <span class="string">"^0.5.6"</span>,</div><div class="line">        <span class="string">"vue-html-loader"</span>: <span class="string">"^1.2.0"</span>,</div><div class="line">        <span class="string">"vue-loader"</span>: <span class="string">"^7.2.0"</span>,</div><div class="line">        <span class="string">"webpack"</span>: <span class="string">"^1.12.0"</span>,</div><div class="line">        <span class="string">"webpack-dev-server"</span>: <span class="string">"^1.14.0"</span></div><div class="line">    &#125;,</div><div class="line">    <span class="string">"author"</span>: <span class="string">"guowenfh"</span>, <span class="comment">//作者</span></div><div class="line">    <span class="string">"license"</span>: <span class="string">"MIT"</span>, <span class="comment">//开源协议</span></div><div class="line">    <span class="string">"keywords"</span>: [ <span class="comment">//关键字</span></div><div class="line">        <span class="string">"vue"</span>,</div><div class="line">        <span class="string">"webpack"</span></div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果你想省事的话，直接复制上面的<code>devDependencies</code>,<code>dependencies</code>字段，并且填写到你的<code>package.json</code>文件中。然后运行<code>npm install</code>就会自动安装所有的模块以及依赖。</p>
<h3 id="第三步：配置webpack"><a href="#第三步：配置webpack" class="headerlink" title="第三步：配置webpack"></a>第三步：配置webpack</h3><p>文件已经设置好了，接下来就到了我们关键的一步，配置<code>webpack.config.js</code>,清单如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line"><span class="comment">// NodeJS中的Path对象，用于处理目录的对象，提高开发效率。</span></div><div class="line"><span class="comment">// 模块导入</span></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">    <span class="comment">// 入口文件地址，不需要写完，会自动查找</span></div><div class="line">    entry: <span class="string">'./src/main'</span>,</div><div class="line">    <span class="comment">// 输出</span></div><div class="line">    output: &#123;</div><div class="line">        path: path.join(__dirname, <span class="string">'./dist'</span>),</div><div class="line">        <span class="comment">// 文件地址，使用绝对路径形式</span></div><div class="line">        filename: <span class="string">'[name].js'</span>,</div><div class="line">        <span class="comment">//[name]这里是webpack提供的根据路口文件自动生成的名字</span></div><div class="line">        publicPath: <span class="string">'/dist/'</span></div><div class="line">        <span class="comment">// 公共文件生成的地址</span></div><div class="line">    &#125;,</div><div class="line">    <span class="comment">// 服务器配置相关，自动刷新!</span></div><div class="line">    devServer: &#123;</div><div class="line">        historyApiFallback: <span class="literal">true</span>,</div><div class="line">        hot: <span class="literal">false</span>,</div><div class="line">        inline: <span class="literal">true</span>,</div><div class="line">        grogress: <span class="literal">true</span>,</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">// 加载器</span></div><div class="line">    <span class="built_in">module</span>: &#123;</div><div class="line">        <span class="comment">// 加载器</span></div><div class="line">        loaders: [</div><div class="line">        <span class="comment">// 解析.vue文件</span></div><div class="line">            &#123; test: <span class="regexp">/\.vue$/</span>, loader: <span class="string">'vue'</span> &#125;,</div><div class="line">        <span class="comment">// 转化ES6的语法</span></div><div class="line">            &#123; test: <span class="regexp">/\.js$/</span>, loader: <span class="string">'babel'</span>, exclude: <span class="regexp">/node_modules/</span> &#125;,</div><div class="line">        <span class="comment">// 编译css并自动添加css前缀</span></div><div class="line">            &#123; test: <span class="regexp">/\.css$/</span>, loader: <span class="string">'style!css!autoprefixer'</span>&#125;,</div><div class="line">        <span class="comment">//.scss 文件想要编译，scss就需要这些东西！来编译处理</span></div><div class="line">        <span class="comment">//install css-loader style-loader sass-loader node-sass --save-dev</span></div><div class="line">            &#123; test: <span class="regexp">/\.scss$/</span>, loader: <span class="string">'style!css!sass?sourceMap'</span>&#125;,</div><div class="line">        <span class="comment">// 图片转化，小于8K自动转化为base64的编码</span></div><div class="line">            &#123; test: <span class="regexp">/\.(png|jpg|gif)$/</span>, loader: <span class="string">'url-loader?limit=8192'</span>&#125;,</div><div class="line">        <span class="comment">//html模板编译？</span></div><div class="line">            &#123; test: <span class="regexp">/\.(html|tpl)$/</span>, loader: <span class="string">'html-loader'</span> &#125;,</div><div class="line">        ]</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">// .vue的配置。需要单独出来配置，其实没什么必要--因为我删了也没保错，不过这里就留这把，因为官网文档里是可以有单独的配置的。</span></div><div class="line">    vue: &#123;</div><div class="line">        loaders: &#123;</div><div class="line">            css: <span class="string">'style!css!autoprefixer'</span>,</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">// 转化成es5的语法</span></div><div class="line">    babel: &#123;</div><div class="line">        presets: [<span class="string">'es2015'</span>],</div><div class="line">        plugins: [<span class="string">'transform-runtime'</span>]</div><div class="line">    &#125;,</div><div class="line">    resolve: &#123;</div><div class="line">        <span class="comment">// require时省略的扩展名，如：require('module') 不需要module.js</span></div><div class="line">        extensions: [<span class="string">''</span>, <span class="string">'.js'</span>, <span class="string">'.vue'</span>],</div><div class="line">        <span class="comment">// 别名，可以直接使用别名来代表设定的路径以及其他</span></div><div class="line">        alias: &#123;</div><div class="line">            filter: path.join(__dirname, <span class="string">'./src/filters'</span>),</div><div class="line">            components: path.join(__dirname, <span class="string">'./src/components'</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">// 开启source-map，webpack有多种source-map，在官网文档可以查到</span></div><div class="line">    devtool: <span class="string">'eval-source-map'</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>请详细查看这里面的设置，我这里都是很简单的配置，在你的项目中，还可以更进一步的对于入口文件和输出文件进行更加深入的定制。（注意：好像<code>node-sass</code>的包有问题，有很多人解析不了<code>sass</code>）</p>
<p>并且在这里生成的css文件还会插到js中，有时我们需要更进一步的把它独立出来，然后在html中引入这时就会用到<code>webpack</code>的插件，在这里先不说（因为我暂时没用到，没有试验过，好像也不麻烦，可以的话下篇再试试）</p>
<h3 id="第四步：编写代码"><a href="#第四步：编写代码" class="headerlink" title="第四步：编写代码"></a>第四步：编写代码</h3><p>接下来就是我们要展示的文件的编写了，我直接把代码贴上来了。</p>
<p>index.html：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>webpack vue<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">        <span class="selector-id">#app</span> &#123;</div><div class="line">            <span class="attribute">margin</span>: <span class="number">20px</span> auto;</div><div class="line">            <span class="attribute">width</span>: <span class="number">800px</span>;</div><div class="line">            <span class="attribute">height</span>: <span class="number">600px</span>;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"dist/main.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这里是main.js的内容：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//es6语法：</span></div><div class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">"../node_modules/vue/dist/vue.min.js"</span>;<span class="comment">//其实不用写完，会自动查找。可以直接写import Vue from "vue";</span></div><div class="line"><span class="comment">//外部引入别的库都可以用这样的方式，比如jquery等。。</span></div><div class="line"><span class="comment">//引入我们编写的测试用vue文件。</span></div><div class="line"><span class="keyword">import</span> app <span class="keyword">from</span> <span class="string">'./components/app'</span>;</div><div class="line"></div><div class="line">Vue.config.debug = <span class="literal">true</span>;<span class="comment">//开启错误提示</span></div><div class="line"></div><div class="line"><span class="keyword">new</span> Vue(app);</div></pre></td></tr></table></figure>
<p>这里是app.vue：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="comment">//es6</span></div><div class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">        el:<span class="string">"#app"</span>,</div><div class="line">         <span class="comment">//data:function()&#123;&#125;，下面是es6写法</span></div><div class="line">         data () &#123;</div><div class="line">            <span class="keyword">return</span> &#123;</div><div class="line">                name:<span class="string">"guowenfh"</span>,</div><div class="line">                age:<span class="string">"2q1"</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>姓名：&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;age&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"sass"</span>&gt;</span><span class="undefined"></span></div><div class="line">    /*一定要加lang不然无法编译*/</div><div class="line">    /*测试一下对sass的编译*/</div><div class="line">    $qwe:#098;</div><div class="line">    body&#123;</div><div class="line">        background-color: $qwe;</div><div class="line">        h1&#123;</div><div class="line">            background-color: #eee;</div><div class="line">            color: red;</div><div class="line">            transform: translate(10%, 10%);/*测试自动添加前缀*/</div><div class="line">        &#125;</div><div class="line">        h1:hover&#123;</div><div class="line">            height:100px;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        h2&#123;</div><div class="line">            background-color: #999;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="第五步：修改自动刷新设置"><a href="#第五步：修改自动刷新设置" class="headerlink" title="第五步：修改自动刷新设置"></a>第五步：修改自动刷新设置</h3><p>下面再单独的再谈一下关于自动刷新的实现，首先需要说明，在上一篇博客中的自动刷新实现，是有问题的。只能改变css样式，使颜色进行变化。对于html里面的内容改变时，浏览器并不会自动刷新。</p>
<p><strong>注意点一：</strong><br>首先我们看到<code>package.json</code>中<code>scripts</code>字段中的<code>&quot;start&quot;: &quot;webpack-dev-server --inline&quot;</code>。这里如果按照网上的方法在后面再添加上<code>--hot</code>的话，只会对于<code>app.vue</code>中的<code>&lt;style&gt;</code>标签内的css起效果。</p>
<p><strong>注意点二：</strong><br>因为我们没有加<code>--hot</code>，所以在<code>webpack.cofig.js</code>中需要对于<code>devServer</code>进行一些配置，如下：（主要是是<code>hot</code>设置为了false）。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">devServer: &#123;</div><div class="line">    historyApiFallback: <span class="literal">true</span>,</div><div class="line">    hot: <span class="literal">false</span>,</div><div class="line">    inline: <span class="literal">true</span>,</div><div class="line">    grogress: <span class="literal">true</span>,</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样设置了之后按下保存相当于按下了F5浏览器整个刷新。而不是局部刷新。（如果你实现了局部刷新，并且没有其他问题，那请教教我^_^）</p>
<p><strong>注意点三：</strong></p>
<p>注意<code>package.json</code>的loader安装中的<code>&quot;vue-hot-reload-api&quot;: &quot;^1.2.2&quot;</code>。它有可能是导致你不能自动刷新的凶手(我现在都没搞明白到底该安装，还是取消)</p>
<h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>步骤都走完了，因为在上面的<code>package.json</code>中已经进行了<code>scripts</code>项的配置。运行<code>npm start</code>，打开<code>localhost:8080</code></p>
<p>可以看到设置的背景色已经出来了,去改变一下背景颜色？data？template？ </p>
<p>看看浏览器会不会自动刷新？</p>
<hr>
<p>如果你按照我的步骤，并且，npm包安装没有错误的话，应该就能成功了。</p>
<p>不行的话，请再仔细对照去看看有什么地方没有编写对吧！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是一系列文章，此系列所有的练习都存在了我的github仓库中&lt;a href=&quot;https://github.com/guowenfh/vue-webpack&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;vue-webpack&lt;/a&gt;，在本人有了新的理解
    
    </summary>
    
      <category term="前端框架" scheme="http://guowenfh.github.io/categories/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="webpack" scheme="http://guowenfh.github.io/tags/webpack/"/>
    
      <category term="vue" scheme="http://guowenfh.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>webpack入坑之旅（四）扬帆起航</title>
    <link href="http://guowenfh.github.io/2016/03/24/vue-webpack-04-custom/"/>
    <id>http://guowenfh.github.io/2016/03/24/vue-webpack-04-custom/</id>
    <published>2016-03-24T09:28:34.000Z</published>
    <updated>2016-09-11T08:24:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>这是一系列文章，此系列所有的练习都存在了我的github仓库中<a href="https://github.com/guowenfh/vue-webpack" target="_blank" rel="external">vue-webpack</a>，在本人有了新的理解与认识之后,会对文章有不定时的更正与更新。下面是目前完成的列表：</p>
<ul>
<li><a href="http://guowenfh.github.io/2016/03/24/vue-webpack-01-base/">webpack入坑之旅（一）不是开始的开始</a></li>
<li><a href="http://guowenfh.github.io/2016/03/24/vue-webpack-02-deploy/">webpack入坑之旅（二）loader入门</a></li>
<li><a href="http://guowenfh.github.io/2016/03/24/vue-webpack-03-config/">webpack入坑之旅（三）webpack.config入门</a></li>
<li><a href="http://guowenfh.github.io/2016/03/24/vue-webpack-04-custom/">webpack入坑之旅（四）扬帆起航</a></li>
<li><a href="http://guowenfh.github.io/2016/03/25/vue-webpack-05-vue/">webpack入坑之旅（五）加载vue单文件组件</a> </li>
<li><a href="http://guowenfh.github.io/2016/03/28/vue-webpack-06-router/">webpack入坑之旅（六）配合vue-router实现SPA</a></li>
</ul>
<h2 id="加载图片"><a href="#加载图片" class="headerlink" title="加载图片"></a>加载图片</h2><p>现在来我们来试试加载图片，首先第一件事情，肯定是安装对应的<code>loader</code>。它会将样式中引用到的图片转为模块来处理，使用该加载器需要先进行安装：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install url-loader --save-dev</div></pre></td></tr></table></figure>
<p>当然你也可以在<code>package.json</code>添加依赖，然后再<code>npm nstall</code>一样的效果。</p>
<p>现在去我们的项目目录中添加img文件夹，添加两张图片，一张大图jpg，一张小图png。</p>
<p>然后在我们的<code>webpack.config.js</code>中添加这段：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">loaders: [</div><div class="line">    &#123; test: <span class="regexp">/\.css$/</span>, loader: <span class="string">"style!css"</span> &#125;,</div><div class="line">    &#123; test: <span class="regexp">/\.(png|jpg)$/</span>, loader: <span class="string">"url-loader?limit=8192"</span> &#125;   <span class="comment">// 添加到这！并且会按照文件大小, 或者转化为 base64, 或者单独作为文件</span></div><div class="line">    <span class="comment">//在大小限制后可以加上&amp;name=./[name].[ext]，会将我们的文件生成在设定的文件夹下。</span></div><div class="line">]</div></pre></td></tr></table></figure>
<p>在html中添加：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/logo.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"qwe"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"asd"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>在我们的css中添加：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*记得写宽高。。*/</span></div><div class="line"><span class="selector-id">#qwe</span>&#123;</div><div class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(img/logo.png);<span class="comment">/*3.2k*/</span></div><div class="line">&#125;</div><div class="line"><span class="selector-id">#asd</span>&#123;</div><div class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(img/5.jpg);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>继续运行<code>webpack</code>如果正确的话，打开我们的浏览器，就可以看到我们正确的图片显示。</p>
<p>如果不正确，请运行<code>npm install file-loader -D</code>，再进行尝试。</p>
<p>现在我们打开浏览器的调试工具，可以看到小于8K的 <strong>背景图片</strong> 图片已经被转化成了base64的编码，而大于8k的图片则并没有转化（<strong>注意它的地址的变化！</strong>）。<br>直接使用img导入的图也并没有进行base64的转化。</p>
<h3 id="热加载"><a href="#热加载" class="headerlink" title="热加载"></a>热加载</h3><p>当项目逐渐变大，<code>webpack</code>的编译时间会变长，可以通过参数让编译的输出内容带有 <strong>进度</strong> 和 <strong>颜色</strong> 。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack --progress --colors</div></pre></td></tr></table></figure>
<p>下面还有一些其他常用的命令：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">webpack <span class="comment">#最基本的启动webpack命令</span></div><div class="line">webpack -w <span class="comment">#提供watch方法，实时进行打包更新</span></div><div class="line">webpack -p <span class="comment">#对打包后的文件进行压缩</span></div><div class="line">webpack <span class="_">-d</span> <span class="comment">#提供SourceMaps，方便调试</span></div><div class="line">webpack --colors <span class="comment">#输出结果带彩色，比如：会用红色显示耗时较长的步骤</span></div><div class="line">webpack --profile <span class="comment">#输出性能数据，可以看到每一步的耗时</span></div><div class="line">webpack --display-modules <span class="comment">#默认情况下 node_modules 下的模块会被隐藏，加上这个参数可以显示这些被隐藏的模块</span></div></pre></td></tr></table></figure>
<p>我们已经把webpack的内容了解了一部分了，那么在生产环境中，我不想每一次进行改变，都去命令行中运行我们的<code>webpack</code>的命令，我们应该怎么样实现改变后自动更新呢？</p>
<p>webpack 为我们提供了一个<code>webpack --watch</code>，他会启动监听模式。开启监听模式后，没有变化的模块会在编译后缓存到内存中，而不会每次都被重新编译，所以监听模式的整体速度是很快的。</p>
<p>去运行这个命令试试吧！！</p>
<p>在我们改变代码之后，命令行中可以看到直接就自动编译了，但是显然不够智能，还需要我们手动去刷新浏览器，（其实用<code>liveload</code>hack成自动刷新！）。</p>
<p>我反正不能忍，还要手动刷新浏览器。所以使用<code>webpack-dev-server</code>会是一个更好的办法！</p>
<p>它将在<code>localhost:8080</code>启动一个express静态资源web服务器，并且会以监听模式自动运行<code>webpack</code>，在浏览器打开<code>http://localhost:8080/</code>或 <code>http://localhost:8080/webpack-dev-server/</code> 可以浏览项目中的页面和编译后的资源输出，并且通过一个<code>socket.io</code>服务实时监听它们的变化并自动刷新页面。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 安装</span></div><div class="line">npm install webpack-dev-server -g</div><div class="line"></div><div class="line"><span class="comment"># 运行</span></div><div class="line">webpack-dev-server</div></pre></td></tr></table></figure>
<p>我们来试试使用vue能配合webpack能不能实现自动刷新。(有关vuejs的知识，大家可以可以先自行上<a href="http://cn.vuejs.org/guide/" target="_blank" rel="external">官网查看</a>，我在接下来可能也会一步一步的把vue的例子全部敲一遍，再放到github上来让点评)</p>
<p>首先运行<code>npm install vue -save</code>将vue添加到我们的项目依赖中去。</p>
<p>首先在我们的<code>entry.js</code>这个入口文件中进行添加：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// import Vue form ("vue") //如果你安装了babel-loader的话，可以直接使用ES6的语法</span></div><div class="line"><span class="keyword">var</span> Vue =<span class="built_in">require</span>(<span class="string">"vue"</span>);</div><div class="line">    <span class="keyword">new</span> Vue(&#123;</div><div class="line">        el: <span class="string">"body"</span>,</div><div class="line">        data: &#123;</div><div class="line">            message: <span class="string">"hello vue.js"</span></div><div class="line">        &#125;</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<p>同样在<code>index.html</code>中添加<code></code>来响应vue的数据绑定。</p>
<p>运行<code>webpack-dev-server</code>。去浏览器查看试试效果吧！任意改变<code>message</code>中的值，可以看到浏览器会自动刷新。并且将改变的值展示在眼前。（有可能只在<code>http://localhost:8080/webpack-dev-server/</code>才会自动刷新）</p>
<p><strong>这里其实并没有完全对，不够全面，可能只能响应css的改变。将在下一篇继续调整该配置</strong></p>
<p>自动刷新都配好了。下面我们就来试试怎么加载vue的文件，来实现单文件组件！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是一系列文章，此系列所有的练习都存在了我的github仓库中&lt;a href=&quot;https://github.com/guowenfh/vue-webpack&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;vue-webpack&lt;/a&gt;，在本人有了新的理解
    
    </summary>
    
      <category term="前端框架" scheme="http://guowenfh.github.io/categories/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="webpack" scheme="http://guowenfh.github.io/tags/webpack/"/>
    
      <category term="vue" scheme="http://guowenfh.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>webpack入坑之旅（三）webpack.config入门</title>
    <link href="http://guowenfh.github.io/2016/03/24/vue-webpack-03-config/"/>
    <id>http://guowenfh.github.io/2016/03/24/vue-webpack-03-config/</id>
    <published>2016-03-24T09:28:14.000Z</published>
    <updated>2016-09-11T08:24:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>这是一系列文章，此系列所有的练习都存在了我的github仓库中<a href="https://github.com/guowenfh/vue-webpack" target="_blank" rel="external">vue-webpack</a>，在本人有了新的理解与认识之后,会对文章有不定时的更正与更新。下面是目前完成的列表：</p>
<ul>
<li><a href="http://guowenfh.github.io/2016/03/24/vue-webpack-01-base/">webpack入坑之旅（一）不是开始的开始</a></li>
<li><a href="http://guowenfh.github.io/2016/03/24/vue-webpack-02-deploy/">webpack入坑之旅（二）loader入门</a></li>
<li><a href="http://guowenfh.github.io/2016/03/24/vue-webpack-03-config/">webpack入坑之旅（三）webpack.config入门</a></li>
<li><a href="http://guowenfh.github.io/2016/03/24/vue-webpack-04-custom/">webpack入坑之旅（四）扬帆起航</a></li>
<li><a href="http://guowenfh.github.io/2016/03/25/vue-webpack-05-vue/">webpack入坑之旅（五）加载vue单文件组件</a> </li>
<li><a href="http://guowenfh.github.io/2016/03/28/vue-webpack-06-router/">webpack入坑之旅（六）配合vue-router实现SPA</a></li>
</ul>
<p>在上面我们已经尝试过了两种对于loader的使用方式，无论是在<code>require</code>的时候编写我们<code>loader</code>的前缀，还是在我们的命令行中进根据扩展名来自动绑定我们的<code>loader</code>，显然都不够自动化，在需要编译的语言继续增加的情况下，显然会是一个噩梦。<br>所以webapck实际上为我们提供了一个简单的方法，下面就一起来看看。</p>
<h2 id="了解webpack配置"><a href="#了解webpack配置" class="headerlink" title="了解webpack配置"></a>了解webpack配置</h2><p>Webpack在执行的时候，除了在命令行传入参数，还可以通过指定的配置文件来执行。默认情况下，会搜索当前目录的<code>webpack.config.js</code>文件，这个文件是一个 <code>node.js</code> 模块，返回一个 <code>json</code> 格式的配置信息对象，或者通过 <code>--config</code> 选项来指定配置文件。</p>
<p>所以现在我们就来新建一个<code>webpack.config.js</code>，在里面填写进下面的内容：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Webpack = <span class="built_in">require</span>(<span class="string">"webpack"</span>);</div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">    entry: [<span class="string">"./entry.js"</span>],</div><div class="line">    output: &#123;</div><div class="line">        path: __dirname,</div><div class="line">        filename: <span class="string">"bundle.js"</span></div><div class="line">    &#125;,</div><div class="line">    <span class="built_in">module</span>: &#123;</div><div class="line">        loaders: [&#123;</div><div class="line">            test: <span class="regexp">/\.css$/</span>,</div><div class="line">            loader: <span class="string">"style!css"</span></div><div class="line">        &#125;]</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们现在仅仅需要运行:<code>webpack</code>，如果你的配置没有问题的话，可以在命令行中看到正确的输出，因为这个命令会自动在当前目录中查找<code>webpack.config.js</code>的配置文件，并按照里面定义的规则来进行执行。</p>
<p>去修改我们的css文件吧，感受一下它的便利。</p>
<p>上面我们仅仅是使用了这个配置文件，我们肯定想在实际的工作环境中，自我对于项目进行针对性的配置。下面我们就先来简单的了解一下里面参数的意义：</p>
<ul>
<li><code>entry</code>：指入口文件的配置项，它是一个数组的原因是webpack允许多个入口点。 当然如果你只有一个入口的话，也可以直接使用双引号<code>&quot;./entry.js&quot;</code></li>
<li><code>output</code>：配置打包结果，<code>path</code>定义了输出的文件夹，filename则定义了打包结果文件的名称</li>
<li><code>module</code>：定义了对模块的处理逻辑，这里可以用<code>loaders</code>定义了一系列的加载器，以及一些正则。当需要加载的文件匹配test的正则时，就会调用后面的<code>loader</code>对文件进行处理，这正是<code>webpack</code>强大的原因。</li>
</ul>
<p>在这里仅仅能做一些很简单的介绍，如果想要真正做到在项目中的实际应用，还需要大量的练习与尝试。在此暂时不做过多的探究。等真正用到了再记录下来。</p>
<h3 id="了解webpack插件"><a href="#了解webpack插件" class="headerlink" title="了解webpack插件"></a>了解webpack插件</h3><p>下面就来看看<code>webpack</code>中的插件：</p>
<p>插件可以完成更多loader不能完成的功能。插件的使用一般是在<code>webpack.config.js</code>中的<code>plugins</code> 选项中指定。</p>
<p><code>Webpack</code>本身内置了一些常用的插件，还可以通过npm安装第三方插件。</p>
<p>接下来，我们从一个最简单的，用来给输出的文件头部添加注释信息<code>BannerPlugin</code>的内置插件来实践插件的配置和运行。</p>
<p>修改<code>webpack.config.js，</code>添加 plugins配置项：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Webpack = <span class="built_in">require</span>(<span class="string">"webpack"</span>);<span class="comment">//必须引入</span></div><div class="line"><span class="built_in">module</span>:&#123;</div><div class="line">&#125;,</div><div class="line">plugins: [</div><div class="line">    <span class="keyword">new</span> Webpack.BannerPlugin(<span class="string">"这里是打包文件头部注释！"</span>)<span class="comment">//注意这是一个数组..</span></div><div class="line">]</div></pre></td></tr></table></figure>
<p>运行正确的话应该是这样的，打开<code>bundle.js</code>，会发现在文件头部已经有了我们添加的注释：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*! 这里是打包文件头部注释 */</span></div><div class="line"><span class="comment">/******/</span> (<span class="function"><span class="keyword">function</span>(<span class="params">modules</span>) </span>&#123; <span class="comment">// webpackBootstrap</span></div><div class="line"><span class="comment">/******/</span>    <span class="comment">// The module cache</span></div><div class="line"><span class="comment">/******/</span>    <span class="keyword">var</span> installedModules = &#123;&#125;;</div><div class="line">        <span class="comment">/***  省略 ***/</span></div><div class="line">        &#125;)</div></pre></td></tr></table></figure>
<p>最简单的插件使用方式就是这样的了，就如上面一样的，平淡无奇。</p>
<p>如果看到了这里，相信你对于<code>webpack</code>的最基本的了解应该就差不多了，下面正式进入实战的阶段，来看看我们的一些<code>loader</code>到底是怎么样使用的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是一系列文章，此系列所有的练习都存在了我的github仓库中&lt;a href=&quot;https://github.com/guowenfh/vue-webpack&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;vue-webpack&lt;/a&gt;，在本人有了新的理解
    
    </summary>
    
      <category term="前端框架" scheme="http://guowenfh.github.io/categories/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="webpack" scheme="http://guowenfh.github.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>webpack入坑之旅（二）loader入门</title>
    <link href="http://guowenfh.github.io/2016/03/24/vue-webpack-02-deploy/"/>
    <id>http://guowenfh.github.io/2016/03/24/vue-webpack-02-deploy/</id>
    <published>2016-03-24T09:28:00.000Z</published>
    <updated>2016-09-11T08:24:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>这是一系列文章，此系列所有的练习都存在了我的github仓库中<a href="https://github.com/guowenfh/vue-webpack" target="_blank" rel="external">vue-webpack</a> 在本人有了新的理解与认识之后,会对文章有不定时的更正与更新。下面是目前完成的列表：</p>
<ul>
<li><a href="http://guowenfh.github.io/2016/03/24/vue-webpack-01-base/">webpack入坑之旅（一）不是开始的开始</a></li>
<li><a href="http://guowenfh.github.io/2016/03/24/vue-webpack-02-deploy/">webpack入坑之旅（二）loader入门</a></li>
<li><a href="http://guowenfh.github.io/2016/03/24/vue-webpack-03-config/">webpack入坑之旅（三）webpack.config入门</a></li>
<li><a href="http://guowenfh.github.io/2016/03/24/vue-webpack-04-custom/">webpack入坑之旅（四）扬帆起航</a></li>
<li><a href="http://guowenfh.github.io/2016/03/25/vue-webpack-05-vue/">webpack入坑之旅（五）加载vue单文件组件</a> </li>
<li><a href="http://guowenfh.github.io/2016/03/28/vue-webpack-06-router/">webpack入坑之旅（六）配合vue-router实现SPA</a></li>
</ul>
<h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2><p>在上一篇博客中我们已经成功的把简单的事情变得复杂了，把我们的只有几行代码的两个文件<code>first.js</code>、<code>entry.js</code>使用webpack进行文件打包生成了<code>bundle.js</code>。</p>
<p><code>Webpack</code> 能做的就是这样，只能处理 JavaScript 模块。</p>
<p>当然它如果能做的仅仅是这样，那它也就不可能这么火了=_=。所以它可以通过引入其他的<code>loader</code>，进而可以处理其它类型的文件。</p>
<h2 id="loader介绍"><a href="#loader介绍" class="headerlink" title="loader介绍"></a>loader介绍</h2><p><code>Loader</code>可以理解为是模块和资源的转换器，它本身是一个函数，接受源文件作为参数，返回转换的结果。这样，我们就可以通过require来加载任何类型的模块或文件，比如<code>VUE</code>、<code>JSX</code>、<code>SASS</code> 或图片。</p>
<p>先来看看 loader 有哪些特性？(网上复制的，不喜欢可以跳过。<a href="http://www.hubwiz.com/class/5670d0a77e7d40946afc5e65" target="_blank" rel="external">地址</a>)</p>
<ul>
<li><code>Loader</code>可以通过管道方式链式调用，每个<code>loader</code>可以把资源转换成任意格式并传递给下一个<code>loader</code>，但是最后一个<code>loader</code>必须返回JavaScript。</li>
<li><code>Loader</code>可以同步或异步执行。</li>
<li><code>Loader</code>运行在node.js环境中，所以可以做任何可能的事情。</li>
<li><code>Loader</code>可以接受参数，以此来传递配置项给<code>loader</code>。</li>
<li><code>Loader</code>可以通过文件扩展名（或正则表达式）绑定给不同类型的文件。</li>
<li><code>Loader</code>可以通过npm发布和安装。</li>
<li>除了通过<code>package.json</code>的<code>main</code>指定，通常的模块也可以导出一个<code>loader</code>来使用。</li>
<li><code>Loader</code>可以访问配置。</li>
<li>插件可以让<code>loader</code>拥有更多特性。</li>
<li><code>Loader</code>可以分发出附加的任意文件。</li>
</ul>
<h2 id="loader使用"><a href="#loader使用" class="headerlink" title="loader使用"></a>loader使用</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>根据上面说的<code>loader</code>的知识，就这样编译是肯定不行的，所以我们安装用来读取css文件的<code>css-loader</code>，再用 <code>style-loader</code> 把它插入到页面中。</p>
<p>在命令行中输入：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install css-loader style-loader --save-dev</div></pre></td></tr></table></figure></p>
<p>在<code>package.json</code>中，主要是<code>devDependencies</code>这个字段有了改变：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">"devDependencies": &#123;</div><div class="line">    "css-loader": "^0.23.1",</div><div class="line">    "style-loader": "^0.13.0",</div><div class="line">    "webpack": "^1.12.2"</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当然你可以用一个更加方便的方式进行安装，可以直接在<code>package.json</code>中，添加相应的依赖（如上面的代码），之后的命令行中运行<code>npm intall</code>，它会自动帮我们安装相应的依赖。</p>
<p>安装完毕。</p>
<h3 id="加载-CSS-文件"><a href="#加载-CSS-文件" class="headerlink" title="加载 CSS 文件"></a>加载 CSS 文件</h3><p>还是上一篇博客中的文件，来添加一个css文件。<code>style.css</code>,在里面添加</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">    <span class="attribute">background</span>: red;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>修改我们的<code>entry.js</code>，原文件不变，添加<code>require(&quot;!style!css!./style.css&quot;);</code>,用来引入我们的css文件。</p>
<p>我们继续编译:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack entry.js bundle.js</div></pre></td></tr></table></figure>
<p>完成后，刷新我们的页面，背景颜色是不是已经变成了红色了呢？</p>
<h3 id="扩展名自动绑定loader"><a href="#扩展名自动绑定loader" class="headerlink" title="扩展名自动绑定loader"></a>扩展名自动绑定loader</h3><p>这就是我们的<code>loader</code>的使用方式了。如果每次 <code>require</code> CSS 文件的时候都要写 <code>loader</code> 前缀<code>!style!css!</code>这样的东西，显然是一件很麻烦的事情。我们需要它可以根据模块类型（扩展名）来自动绑定需要的 <code>loader</code>。</p>
<p>来看看更简便的方式，将 <code>entry.js</code> 中的 <code>require(&quot;!style!css!./style.css&quot;)</code>修改为<code>require(&quot;./style.css&quot;)</code>，可以改变一个背景颜色让你更明显的查看到变化！然后执行：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack entry.js bundle.js --module-bind <span class="string">"css=style!css"</span></div></pre></td></tr></table></figure>
<p>。。</p>
<p>。。。</p>
<p>没成功对吧!<br>因为<code>!</code>在命令行中具有特殊的含义，所以我们需要对它进行转义操作。再来试试：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack ./entry.js bundle.js --module-bind <span class="string">"css=style\!css"</span></div></pre></td></tr></table></figure>
<p>成功的话，应该能再次看到背景的变化。</p>
<p>虽然这样可以将多个css文件进行编译打包，但是总感觉很是繁琐，我不想每次都运行那么一长串的命令怎么办？继续向下走吧。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是一系列文章，此系列所有的练习都存在了我的github仓库中&lt;a href=&quot;https://github.com/guowenfh/vue-webpack&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;vue-webpack&lt;/a&gt; 在本人有了新的理解
    
    </summary>
    
      <category term="前端框架" scheme="http://guowenfh.github.io/categories/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="webpack" scheme="http://guowenfh.github.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>webpack入坑之旅（一）不是开始的开始</title>
    <link href="http://guowenfh.github.io/2016/03/24/vue-webpack-01-base/"/>
    <id>http://guowenfh.github.io/2016/03/24/vue-webpack-01-base/</id>
    <published>2016-03-24T09:05:58.000Z</published>
    <updated>2016-09-11T08:24:40.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>最近学习框架，选择了vue，然后接触到了vue中的单文件组件，官方推荐使用 Webpack + vue-loader构建这些单文件 Vue 组件，于是就开始了webpack的入坑之旅。<br>因为原来没有用过任何的构建工具与模块化工具，所以本系列会十分的基础。并且可能有很多不正确的地方，希望大家谅解，并指出错误帮助改进。谢谢！</p>
</blockquote>
<p>这是一系列文章，此系列所有的练习都存在了我的github仓库中<a href="https://github.com/guowenfh/vue-webpack" target="_blank" rel="external">vue-webpack</a>，在本人有了新的理解与认识之后,会对文章有不定时的更正与更新。下面是目前完成的列表：</p>
<ul>
<li><a href="http://guowenfh.github.io/2016/03/24/vue-webpack-01-base/">webpack入坑之旅（一）不是开始的开始</a></li>
<li><a href="http://guowenfh.github.io/2016/03/24/vue-webpack-02-deploy/">webpack入坑之旅（二）loader入门</a></li>
<li><a href="http://guowenfh.github.io/2016/03/24/vue-webpack-03-config/">webpack入坑之旅（三）webpack.config入门</a></li>
<li><a href="http://guowenfh.github.io/2016/03/24/vue-webpack-04-custom/">webpack入坑之旅（四）扬帆起航</a></li>
<li><a href="http://guowenfh.github.io/2016/03/25/vue-webpack-05-vue/">webpack入坑之旅（五）加载vue单文件组件</a> </li>
<li><a href="http://guowenfh.github.io/2016/03/28/vue-webpack-06-router/">webpack入坑之旅（六）配合vue-router实现SPA</a></li>
</ul>
<h2 id="什么是webpack"><a href="#什么是webpack" class="headerlink" title="什么是webpack"></a>什么是webpack</h2><blockquote>
<p>其实不是特别想写这个东西，但貌似所有的教程都有这个。随便写两句吧。可以直接跳过。 </p>
</blockquote>
<p>Webpack 是德国开发者 Tobias Koppers 开发的模块加载器兼打包工具，在webpack中，它能把各种资源，例如JS（含JSX）、coffee、样式（含less/sass）、图片等都作为模块来使用和处理。因此, Webpack 当中 js 可以引用 css, css 中可以嵌入图片 dataUrl。<br>对应各种不同文件类型的资源, Webpack 有对应的模块 loader比如vue用的是<code>vue-loader</code>当然这是后话，在后面我们再来说。</p>
<p>请看下图：<br><img src="/images/vue-webpack/00-webpack-base.png" alt="webpack"></p>
<p>官网查看：<a href="https://github.com/webpack/webpack" target="_blank" rel="external">https://github.com/webpack/webpack</a></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>前提：因为webpack是一个基于node的项目，所以首先需要确保你的电脑里面已经安装了<code>node.js</code>，以及<code>npm</code>。在这里我使用的版本是：<code>node：v5.8.0  ，npm：3.7.3</code>,若是版本问题，请更新到最新版。<br>若是有出现npm安装过慢的情况，可以使用<a href="https://github.com/Pana/nrm" target="_blank" rel="external">nrm</a>这个项目来进行npm源地址的切换。</p>
<p>首先我们直接进行全局的安装，运行如下命令：<code>npm install webpack -g</code>，可能需要一点时间。</p>
<p>安装成功后，在命令行输入<code>webpack -h</code>即可查看当前安装的版本信息。以及可以使用的指令。   </p>
<p>当然，我们都应该将webapck安装到当前的项目依赖中，此时就可以使用项目的本这样就可以使用项目本地版本的 Webpack。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 确保已经进入项目目录</span></div><div class="line"><span class="comment"># 确定已经有 package.json，没有就通过</span></div><div class="line">npm init </div><div class="line"><span class="comment"># 创建，直接一路回车就好，后面再来详细说里面的内容。</span></div><div class="line"><span class="comment"># 安装 webpack 依赖</span></div><div class="line"></div><div class="line">npm install webpack --save-dev</div><div class="line"><span class="comment"># 简单的写法：-_-,缩写形式 </span></div><div class="line">npm i webpack -D</div><div class="line"><span class="comment"># –save：模块名将被添加到dependencies，可以简化为参数-S。</span></div><div class="line"><span class="comment"># –save-dev: 模块名将被添加到devDependencies，可以简化为参数-D。</span></div></pre></td></tr></table></figure>
<p>安装好之后我们的<code>package.json</code>的目录应该是这样的：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"name"</span>: <span class="string">"first-demo"</span>,</div><div class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</div><div class="line">  <span class="attr">"description"</span>: <span class="string">"this is my first-demo"</span>,</div><div class="line">  <span class="attr">"main"</span>: <span class="string">"index.js"</span>,</div><div class="line">  <span class="attr">"scripts"</span>: &#123;</div><div class="line">    <span class="attr">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"author"</span>: <span class="string">"guowenfh"</span>,</div><div class="line">  <span class="attr">"license"</span>: <span class="string">"MIT"</span>,</div><div class="line">  <span class="attr">"dependencies"</span>: &#123;&#125;,</div><div class="line">  <span class="attr">"devDependencies"</span>: &#123;</div><div class="line">    <span class="attr">"webpack"</span>: <span class="string">"^1.12.14"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>既然环境都已经安装好了，那么我们就开始来用webpack进行我们的第一个打包运行程序吧！</p>
<p>首先创建一个静态页面 <code>index.html</code> 和一个 JS 入口文件 <code>entry.js</code>,（这里你想用什么名字都可以，只需要在打包的时候读取文件为该名字就好，不过，到时候就知道这个名字的含义啦！）：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- index.html --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"bundle.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 注意这里引入的不是我们创建的文件，而是用webpack生成的文件 --&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*** entry.js ***/</span></div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">'app'</span>).innerHTML=<span class="string">"这是我第一个打包成功的程序"</span>;</div></pre></td></tr></table></figure>
<p>文件都已经创建成功了，那么就开始我们的打包吧！</p>
<p><code>webpack entry.js bundle.js</code></p>
<p>在浏览器中打开<code>index.html</code>，就能看到我们设置的文字啦！：<strong>这是我第一个打包成功的程序</strong></p>
<p>这么简单的功能直接在html中引入不就好了吗？确实是这样的，不过我们这才刚刚开始嘛，不要急。</p>
<p>下面我们再来增加一个文件，名为<code>first.js</code>内容如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> h2= <span class="built_in">document</span>.createElement(<span class="string">"h2"</span>)</div><div class="line">h2.innerHTML=<span class="string">"不是吧，那么快第二个打包程序啦！"</span>;</div><div class="line"><span class="built_in">document</span>.body.appendChild(h2);</div></pre></td></tr></table></figure>
<p>更改 <code>entry.js</code>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">'app'</span>).innerHTML=<span class="string">"这是我第一个打包成功的程序"</span>;</div><div class="line"><span class="comment">//添加</span></div><div class="line"><span class="built_in">require</span>(<span class="string">"./first.js"</span>);</div></pre></td></tr></table></figure>
<p>再来进行一次重复的工作，再打包一次。<code>webpack entry.js bundle.js</code>，如果成功，打包过程会显示日志：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Hash: b1cfe7ff9d75ce235dc9</div><div class="line">Version: webpack 1.12.14</div><div class="line">Time: 54ms</div><div class="line">    Asset     Size  Chunks             Chunk Names</div><div class="line">bundle.js  1.82 kB       0  [emitted]  main</div><div class="line">   [0] ./entry.js 208 bytes &#123;0&#125; [built]</div><div class="line">   [1] ./first.js 145 bytes &#123;0&#125; [built]</div></pre></td></tr></table></figure>
<p><code>Webpack</code> 会分析入口文件，<strong>解析包含依赖关系的各个文件</strong>。这些文件（模块）都打包到 <code>bundle.js</code> 。<code>Webpack</code> 会给每个模块分配一个唯一的 <code>id</code> 并通过这个 <code>id</code> 索引和访问模块。在页面启动时，会先执行 <code>entry.js</code> 中的代码，其它模块会在运行 <code>require</code> 的时候再执行。</p>
<p>刷新浏览器，可以发现我们的刚刚的代码已经生效，又有了新的文字出现。</p>
<p>好吧，我知道这么简单的你们不屑于看，等下我们升个级。</p>
<blockquote>
<p>下面是参考文档，也相当于一个汇总吧，有很多我还没实践到，还是可以多看看，好文章应该贴出来</p>
</blockquote>
<ul>
<li><a href="http://www.hubwiz.com/course/5670d0a77e7d40946afc5e65/" target="_blank" rel="external">webpack入门 - 汇智网</a></li>
<li><a href="https://segmentfault.com/a/1190000002552008" target="_blank" rel="external">Webpack 怎么用</a></li>
<li><a href="https://segmentfault.com/a/1190000002551952" target="_blank" rel="external">Webpack 入门指迷</a></li>
<li><a href="https://github.com/vikingmute/webpack-for-fools/blob/master/entries/chapter-1.md" target="_blank" rel="external">Webpack傻瓜式指南（一）</a></li>
<li><a href="https://github.com/vikingmute/webpack-for-fools/blob/master/entries/chapter-2.md" target="_blank" rel="external">Webpack傻瓜式指南（二）</a></li>
<li><a href="http://jiongks.name/blog/just-vue/" target="_blank" rel="external">Vue + webpack 项目实践</a></li>
<li><a href="http://www.w3ctech.com/topic/1557" target="_blank" rel="external">webpack 入门及实践</a></li>
<li><a href="http://javascript.ruanyifeng.com/#nodejs" target="_blank" rel="external">JavaScript 标准参考教程（alpha）–Node.js</a></li>
<li><a href="https://github.com/ruanyf/webpack-demos" target="_blank" rel="external">应该是最好懂的Webpack教程—阮一峰</a> 还没敲呢，应该全部敲一遍的。</li>
<li><a href="http://www.h-simon.com/42/" target="_blank" rel="external">webpack常用配置总结</a></li>
<li><a href="https://segmentfault.com/a/1190000004505747" target="_blank" rel="external">Express结合Webpack的全栈自动刷新</a></li>
<li><a href="http://cn.vuejs.org/guide/" target="_blank" rel="external">Vue.js官方教程</a></li>
<li><a href="http://vuejs.github.io/vue-router/zh-cn/" target="_blank" rel="external">vue-router文档</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;最近学习框架，选择了vue，然后接触到了vue中的单文件组件，官方推荐使用 Webpack + vue-loader构建这些单文件 Vue 组件，于是就开始了webpack的入坑之旅。&lt;br&gt;因为原来没有用过任何的构建工具与模块化工具，所以本系列会
    
    </summary>
    
      <category term="前端框架" scheme="http://guowenfh.github.io/categories/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="webpack" scheme="http://guowenfh.github.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>Bootstrap入门笔记之（六）其它内置组件：进度条、列表组、面板等</title>
    <link href="http://guowenfh.github.io/2016/03/01/Bootstrap-06-other-more/"/>
    <id>http://guowenfh.github.io/2016/03/01/Bootstrap-06-other-more/</id>
    <published>2016-02-29T17:41:42.000Z</published>
    <updated>2016-09-11T08:24:40.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>博客之外</p>
<p>只剩最后一天，二月份就结束了。距离上一篇博客已经有着整整一个月的时间，这一个月的时间，感觉技术上的成长又被搁置了，没有了之前闭关学习的心无旁骛，那段时间成长真的飞快。<br>在家喝酒，玩耍，到现在实习入职了一个星期，整整一个月时间，学习效率都十分的低，也可以说基本没学到什么新东西。今天是2月最后一天，不能再这样下去，好了懊恼的时间，不能太多，应该着眼当下，现在是2016-02-29 21:40，开始把bootstrap入门理论基础部分完结了吧，下一步就该进入一个新的阶段了！我将一直前行，加油！</p>
</blockquote>
<hr>
<h2 id="缩略图"><a href="#缩略图" class="headerlink" title="缩略图"></a>缩略图</h2><p>其实在我们日常使用的网页中，随处都可以看到有缩略图的存在，比如淘宝的商品列表，慕课网上的课程列表等等，Bootstrap自然不会放过那么常见效果，它将这样的效果独立成为了一个模块组件，使用<code>.thumbnail</code>样式类，Boostrap缩略图的默认设计仅需最少的标签就能展示带链接的图片。</p>
<p>我们需要配合Bootstrap的栅格系统来达到一个不错的显示效果。在Bootstrap中文网中，我们可以看到这样的示例代码:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-6 col-md-3"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"thumbnail"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"..."</span> <span class="attr">alt</span>=<span class="string">"..."</span>&gt;</span></div><div class="line">                <span class="comment">&lt;!-- 此处应对图片做一些样式设置height: 180px;width: 100%; display: block;等 --&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        ...</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>我们将上面代码中的列复制3份，改变浏览器的大小，我可以看到因为栅格系统的存在，我们的缩略图已经变成了响应式的。这是栅格系统起到的效果那么<code>.thumbnail</code>又起到了什么效果呢？<br>我们可以看到图片周围有了一圈边框，并且在边框与图片之间有着4px的padding，除此之外bootstrap还人性化的为我们的缩略图效果提供了hover效果。</p>
<p><strong>添加标题、描述内容、按钮</strong></p>
<p>我们当然不可能仅仅只展示一张可点击的图片就完了，我们时常还会配上相关的说明文字以及一些按钮等等。在已有的缩略图的基础上，我们需要使用<code>.caption</code>容器，并且在这个容器中放置其它的内容，来达到统一的显示效果。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 添加到上面代码中的.thumbnail容器内，a标签后 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"caption"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>说明文字<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这里是说明文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-info"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-success"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>看看效果吧：</p>
<p><img src="/images/Bootstrap/06-thumbnail.jpg" alt="缩略图展示"></p>
<h2 id="警示框"><a href="#警示框" class="headerlink" title="警示框"></a>警示框</h2><p>其实在我们的网页中，总是避免不了各种的提示信息，比如我们的登陆界面中，总是避免不了输入错误的情况，就需要使用警示框来提示用户错误信息。Bootstrap为我们提供了一组这样的样式类。</p>
<p>Bootstrap使用<code>.alert</code>来控制警示框的大小边距等样式，然后再用：成功：<code>.alert-success</code>、信息：<code>.alert-info</code>、警告：<code>.alert-warning</code>和错误：<code>.alert-danger</code>、这样的一组样式类,来表示不同的情景颜色。   </p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"alert alert-success"</span> <span class="attr">role</span>=<span class="string">"alert"</span>&gt;</span>恭喜您操作成功！<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- ...等等 --&gt;</span></div></pre></td></tr></table></figure>
<p><img src="/images/Bootstrap/06-alert.jpg" alt="缩略图展示"></p>
<p>关闭</p>
<p>除了展示效果之外，如果你还引入了Bootstrap的js文件。那么我们的还可以为我们的警示框非常简单的创造一些交互效果。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"alert alert-success alert-dismissable"</span>&gt;</span></div><div class="line">    success操作成功</div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"close"</span> <span class="attr">data-dismiss</span>=<span class="string">"alert"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-remove"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>可以看到效果如下：（点击后面的icon便可以关闭该提示信息）</p>
<p><img src="/images/Bootstrap/06-alert-close.jpg" alt="缩略图交互"></p>
<p>那么好的效果，在实现的时候需要注意一些什么呢？主要有三个步骤：</p>
<ol>
<li>在普通的警示框<code>.alert</code>的基础上，添加<code>。alert-dismissable</code>类</li>
<li>在button标签中加入<code>close</code>类，实现警示框<strong>关闭按钮</strong>的样式（我在上面使用了Bootstrap自带的icon图标来实现关闭按钮）</li>
<li>在关闭按钮上添加自定义属性<code>data-dismiss=&quot;alert&quot;</code>（Bootstrap中是通过这样的自定义属性，再使用JS检测来实现关闭效果的）</li>
</ol>
<p><strong>警示框的链接</strong></p>
<p>有时我警示框中除了错误信息之外，还会加入一个链接地址，以便于用户在在新的页面中查找问题去处理他的错误。</p>
<p>Bootstrap仅仅使用了一个<code>.alert-link</code>的类就实现了这样的效果，主要是对于链接样式的<strong>高亮显示</strong>、<strong>加粗</strong>，并且<strong>颜色相应加深</strong>。（除此之外在hover上去后有下划线）</p>
<h2 id="进度条"><a href="#进度条" class="headerlink" title="进度条"></a>进度条</h2><p>Bootstrap框架对于进度条提供了一个基本样式，一个100%宽度的背景色，然后一个子容器高亮，表示完成进度。其实制作这样进度条非常容易，一般使用两个容器，外容器具有一定的宽度，设置一个背景色，他的子元素设置一个宽度（父容器的宽度比例值<code>如60%</code>），同时设置一个高亮的背景色。</p>
<p>Bootstrap也是这样实现的，外层容器使用<code>.progress</code>类，子容器使用<code>.progress-bar</code>类（别忘记设置宽度）如：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"progress"</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"progress-bar"</span> <span class="attr">style</span>=<span class="string">"width:80%"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>同样它也提供了四个不同的情景颜色。<code>.progress-bar-info</code>..等，添加到<strong>子容器</strong>原有的类后即可</p>
<p>除了色彩，还可以使进度条的变为条纹的，只需要将<code>progress-striped</code>添加到原有的<strong>父容器</strong>类后，它同样具有彩色效果。更进一步的是，若在其后再添加一个<code>.active</code>类，可以实现动态的条纹进度条。（必须两个同时使用，使用css3动画实现）我们来试试：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"progress progress-striped active"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"progress-bar progress-bar-danger"</span> <span class="attr">style</span>=<span class="string">"width:80%"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- .... --&gt;</span></div></pre></td></tr></table></figure>
<p><img src="/images/Bootstrap/06-progress-striped.jpg" alt="条纹进度条"></p>
<p>我们还可以在一个进度条内，将不同状态的进度条放置在一起，水平排列，形成叠加进度条，这个就自己试试吧！^_^</p>
<p><strong>带标签的显示条</strong><br>使用很简单，只需要在子容器中添加相应的数字就可以了，不过下面这段代码会有什么效果呢？不妨也自己去试试吧！(在源码中搜索<code>aria-valuenow=&quot;0&quot;</code>可看到原因)</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"progress"</span>&gt;</div><div class="line">    &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"progress-bar"</span> role=<span class="string">"progressbar"</span> aria-valuenow=<span class="string">"0"</span> aria-valuemin=<span class="string">"0"</span> aria-valuemax=<span class="string">"100"</span>&gt;<span class="number">0</span>%&lt;/<span class="keyword">div</span>&gt;</div><div class="line">&lt;/<span class="keyword">div</span>&gt;</div></pre></td></tr></table></figure>
<h2 id="媒体对象"><a href="#媒体对象" class="headerlink" title="媒体对象"></a>媒体对象</h2><p>媒体对象一般包括以下几个部分：</p>
<ol>
<li>媒体对像的容器：常使用<code>.media</code>类名表示，用来容纳媒体对象的所有内容</li>
<li>媒体对像的对象：常使用<code>.media-object</code>表示，就是媒体对象中的对象，常常是图片</li>
<li>媒体对象的主体：常使用<code>.media-body</code>表示，就是媒体对像中的主体内容，可以是任何元素，常常是图片侧边内容</li>
<li>媒体对象的标题：常使用<code>.media-heading</code>表示，就是用来描述对象的一个标题，此部分可选</li>
<li><code>.pull-left</code>或者<code>.pull-right</code>来控制媒体对象中的对象浮动方式。(如图片在左或者在右)</li>
</ol>
<p>那么我们可以看到的结构如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"media"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"pull-left"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"media-object"</span> <span class="attr">src</span>=<span class="string">".."</span> <span class="attr">alt</span>=<span class="string">"..."</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"media-body"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">"media-heading"</span>&gt;</span>Bootstrap<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>默认样式的媒体对象组件允许在一个内容块的左边或右边展示一个多媒体内容（图像、视频、音频）。<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>可以实现最普通的图片在左，标题与介绍文字在右的媒体对象组。</p>
<p>我们在论坛中常常能看到和Bootstrap中文官网媒体对象组模块类似的阶梯状媒体对象，它是怎么实现的呢？<br>其实很简单，我们只需要在上一级的<code>.media-body</code>容器最后添加新的额媒体对象容器<code>.media</code>就可以实现这样的阶梯效果</p>
<p><img src="/images/Bootstrap/06-media.jpg" alt="媒体对象"></p>
<p>除了这样的阶梯形式，我们还可以在论坛评论系统中看到，评论是平铺着下来的，也就是媒体对象列表。</p>
<p>我们只需要将原来的<code>.media</code>放在<code>.media-list</code>容器中就可以实现，不过既然都说了是列表，那我们还是直接使用ul&gt;li的排列方式吧:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"media-list"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"media"</span>&gt;</span>…<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"media"</span>&gt;</span>…<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"media"</span>&gt;</span>…<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Bootstrap同样帮我们清除了，媒体对象列表中的ul&gt;li的默认样式，使展示更急美观</p>
<h2 id="列表组"><a href="#列表组" class="headerlink" title="列表组"></a>列表组</h2><p>列表组是Bootstrap框架新增的一个组件，可以用来制作列表清单、垂直导航等效果，也可以配合其他的组件制作出更漂亮的组件。它主要包括两个部分：</p>
<ol>
<li><code>.list-group</code>：列表组容器，<strong>常用的是ul元素</strong>，当然也可以是ol或者div元素</li>
<li><code>.list-group-item</code>：列表项，<strong>常用的是li元素</strong>，当然也可以是div元素</li>
</ol>
<p>如：</p>
<h3 id="带徽章的列表组"><a href="#带徽章的列表组" class="headerlink" title="带徽章的列表组"></a>带徽章的列表组</h3><p>带徽章的列表组其实就是将Bootstrap框架中的徽章组件和基础列表组结合在一起的一个效果。具体做法很简单，只需要在<code>.list-group-item</code>中添加徽章组件<code>.badge</code>：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"list-group"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"list-group-item"</span>&gt;</span>玩转Bootstrap  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"badge"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"list-group-item"</span>&gt;</span>基础Bootstrap的网页开发  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"badge"</span>&gt;</span>12<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure>
<p>可以实现笑效果如下：</p>
<p><img src="/images/Bootstrap/06-list-badge.jpg" alt="带徽章的列表"></p>
<p>如果在列表组中，我们希望列表项是链接的话，Bootstrap为我们提供了两种方案：</p>
<ol>
<li>直接将链接置于li<code>.list-group-item</code>容器内，它会有链接下划线的存在</li>
<li>将ul.list-group&gt;li.list-group-item的结构换成div.list-group&gt;a.list-group-item，此时与默认的列表组显示无异(emmet会吧？那就能理解我的代码的意思…)</li>
</ol>
<h3 id="自定义列表组"><a href="#自定义列表组" class="headerlink" title="自定义列表组"></a>自定义列表组</h3><p>除了上面默认的列表组之外，为了更清晰的展示内容，Bootstrap实现了自定义列表组，主要是新增了两个类：</p>
<ol>
<li><code>.list-group-item-heading</code>：用来定义列表项头部样式</li>
<li><code>.list-group-item-text</code>：用来定义列表项主要内容</li>
</ol>
<p>结构如下编写：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list-group"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"##"</span> <span class="attr">class</span>=<span class="string">"list-group-item"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">"list-group-item-heading"</span>&gt;</span>图解CSS3<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"list-group-item-text"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"##"</span> <span class="attr">class</span>=<span class="string">"list-group-item"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">"list-group-item-heading"</span>&gt;</span>Sass中国<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"list-group-item-text"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="列表项的状态设置"><a href="#列表项的状态设置" class="headerlink" title="列表项的状态设置"></a>列表项的状态设置</h3><p>和其他的组件一样，列表组也两个状态效果：</p>
<ul>
<li><code>.active</code>：表示当前状态</li>
<li><code>.disabled</code>：表示禁用状态</li>
</ul>
<p>只需要在相应的列表项上添加。<code>class=&quot;list-group-item active&quot;&gt;</code>，主要对于该项的背景颜色进行高亮，以及其中的<strong>徽章</strong>进行了<strong>高亮处理</strong></p>
<p>禁用状态，只是添加了一个灰色的背景色，以及文字的暗色处理</p>
<p>除了上面的两个最常用的状态之外，Bootstrap为我们的列表组也提供了不同的情景颜色，只需要在列表项中添加<code>.list-group-item-danger</code>这一系列的类。</p>
<h2 id="面板"><a href="#面板" class="headerlink" title="面板"></a>面板</h2><p>同样作为一个新增的组件，基础面板非常简单，就是一个div容器运用了<code>.panel</code>样式，产生一个具有边框的文本显示块。由于<code>.panel</code>不控制主题颜色，所以在<code>.panel</code>的基础上增加一个控制颜色的主题<code>.panel-default</code>，另外在里面添加了一个<code>.div.panel-body</code>来放置面板主体内容：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel panel-default"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- panel-default就是那一系列的情景类，设置不同的可以设置不同的颜色 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-body"</span>&gt;</span>我是一个基础面板，带有默认主题样式风格<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="带有头和尾的面板"><a href="#带有头和尾的面板" class="headerlink" title="带有头和尾的面板"></a>带有头和尾的面板</h3><p>基础面板看上去太简单了，Bootstrap为了丰富面板的功能，特意为面板增加“面板头部”和“页面尾部”的效果：</p>
<ol>
<li><code>.panel-heading</code>：用来设置面板头部样式</li>
<li><code>.panel-footer</code>：用来设置面板尾部样式</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel panel-default"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 这里对于不同的情景颜色，面板头的颜色改变十分明显 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-heading"</span>&gt;</span>图解CSS3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-body"</span>&gt;</span>…<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-footer"</span>&gt;</span>作者：大漠<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="面板中嵌套表格"><a href="#面板中嵌套表格" class="headerlink" title="面板中嵌套表格"></a>面板中嵌套表格</h3><p>其实面板作为一个用于处理，别的组件完成不了的情况的组件，一般情况下可以把面板理解为一个区域，所以在使用面板的时候，都会在<code>.panel-body</code>放置需要的内容，可能是<strong>图片、表格或者列表等</strong>。</p>
<p>如果在面板中嵌套表格，只需要将编写好的表格直接放置在面板中即可，不过有着如下两种形式：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel panel-default"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-heading"</span>&gt;</span>图解CSS3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-body"</span>&gt;</span>…<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 这里是放在panel-body后面，实际上我们还可以将table放在panel-body里面 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table table-bordered"</span>&gt;</span>…<span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-footer"</span>&gt;</span>作者：大漠<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>两个效果最大的差异是：</p>
<ol>
<li>放在<code>.panel-body</code><strong>内</strong>的表格，实际上就是简单的嵌套，设置了一些padding值等。</li>
<li>房在<code>.panel-body</code><strong>后</strong>的表格，会与面板融合在一起，与面板相接的地方，不会有着边框的展示，而是直接展示面板的边框</li>
</ol>
<p><strong>在面板中嵌套列表组时，同样是这样的两个差异</strong></p>
<hr>
<p>到这里我们的Bootstrap基础理论入门就结束了，实际上花了很多时间都是在理论上，并且中间还停歇了很长的时间。下一步我们需要做的就是在实战中去不断掌握它，了解它的细节，帮助我们能够缩短搭建时间、快速的搭建网站，并且让其在不同的终端下达到一个非常好的显示效果。</p>
<p>现在各个方面还是有很多不足，坚持学习，继续改进，加油！我的目标可是web全栈呢！</p>
<p>2016-03-01 01:40</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;博客之外&lt;/p&gt;
&lt;p&gt;只剩最后一天，二月份就结束了。距离上一篇博客已经有着整整一个月的时间，这一个月的时间，感觉技术上的成长又被搁置了，没有了之前闭关学习的心无旁骛，那段时间成长真的飞快。&lt;br&gt;在家喝酒，玩耍，到现在实习入职了一个星期，整整一个
    
    </summary>
    
      <category term="Bootstrap" scheme="http://guowenfh.github.io/categories/Bootstrap/"/>
    
    
      <category term="Bootstrap" scheme="http://guowenfh.github.io/tags/Bootstrap/"/>
    
  </entry>
  
  <entry>
    <title>Bootstrap入门笔记之（五）导航条、分页导航</title>
    <link href="http://guowenfh.github.io/2016/01/30/Bootstrap-05-navbar-pagination/"/>
    <id>http://guowenfh.github.io/2016/01/30/Bootstrap-05-navbar-pagination/</id>
    <published>2016-01-30T15:12:50.000Z</published>
    <updated>2016-09-11T08:24:40.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导航条"><a href="#导航条" class="headerlink" title="导航条"></a>导航条</h2><p>导航条（navbar）和我们在上一个笔记中介绍的导航（nav）相比，就多了一个<strong>“条”</strong>字。其实在Bootstrap框架中他们有着一定的区别。<br>在导航条(navbar)中有一个背景色、而且导航条可以是纯链接（类似导航），也可以是表单，还有就是表单和导航一起结合等多种形式。它们在移动设备上可以折叠（并且可开可关），且在视口（viewport）宽度增加时逐渐变为水平展开模式。</p>
<h3 id="基础导航条"><a href="#基础导航条" class="headerlink" title="基础导航条"></a>基础导航条</h3><p>实际上，导航条和导航在外观上的差别并不是那么的大，但是在实际使用中导航条要比导航复杂得多。下面就来实现一个最基础的导航条。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"navbar navbar-default"</span> role=<span class="string">"navigation"</span>&gt;<span class="xml"><span class="comment">&lt;!--role是为了方便屏幕阅读器理解此处内容--&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav navbar-nav"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>HTML<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>CSS<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>JavaScript<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>PHP<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">     <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Other more<br>可以达到的效果是这样的：</p>
<p>宽屏：<br><img src="/images/Bootstrap/05-navbar-1.jpg" alt="基础导航条宽"></p>
<p>窄屏：<br><img src="/images/Bootstrap/05-navbar-2.jpg" alt="基础导航条窄"></p>
<p>在制作一个基础导航条时，主要注意以下几点：</p>
<ol>
<li>首先在制作导航的列表(<code>&lt;ul class=&quot;nav&quot;&gt;</code>)基础上添加类名<code>.navbar-nav</code></li>
<li>在列表外部添加一个容器（div）在这里允许的话<strong>推荐使用</strong><code>&lt;nav&gt;</code>，并且使用类名<code>.navbar</code>和<code>.navbar-default</code></li>
<li><code>.navbar</code>类的主要功能就是设置左右padding和圆角等效果，通过<code>.navbar-default</code>来进行控制导航条的颜色比如还有<code>.navbar-inverse</code>。（有兴趣的可以去看看源码）</li>
</ol>
<h3 id="带标题、二级菜单"><a href="#带标题、二级菜单" class="headerlink" title="带标题、二级菜单"></a>带标题、二级菜单</h3><p>在Web页面制作中，一般都可以在菜单前面看到有一个标题（文字字号比其它文字稍大一些），其实在Bootstrap框架也为大家做了这方面考虑，其通过<code>.navbar-header</code>和<code>.navbar-brand</code>来实现，如：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navbar-header"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"##"</span> <span class="attr">class</span>=<span class="string">"navbar-brand"</span>&gt;</span>WEB开发<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>当然也可以用来做logo，<a href="http://v3.bootcss.com/components/?#navbar-brand-image" target="_blank" rel="external">中文官网描述</a>，在此不进行详细描述。</p>
<p>二级菜单自然不用多说，在上一篇博客中已经进行了详细说明，若还是不太了解的话，可以再去翻翻我的上一篇博客，我们一起来看看下面这段代码以及能实现的效果：（注意这里使用的是<code>navbar-inverse</code>反色的导航条）</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navbar navbar-inverse"</span> <span class="attr">role</span>=<span class="string">"navigation"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navbar-header"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"##"</span> <span class="attr">class</span>=<span class="string">"navbar-brand"</span>&gt;</span>WEB开发<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav navbar-nav"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>HTML<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>CSS<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"dropdown"</span> &gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"dropdown-toggle"</span> <span class="attr">data-toggle</span>=<span class="string">"dropdown"</span>&gt;</span>JavaScript</div><div class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"caret"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"dropdown-menu"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>jQuery<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Vue<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>NodeJS<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span> &gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>PHP<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>效果如下：</p>
<p><img src="/images/Bootstrap/05-navbar-3.jpg" alt="标题-下拉"></p>
<p>我们常常在导航条中都能看到搜索表单，比如知乎，新浪微博等等都具有，Bootstrap框架当然不可能缺掉这样的东西。使用方法也非常简单：</p>
<p>在Bootstrap框架中提供s    了一个<code>.navbar-form</code>，在<code>.navbar</code>容器中放置一个带有<code>.navbar-form</code>类名的表单；再添加<code>.navbar-left</code>让表单左浮动，更好实现对齐。<br>在Bootstrap中，还提供了<code>.navbar-right</code>样式，让元素在导航条靠右对齐。</p>
<p>把这段代码复制到代码当中看看效果吧：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"##"</span> <span class="attr">class</span>=<span class="string">"navbar-form navbar-left"</span> <span class="attr">rol</span>=<span class="string">"search"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"请输入关键词"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>搜索<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="按钮、文本和链接"><a href="#按钮、文本和链接" class="headerlink" title="按钮、文本和链接"></a>按钮、文本和链接</h3><p>除了上面的一些样式之外，bootstrap框架提供了三种其他样式：</p>
<ol>
<li>导航条中的按钮<code>navbar-btn</code>，使不在<code>&lt;form&gt;</code>中的按钮在导航条里垂直居中</li>
<li>导航条中的文本<code>navbar-text</code>，一般使用<code>&lt;p&gt;</code>元素，达到最优的行距</li>
<li>导航条中的普通链接<code>navbar-link</code>，非导航的链接，添加这个类，可以有正确的默认颜色与反色设置</li>
</ol>
<p>但这三种样式在框架中使用时受到一定的限制，需要和<code>navbar-brand</code>、<code>navbar-nav</code>配合起来使用。而且<strong>对数量也有一定的限制，一般情况在使用一到两个不会有问题，超过两个就会有问题</strong>。</p>
<h3 id="固定导航条"><a href="#固定导航条" class="headerlink" title="固定导航条"></a>固定导航条</h3><p>有时，我们希望导航条固定在浏览器顶部或底部，Bootstrap为我们方便的提供了两个类来实现这样的样式：</p>
<ol>
<li><code>.navbar-fixed-top</code>：导航条固定在浏览器窗口顶部</li>
<li><code>.navbar-fixed-bottom</code>：导航条固定在浏览器窗口底部</li>
</ol>
<p>使用方法很简单，只需要在制作导航条最外部容器（navbar）上追加对应的类名即可。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"navbar navbar-default navbar-static-top"</span>&gt;</span></div><div class="line">    ...</div><div class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>这个固定的导航条会<strong>遮住页面上的其它内容</strong>，除非你给<code>&lt;body&gt;</code>元素底部设置了<code>padding</code>。提示：导航条的<strong>默认高度</strong>是 50px。如：<code>body { padding-bottom: 70px; }</code>，当然你也可以使用你自己的值。</p>
<h2 id="响应式导航条"><a href="#响应式导航条" class="headerlink" title="响应式导航条"></a>响应式导航条</h2><p>在上面的例子中，导航条就仅仅能大屏幕下有一个不错的效果，在屏幕变小的情况下，还<strong>直接把所有的导航项直接展现出来就不适合了</strong>。为了有一个更好的显示效果，响应式的导航条设计也就随之而来。我们先来看看效果，再一步一步分析它！</p>
<p><img src="/images/Bootstrap/05-navbar-4.jpg" alt="响应式导航条"></p>
<p>窄屏时，点击右边的按钮图标可展开，效果与上面的展开效果除了<code>active</code>状态不再溢出容器外，其他基本相同。实现代码如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navbar navbar-default"</span> <span class="attr">role</span>=<span class="string">"navigation"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navbar-header"</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- .navbar-toggle样式用于toggle收缩的内容，即nav-collapse collapse样式所在元素 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"navbar-toggle"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">data-toggle</span>=<span class="string">"collapse"</span> <span class="attr">data-target</span>=<span class="string">".navbar-responsive-collapse"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"sr-only"</span>&gt;</span>Toggle Navigation<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 确保无论是宽屏还是窄屏，navbar-brand都显示 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"navbar-brand"</span>&gt;</span>WEB开发<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 屏幕宽度小于768px时，div.navbar-responsive-collapse容器里的内容都会隐藏，显示icon-bar图标，当点击icon-bar图标时，再展开。屏幕大于768px时，默认显示。 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"collapse navbar-collapse navbar-responsive-collapse"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav navbar-nav"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>HTML<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>CSS<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>JavaScript<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>PHP<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>分析：</p>
<ol>
<li>和普通导航条一样，最外层使用<code>&lt;div class=&quot;navbar navbar-default&quot; role=&quot;navigation&quot;&gt;</code>容器包裹，主要是<code>.navbar</code>和 <code>.navbar-default</code>类。</li>
<li>保证在窄屏时<strong>需要折叠的内容必须</strong>包裹在带一个div内，并且为这个div加入<code>.collapse</code>、<code>.navbar-collapse</code>两个类名。最后为这个div<strong>添加一个class类名或者id名</strong>。</li>
<li><p>保证在窄屏时要显示的图标样式（固定写法）：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"navbar-toggle"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">data-toggle</span>=<span class="string">"collapse"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"sr-only"</span>&gt;</span>Toggle Navigation<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>并为button添加<strong>data-target=”.类名/#id名”</strong>，究竞是类名还是id名呢？由<strong>需要折叠的div</strong>来决定。（这里很关键，你可以把上面的代码在这里进行修改，会发现无法展开）</p>
</li>
</ol>
<h2 id="分页导航"><a href="#分页导航" class="headerlink" title="分页导航"></a>分页导航</h2><p>分页导航几乎在所有的网站都可以看到，好的分页导航可以给用户带来更好额用户体验，还可以方便爬虫在网页中进行搜索。</p>
<h3 id="带页码的分页导航"><a href="#带页码的分页导航" class="headerlink" title="带页码的分页导航"></a>带页码的分页导航</h3><p>带页码的分页导航，应该是最常见的一种分页导航，特别是在列表页内容很多的时候，会给用户提供带页码的分页导航方式，在Bootstrap中使用的是<code>ul&gt;li&gt;a</code>这样的结构，在ul标签上加入<code>pagination</code>类：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"pagination "</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>&amp;laquo;第一页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>6<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>7<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>8<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>9<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>10<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"disabled"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>最后一页&amp;raquo;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure>
<p>实现效果如下：</p>
<p><img src="/images/Bootstrap/05-navbar-5.jpg" alt="分页码导航"></p>
<p>可以看到同样会有<code>hover</code>、<code>active</code>、<code>disabled</code>等等状态，当然它也可以调整大小：在外层容器中的<code>.pagination</code>类后，添加<code>.pagination-lg</code>让分页导航变大；<code>.pagination-sm</code>让分页导航变小：</p>
<h3 id="翻页分页导航"><a href="#翻页分页导航" class="headerlink" title="翻页分页导航"></a>翻页分页导航</h3><p>其实这种方式，就是看不到具体的页码，只会提供一个<strong>上一页</strong>和<strong>下一页</strong>的按钮。</p>
<p>使用方式很简单，也就是在ul标签上添加<code>pager</code>类：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"pager"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>&amp;laquo;上一页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>下一页&amp;raquo;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure>
<p>它默认是居中显示的，如果我们需要一个居左一个居右显示的话，添加两个样式：<code>previous</code>让“上一步”按钮居左；<code>next</code>让“下一步”按钮居右。（同样可以使用<code>disabled</code>表示禁用状态）</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"pager"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"previous disabled"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>&amp;laquo;上一页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"next"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>下一页&amp;raquo;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><p>在一些Web页面中常常会添加一个标签用来告诉用户一些额外的信息，比如说在导航上添加了一个新导航项，可能就会加一个“new”标签，来告诉用户。这是新添加的导航项。<br>在Bootstrap专门将这样的效果提取成为了单独的标签组件。可以使用<code>&lt;span&gt;</code>这样的行内标签添加<code>.label</code>类来控制大小，再使用情景类来控制高亮显示的颜色如：<code>label-default</code>、<code>label-danger</code>等等（在原来笔记中说到过这样的情景类，只不过这里需要加上不同的前缀）</p>
<p><img src="/images/Bootstrap/05-navbar-6.jpg" alt="导航条标签"></p>
<h3 id="徽章（角标）"><a href="#徽章（角标）" class="headerlink" title="徽章（角标）"></a>徽章（角标）</h3><p>其实和上面的标签效果很大一部分是类似的，一般用作信息提示，例如剩余多少未读信息等等，也就是我们常常能在右上角看到的未读信息提示。在Bootstrap中，把这种效果称作为徽章效果，使用<code>badge</code>类来实现。</p>
<p>给链接、导航等元素嵌套 <code>&lt;span class=&quot;badge&quot;&gt;</code> 元素，可以很醒目的展示新的或未读的信息条目。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Inbox <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"badge"</span>&gt;</span>42<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> <span class="attr">type</span>=<span class="string">"button"</span>&gt;</span></div><div class="line">  Messages <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"badge"</span>&gt;</span>4<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="/images/Bootstrap/05-navbar-7.jpg" alt="导航条角标"></p>
<p>通过查看源码，我们可以发现Bootstrap同样使用<code>:empty</code>伪元素，来设置当没有内容的时候隐藏：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.badge</span><span class="selector-pseudo">:empty</span> &#123;</div><div class="line">    <span class="attribute">display</span>: none;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>需要注意的是IE8 不支持 <code>:empty</code> 选择符，所以不会默认隐藏；</p>
<p>Bootstrap 中的徽章会适配导航元素的激活状态。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav nav-pills"</span> <span class="attr">role</span>=<span class="string">"tablist"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">"presentation"</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Home <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"badge"</span>&gt;</span>42<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">"presentation"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Profile<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">"presentation"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Messages <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"badge"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="/images/Bootstrap/05-navbar-8.jpg" alt="导航条角标-适应激活"></p>
<p>好了《导航条、分页导航》的学习到此就结束了，下面需要学习Bootstrap中其他的一些比较零散的<strong>内置组件</strong>。</p>
<p>继续坚持，加油！</p>
<p>参考：</p>
<ul>
<li><a href="http://www.imooc.com/learn/141" target="_blank" rel="external">慕课网：玩转Bootstrap</a></li>
<li><a href="http://v3.bootcss.com/css/" target="_blank" rel="external">Bootstrap中文官网：全局 CSS 样式</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;导航条&quot;&gt;&lt;a href=&quot;#导航条&quot; class=&quot;headerlink&quot; title=&quot;导航条&quot;&gt;&lt;/a&gt;导航条&lt;/h2&gt;&lt;p&gt;导航条（navbar）和我们在上一个笔记中介绍的导航（nav）相比，就多了一个&lt;strong&gt;“条”&lt;/strong&gt;字。其实在Bo
    
    </summary>
    
      <category term="Bootstrap" scheme="http://guowenfh.github.io/categories/Bootstrap/"/>
    
    
      <category term="Bootstrap" scheme="http://guowenfh.github.io/tags/Bootstrap/"/>
    
  </entry>
  
  <entry>
    <title>Bootstrap入门笔记之（四）菜单、按钮及导航</title>
    <link href="http://guowenfh.github.io/2016/01/30/Bootstrap-04-dropdown-btn-nav/"/>
    <id>http://guowenfh.github.io/2016/01/30/Bootstrap-04-dropdown-btn-nav/</id>
    <published>2016-01-29T17:23:36.000Z</published>
    <updated>2016-09-11T08:24:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>我们接下来要学习的东西呢，是Bootstrap为我们提供的一些组件，这些组件的使用非常简单，可以方便快捷帮助我们搭建网站，并且能达到一个不错的显示效果。我们最需要注意的就是：<strong>HTML的结构</strong>和bootstrap提供<strong>添加到结构上的类以及属性</strong>。<br>这些组件的交互功能是依赖于jQuery库实现的，所以还必须引入jQuery.js，且必须在Bootstrap.js之前。正式上线的话直接使用压缩版本就可以了如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;script src=<span class="string">"../js/jquery-min-1.11.3.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div><div class="line">&lt;script src=<span class="string">"../js/bootstrap.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>
<h2 id="菜单"><a href="#菜单" class="headerlink" title="菜单"></a>菜单</h2><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><p>在官方文档中，我们看到的下拉菜单组件是这样的：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"dropdown"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-default dropdown-toggle"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"dropdownMenu1"</span> <span class="attr">data-toggle</span>=<span class="string">"dropdown"</span> <span class="attr">aria-haspopup</span>=<span class="string">"true"</span> <span class="attr">aria-expanded</span>=<span class="string">"true"</span>&gt;</span></div><div class="line">    下拉菜单<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"caret"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"dropdown-menu"</span> <span class="attr">aria-labelledby</span>=<span class="string">"dropdownMenu1"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>菜单项1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>菜单项2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>那么，到底哪一些属性是必须的、用来控制行为的呢？又有哪一部分是起到修饰作用的？</p>
<p>我们来自己简化一下这一段代码：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"dropdown"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"dropdown-toggle"</span><span class="attr">data-toggle</span>=<span class="string">"dropdown"</span>&gt;</span>下拉菜单<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"dropdown-menu"</span> &gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>菜单项1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>菜单项2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>我们来看看简化前后的对比图：</p>
<p><img src="/images/Bootstrap/04-dropdown-1.jpg" alt="下拉菜单（基本用法）"></p>
<p>在使用Bootstrap框架中的下拉菜单组件时，其结构运用的正确与否非常的重要，如果结构和类名未使用正确，直接影响组件是否能正常运用。经过我们上面的简化，最终可以看到核心要求有以下几点：</p>
<ol>
<li>使用一个名为<code>.dropdown</code>的容器包裹了整个下拉菜单元素，示例中为：<code>&lt;div class=&quot;dropdown&quot;&gt;&lt;/div&gt;</code></li>
<li>使用了一个<code>&lt;button&gt;</code>按钮做为父菜单，并且定义类名<code>.dropdown-toggle</code>和自定义<code>data-toggle</code>属性，且值必须和最外容器类名一致，此示例为：<code>data-toggle=&quot;dropdown&quot;</code></li>
<li>下拉菜单项使用一个ul列表，并且定义一个类名为<code>.dropdown-menu</code>，此示例为：<code>&lt;ul class=&quot;dropdown-menu&quot;&gt;</code></li>
</ol>
<p>也就是说，我们仅仅需要牢记这3个步骤我们就可以使下拉菜单生效，<code>&lt;button&gt;</code>内的<code>&lt;span&gt;</code>标签，也仅仅是用来进行图标的展示，让菜单更加清晰。不过虽然如此，我个人建议在<strong>实际的使用过程</strong>中，把Bootstrap框架中的下拉菜单的<strong>其它属性也一并加上</strong>，这样更加友好的为不同的客户<strong>如：屏幕阅读器</strong>提供了一个优质的体验。</p>
<p>那么这些是怎么起作用的呢？</p>
<p>查看CSS源码可以看到<code>.dropdown-menu</code>有一个<code>display:none</code>，所以下拉列表项默认隐藏的；我们继续打开chrome开发者工具（F12），可以看到每一次在列表项展现出来时，<code>.dropdown</code>类后还增加了一个<code>.open</code>的类；不用多说想肯定就是这个类在起作用，我们再继续回到CSS源码中去可以看到：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.open</span> &gt; <span class="selector-class">.dropdown-menu</span> &#123;</div><div class="line">  <span class="attribute">display</span>: block;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>看到这里也应该不用过多说明了，添加了这个<code>.open</code>类时，<code>.dropdown-menu</code>自然的就显示出来了。</p>
<h3 id="下拉菜单修饰"><a href="#下拉菜单修饰" class="headerlink" title="下拉菜单修饰"></a>下拉菜单修饰</h3><h4 id="下拉分隔线"><a href="#下拉分隔线" class="headerlink" title="下拉分隔线"></a>下拉分隔线</h4><p>在Bootstrap框架中的下拉菜单还提供了下拉分隔线，假设下拉菜单有两个组，那么组与组之间可以通过添加一个<strong>空</strong>的<code>&lt;li&gt;</code>，并且给这个<code>&lt;li&gt;</code>添加类名<code>.divider</code>来实现添加下拉分隔线的功能。<code>&lt;li class=&quot;divider&quot;&gt;&lt;/li&gt;</code>对应的样式代码：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.dropdown-menu</span> <span class="selector-class">.divider</span> &#123;</div><div class="line">  <span class="attribute">height</span>: <span class="number">1px</span>;</div><div class="line">  <span class="attribute">margin</span>: <span class="number">9px</span> <span class="number">0</span>;</div><div class="line">  <span class="attribute">overflow</span>: hidden;</div><div class="line">  <span class="attribute">background-color</span>: <span class="number">#e5e5e5</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="菜单标题"><a href="#菜单标题" class="headerlink" title="菜单标题"></a>菜单标题</h4><p>上一小节讲解通过添加<code>divider</code>可以将下拉菜单分组，为了让这个分组更明显，还可以给每个组添加一个头部（标题）：<code>&lt;li  class=&quot;dropdown-header&quot;&gt;第一部分菜单头部&lt;/li&gt;</code>。</p>
<p>从源码中比较关键的两个点是：标题的字体颜色是：<code>color: #777;</code>，还有内填充<code>padding: 3px 20px;</code></p>
<h4 id="对齐方式"><a href="#对齐方式" class="headerlink" title="对齐方式"></a>对齐方式</h4><p>Bootstrap框架中下拉菜单<strong>默认是左对齐</strong>也就是添加<code>.dropdown-menu-left</code>类所能达到的效果，如果你想让下拉菜单<strong>相对于父容器右对齐</strong>时，可以在<code>.dropdown-menu</code>上（也就是你的菜单项的ul）添加一个<code>.pull-right</code>或者<code>.dropdown-menu-right</code>类名，如下所示：<code>&lt;ul class=&quot;dropdown-menu pull-right&quot; &gt;</code><br>源码如下：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.dropdown-menu</span><span class="selector-class">.pull-right</span>,</div><div class="line"><span class="selector-class">.dropdown-menu-right</span> &#123;<span class="comment">/*两个类自选*/</span></div><div class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">left</span>: auto;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当然你只进行这样的设置的话，可能还会有一些奇怪的情况出现，比如列表项跑到屏幕最右边去了，所以同时一定要为<code>.dropdown</code>添加<code>float:left</code>样式。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.dropdown</span>&#123;</div><div class="line">  <span class="attribute">float</span>: left;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="/images/Bootstrap/04-dropdown-2.jpg" alt="下拉菜单（右对齐）"></p>
<h4 id="菜单项状态"><a href="#菜单项状态" class="headerlink" title="菜单项状态"></a>菜单项状态</h4><p>下拉菜单项的默认的状态（不用设置）有悬浮状态（<code>:hover</code>）和焦点状态（<code>:focus</code>）：（包括下面提到的状态都必须在li中包含a标签才有- -）</p>
<p>下拉菜单项除了上面两种状态，还有<strong>当前状态</strong>（<code>.active</code>）和<strong>禁用状态</strong>（<code>.disabled</code>）。这两种状态使用方法只需要在对应的菜单项上添加对应的类名如：<code>&lt;li class=&quot;disabled&quot;&gt;&lt;a href=&quot;#&quot;&gt;桃&lt;/a&gt;&lt;/li&gt;</code></p>
<p>我们可以实现下面这样的效果：</p>
<p><img src="/images/Bootstrap/04-dropdown-3.jpg" alt="下拉菜单（右对齐）"></p>
<h2 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h2><p>我们在<a href="http://guowenfh.github.io/2016/01/18/Bootstrap-02-form/">《Bootstrap入门笔记之（二）表单》</a>中，已经了解过了Bootstrap中按钮的使用，在这里我们继续进行一些扩展！</p>
<h3 id="按钮组及工具栏"><a href="#按钮组及工具栏" class="headerlink" title="按钮组及工具栏"></a>按钮组及工具栏</h3><blockquote>
<p>单个按钮在Web页面中的运用有时候并不能满足我们的业务需求，常常会看到将多个按钮组合在一起使用，比如富文本编辑器里的一组小图标按钮等。这个时候我们就会需要用到按钮组</p>
</blockquote>
<p>对于结构方面，非常的简单。使用一个名为<code>.btn-group</code>的容器，把多个按钮放到这个容器中。如：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn-group"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>向左<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-danger"</span>&gt;</span>中间<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>向右<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>如何转化成工具栏呢？只需要再用一个<code>.btn-toolbar</code>的内容，将我们的<code>.btn-group</code>再进行一次包裹，同时，我们还可以使用<code>.btn-group-lg</code>大按钮组、<code>.btn-group-xs</code>:超小按钮组这一系列的类添加到<code>.btn-group</code>容器来进行对一组按钮进行大小控制如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>= <span class="string">"btn-toolbar"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- …… --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>= <span class="string">"btn-group "</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>向左<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-danger"</span>&gt;</span>中间<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>向右<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>= <span class="string">"btn-group btn-group-sm"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>向左<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-danger"</span>&gt;</span>中间<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>向右<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- …… --&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>上面两段代码效果如下：</p>
<p><img src="/images/Bootstrap/04-btn-1.jpg" alt="按钮组及工具栏"></p>
<h3 id="嵌套分组"><a href="#嵌套分组" class="headerlink" title="嵌套分组"></a>嵌套分组</h3><p>这里的嵌套分组其实就是在分组按钮中嵌套了一个下拉菜单。使用的时候，只需要把当初制作下拉菜单的<code>.dropdown</code>的容器换成<code>.btn-group</code>，并且和普通的按钮放在同一级。如下所示：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn-group"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> <span class="attr">type</span>=<span class="string">"button"</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn-group"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-default dropdown-toggle"</span> <span class="attr">data-toggle</span>=<span class="string">"dropdown"</span> <span class="attr">type</span>=<span class="string">"button"</span>&gt;</span>产品展示<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"caret"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"dropdown-menu"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"##"</span>&gt;</span>公司简介<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"##"</span>&gt;</span>企业文化<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"##"</span>&gt;</span>组织结构<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"##"</span>&gt;</span>客服服务<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> <span class="attr">type</span>=<span class="string">"button"</span>&gt;</span>关于<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>当然我们还可以从<strong>水平按钮组</strong>变成<strong>垂直分组</strong>，只需要在水平分组的最外层容器的类名<code>.btn-group</code>替换成<code>.btn-group-vertical</code>，就可以实现垂直分组的效果。</p>
<p><strong>按钮的向下向上三角形</strong></p>
<p>我们在下拉菜单和嵌套分组都都看到了一个按钮的向下三角形，我们是通过在<code>&lt;button&gt;</code>标签中添加一个<code>&lt;span&gt;</code>标签元素，并且命名为<code>caret</code>，这个三角形完全是通过CSS代码来实现的：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.caret</span> &#123;</div><div class="line">    <span class="attribute">display</span>: inline-block;</div><div class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">margin-left</span>: <span class="number">2px</span>;</div><div class="line">    <span class="attribute">vertical-align</span>: middle;</div><div class="line">    <span class="attribute">border-top</span>: <span class="number">4px</span> solid;</div><div class="line">    <span class="attribute">border-right</span>: <span class="number">4px</span> solid transparent;</div><div class="line">    <span class="attribute">border-left</span>: <span class="number">4px</span> solid transparent;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>有的时候我们的下拉菜单会<strong>向上弹起</strong>，这个时候我们的<strong>三角方向需要朝上</strong>显示，实现方法：需要在<code>.btn-group</code>类上追加<code>dropup</code>类名（这也是做向上弹起下拉菜单要用的类名）。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.dropup</span> <span class="selector-class">.caret</span>&#123;  </div><div class="line">    <span class="attribute">content</span>: <span class="string">""</span>;</div><div class="line">    <span class="attribute">border-top</span>: <span class="number">0</span>;<span class="comment">/*可以看到这里top与bottom的变化*/</span></div><div class="line">    <span class="attribute">border-bottom</span>: <span class="number">4px</span> solid;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>那么现在就来对比一下，上面代码以及类的添加可以达到的不同效果：</p>
<p><img src="/images/Bootstrap/04-btn-2.jpg" alt="嵌套分组、垂直、向上展开"></p>
<h2 id="导航"><a href="#导航" class="headerlink" title="导航"></a>导航</h2><p>导航对于一位前端开发人来说眼应该都不陌生。可以说，每一个网页里面都会有导航的存在，便于用户查找网站所提供的各项功能服务。那么如何使用Bootstrap框架制作各式各样的导航呢？</p>
<h3 id="基础样式"><a href="#基础样式" class="headerlink" title="基础样式"></a>基础样式</h3><p>Bootstrap框架中制作导航条主要通过<code>.nav</code>样式。默认的<code>.nav</code>样式<strong>不提供</strong>默认的导航样式，必须附加另外一个样式才会有效，比如<code>nav-tabs</code>、<code>nav-pills</code>之类。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav nav-tabs"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>HTML5<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>CSS3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>JavaScript<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure>
<p>当然他们同样也有<strong>当前状态</strong>（<code>.active</code>）和<strong>禁用状态</strong>（<code>.disabled</code>），我们给第一个导航添加当前状态，最后一个导航添加禁用状态，实现效果如下：</p>
<p><img src="/images/Bootstrap/04-nav-1.jpg" alt="导航-基础样式"></p>
<h3 id="修饰"><a href="#修饰" class="headerlink" title="修饰"></a>修饰</h3><h4 id="垂直堆叠的导航"><a href="#垂直堆叠的导航" class="headerlink" title="垂直堆叠的导航"></a>垂直堆叠的导航</h4><p>在实际运用当中，除了水平导航之外，还有垂直导航，就类似前面介绍的垂直排列按钮一样。制作垂直堆叠导航只需要在<strong><code>.nav-pills</code></strong>的基础上添加一个<code>.nav-stacked</code>类名即可，同时，我们和下拉菜单一样，同样可以使用组之间的分割线例，只需要在导航项之间添加<code>&lt;li class=”nav-divider”&gt;&lt;/li&gt;</code>,如：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav nav-pills nav-stacked"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>HTML5<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>CSS3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"nav-divider"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"disabled"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>JavaScript<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure>
<p>复制到浏览器中看看效果吧！</p>
<p>你应该已经发现了在垂直导航中，每一个导航项都是占<strong>文字居左</strong>，占100%的父容器宽度的，如果你想有响应式的效果，应该和栅格系统一起使用，另外为什么不试试使用<code>nav-tabs</code>来实现垂直导航呢？看看效果，你就会明白为什么不使用了。</p>
<p><strong>自适应导航</strong></p>
<p>自适应导航和前面制作自适应按钮是一样的，不过更换了一个类名，<code>.nav-justified</code>。当然他需要和<code>.nav-tabs</code>或者<code>.nav-pills</code>配合在一起使用。 它是响应式的，在宽度足够时，给多个导航项，均分空间；在达到一个临界值（768px）时，它会和垂直导航一样：每一项都充满父容器的宽度，不同的是，他的文字是<strong>居中显示</strong>的</p>
<h4 id="导航中加下拉菜单（二级导航）"><a href="#导航中加下拉菜单（二级导航）" class="headerlink" title="导航中加下拉菜单（二级导航）"></a>导航中加下拉菜单（二级导航）</h4><p>前面介绍的都是使用制作一级导航，但很多时候，在Web页面常常会用到二级导航的效果。<br>在Bootstrap框架中制作二级导航就更容易了。只需要将li当作父容器，使用类名<code>.dropdown</code>，同时在<strong><code>li</code>中嵌套另一个列表<code>ul</code>
</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav nav-pills"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> &gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>HTML5<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>CSS3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"dropdown"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"##"</span> <span class="attr">class</span>=<span class="string">"dropdown-toggle"</span> <span class="attr">data-toggle</span>=<span class="string">"dropdown"</span>&gt;</span>JavaScript<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"caret"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"dropdown-menu"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"##"</span>&gt;</span>JQuery<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"##"</span>&gt;</span>Vue<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            …</div><div class="line">       <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这里的话不进行太多的讲解，与上面的嵌套按钮效果一致。</p>
<h4 id="面包屑式导航"><a href="#面包屑式导航" class="headerlink" title="面包屑式导航"></a>面包屑式导航</h4><p>面包屑(Breadcrumb)一般用于导航，主要是起的作用是告诉用户现在所处页面的位置（<strong>当前位置</strong>）。一般在文章、博客、列表处用的比较多，需要用到<code>.breadcrumb</code>类。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ol</span> <span class="attr">class</span>=<span class="string">"breadcrumb"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>个人首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>标签<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span>Bootstrap<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></div></pre></td></tr></table></figure>
<p>可以实现的效果：</p>
<p><img src="/images/Bootstrap/04-nav-2.jpg" alt="导航-面包屑"></p>
<p>是不是很简洁明了呢？</p>
<p>好了我们对于《 菜单、按钮及导航》的学习到这里呢先就告一段落了，下一章节应该就是对于<strong>导航条、分页导航</strong>的学习了。继续加油！</p>
<p>参考：</p>
<ul>
<li><a href="http://www.imooc.com/learn/141" target="_blank" rel="external">慕课网：玩转Bootstrap</a></li>
<li><a href="http://v3.bootcss.com/css/" target="_blank" rel="external">Bootstrap中文官网：全局 CSS 样式</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们接下来要学习的东西呢，是Bootstrap为我们提供的一些组件，这些组件的使用非常简单，可以方便快捷帮助我们搭建网站，并且能达到一个不错的显示效果。我们最需要注意的就是：&lt;strong&gt;HTML的结构&lt;/strong&gt;和bootstrap提供&lt;strong&gt;添加到结构上
    
    </summary>
    
      <category term="Bootstrap" scheme="http://guowenfh.github.io/categories/Bootstrap/"/>
    
    
      <category term="Bootstrap" scheme="http://guowenfh.github.io/tags/Bootstrap/"/>
    
  </entry>
  
  <entry>
    <title>Bootstrap入门笔记之（三）栅格系统</title>
    <link href="http://guowenfh.github.io/2016/01/28/Bootstrap-03-Grid/"/>
    <id>http://guowenfh.github.io/2016/01/28/Bootstrap-03-Grid/</id>
    <published>2016-01-27T16:49:03.000Z</published>
    <updated>2016-09-11T08:24:40.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>栅格系统是Bootstrap中的核心，正是因为栅格系统的存在，Bootstrap才能有着如此强大的响应式布局方案。下面是官方文档中的解说：</p>
<blockquote>
<p>Bootstrap 提供了一套响应式、移动设备优先的流式栅格系统，随着屏幕或视口（viewport）尺寸的增加，系统会自动分为最多12列。包含了用于简单的布局选项的预定义类，也包含了用于生成更多语义布局的功能强大的混合类。</p>
</blockquote>
<p>我们来理解一下这一段话，可以发现其中最重要的部分就是<strong>移动设备优先</strong>，那么什么是移动设备优先呢？</p>
<p>Bootstrap的基础CSS代码<strong>默认从小屏幕设备</strong>（比如移动设备、平板电脑）开始，然后使用<strong>媒体查询扩展到大屏幕设备</strong>（比如笔记本电脑、台式电脑）上的组件和网格。</p>
<p>有着如下策略：</p>
<ol>
<li>内容：决定什么是最重要的。</li>
<li>布局：优先设计更小的宽度。</li>
<li>渐进增强：随着屏幕大小增加而添加元素。</li>
</ol>
<h2 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h2><ol>
<li><p>数据行（<code>.row</code>）必须包含在容器<code>.container</code>（固定宽度）或<code>.container-fluid</code>（100%宽度）中，以便为其赋予合适的排列（aligment）和内填充（padding）。如：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span><span class="comment">&lt;!-- 水平居中，两边有margin，最小屏幕时，充满父元素 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 或者 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container-fluid"</span>&gt;</span><span class="comment">&lt;!-- 默认一直充满整个父元素 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>在数据行（<code>.row</code>)中可以添加列（column），但列数之和不能超过平分的总列数（在超过时，多余部分会换行显示），默认12。（使用Less或者Sass可以进行自定义设置）如：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-6"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-4"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>页面上的<strong>具体内容</strong>应当放置于列（column）内，并且<strong>只有列</strong>（column）可以作为数据行<code>.row</code>容器的<strong>直接子元素</strong>。</p>
</li>
<li>预定义的网格类，比如 <code>.row</code> 和 <code>.col-xs-4</code>，可用于快速创建网格布局。</li>
<li>栅格系统中的列是通过指定<strong>1到12</strong>的值来表示其跨越的范围。例如，三个等宽的列可以使用三个<code>.col-xs-4</code>来创建。</li>
</ol>
<p><strong>注意事项：</strong></p>
<p>正如上面在注释部分所展现的一样的<code>.container</code>（固定宽度）是固定宽度的布局方式。通过查看源码，在查看<code>.container</code>类的时候我们会发现，它的宽度是响应式的：（如下）</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.container</span> &#123;</div><div class="line">  <span class="attribute">padding-right</span>: <span class="number">15px</span>;</div><div class="line">  <span class="attribute">padding-left</span>: <span class="number">15px</span>;</div><div class="line">  <span class="attribute">margin-right</span>: auto;<span class="attribute">margin-left</span>: auto;</div><div class="line">&#125;</div><div class="line">@<span class="keyword">media</span> (min-width: <span class="number">768px</span>) &#123;</div><div class="line">  <span class="selector-class">.container</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">750px</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">@<span class="keyword">media</span> (min-width: <span class="number">992px</span>) &#123;</div><div class="line">  <span class="selector-class">.container</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">970px</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">/*........*/</span></div></pre></td></tr></table></figure>
<p>从上面的css代码可以看到，该类默认为整个父元素的宽度（最小屏幕），但是在大屏幕下有着不同的宽度，并且在不同宽度下左右margin会同时增加或减少（水平居中）。</p>
<p><strong><code>.container-fluid</code>类就和<code>.container</code>的默认情况一样，为100%宽度。</strong>（CSS代码一样）</p>
<p>除此之外</p>
<p>从源码中我们还可以发现，除了有左右margin外，还可以看到该类是有着左右填充（padding）存在的。</p>
<p>如果我们继续查看源码，可以发现数据行<code>.row</code>中的每一个列也有着左右填充（padding）的存在，如下：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.col-md-1</span>, <span class="selector-class">.col-lg-12</span> <span class="comment">/*......*/</span>&#123;</div><div class="line">  <span class="attribute">position</span>: relative;</div><div class="line">  <span class="attribute">min-height</span>: <span class="number">1px</span>;</div><div class="line">  <span class="attribute">padding-right</span>: <span class="number">15px</span>;</div><div class="line">  <span class="attribute">padding-left</span>: <span class="number">15px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>看到这里，大家应该都能想到会有什么样的情况出现！我们在第一个和最后一个列因为<strong>双填充</strong>的存在，<strong>实际上对于内容的隔离</strong>已经到了<strong>30px</strong>。我们需要怎么消除影响呢？</p>
<p>Bootstrap是通过<code>.rows</code>上的外边距（margin）取负<code>margin-left: -15px;margin-right: -15px;</code>，表示第一列和最后一列的行偏移，用来抵消第一个列的左内距和最后一列的右内距。</p>
<h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><p>一图胜千言，通过下表可以详细查看 Bootstrap 的栅格系统是如何在多种屏幕设备上工作的。使用方法我想应该不用再多说了，已经有提到过，直接一起来看看区别吧。（图片扒自<a href="http://v3.bootcss.com/css/#grid-less" target="_blank" rel="external">Bootstrap中文官网</a>）</p>
<p><img src="/images/Bootstrap/Grid-parameter.jpg" alt="栅格参数"></p>
<p>通过源码可以发现，如下：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.col-md-1</span><span class="comment">/*......*/</span>&#123; <span class="attribute">float</span>: left;&#125;<span class="comment">/*所有的列都是默认向左浮动的*/</span></div><div class="line"><span class="selector-class">.col-md-1</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">8.33333333%</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.col-md-2</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">16.66666667%</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">/*.....*/</span></div><div class="line"><span class="selector-class">.col-md-12</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>从这些CSS代码也就不难发现，Bootstrap中每一列所占的宽度，以及为何在列数设置超过12时，超过部分会换行显示了。</p>
<p>在下面所有的示例中每一列的背景颜色与边框的效果由如下CSS代码控制：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-attr">[class *= col-]</span>&#123;</div><div class="line">    <span class="attribute">background-color</span>: <span class="number">#eee</span>;</div><div class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><p>那么我们就来看看一些示例吧，下面这种方式是最基本的用法：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-6"</span>&gt;</span>.col-md-6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-6"</span>&gt;</span>.col-md-6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-4"</span>&gt;</span>.col-md-4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-4"</span>&gt;</span>.col-md-4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-4"</span>&gt;</span>.col-md-4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-2"</span>&gt;</span>.col-md-2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-6"</span>&gt;</span>.col-md-6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-4"</span>&gt;</span>.col-md-4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>实现的效果如下：</p>
<p><img src="/images/Bootstrap/Grid-base.jpg" alt="网格基本用法"></p>
<p>Bootstrap作为一个响应式框架当然不会只有那么简单的功能，我们继续往下走吧！</p>
<h3 id="列偏移"><a href="#列偏移" class="headerlink" title="列偏移"></a>列偏移</h3><p>在某些情况下，我们不希望相邻的列紧靠在一起，如果你希望不通过额外的margin或其他的手段来实现的话，Bootstrap内置为我们提供了列偏移（offset），这一系列的类来帮助我们实现想要的效果。</p>
<p>只需要给需要偏移的列元素上添加类名<code>col-md-offset-*</code>(<strong>星号代表要偏移的列组合数</strong>)，那么具有这个类名的列就会向右偏移。<br>这些类实际是通过使用 <code>*</code> 选择器为当前元素增加了左侧的边距（margin）。例如：在列元素中添加<code>.col-md-offset-6</code> 类将 <code>.col-md-6</code>元素向右侧偏移了6个列（column）的宽度。</p>
<p>现在我们的代码是这样的：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-2 "</span>&gt;</span>col-md-8 <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-3 col-md-offset-2"</span>&gt;</span>col-md-4 col-md-offset-2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-4 col-md-offset-1"</span>&gt;</span>col-md-4 col-md-offset-1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-4 "</span>&gt;</span>col-md-4 <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-3 col-md-offset-4"</span>&gt;</span>col-md-3 col-md-offset-4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-4 col-md-offset-4"</span>&gt;</span>col-md-4 col-md-offset-4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>可以实现的效果如下：</p>
<p><img src="/images/Bootstrap/Grid-offset.jpg" alt="网格基本用法"></p>
<p>从实现的效果我们就能发现一些东西，注意<strong>第二段的显示效果与代码</strong>，从那里我们可以发现：使用<code>col-md-offset-*</code>对列进行向右偏移时，要保证列与偏移列的总数不超过12，不然会致列断行显示。<br>其实原因也很简单：因为该类是对于列设置<code>margin-left</code>，并且我们在上面的源码展示中，也可以看有每一列都有着<code>float:left</code>的属性，从这些地方我们就不难发现在（偏移+列宽）超过12时，为何会换行显示了</p>
<h3 id="列排序"><a href="#列排序" class="headerlink" title="列排序"></a>列排序</h3><p>列排序其实就是改变列的方向（顺序），就是改变左右浮动，并且设置浮动的距离。在Bootstrap框架的网格系统中是通过添加类名<code>col-md-push-*</code>和<code>col-md-pull-*</code> (和上面一样，星号代表移动的列组合数)。</p>
<p>Bootstrap仅通过设置left和right来实现定位效果。通过查看源码，我们可以看到基本设置比较简单，如下：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.col-md-pull-12</span> &#123;</div><div class="line">    <span class="attribute">right</span>: <span class="number">100%</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">/*...*/</span></div><div class="line"><span class="selector-class">.col-md-push-1</span> &#123;</div><div class="line">    <span class="attribute">left</span>: <span class="number">8.33333333%</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.col-md-push-0</span> &#123;</div><div class="line">    <span class="attribute">left</span>: auto;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>还是继续看看我们的实际效果吧！代码如下</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-4 col-md-push-8"</span>&gt;</span>.col-md-4  col-md-push-8 <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-8 col-md-pull-4"</span>&gt;</span>.col-md-8  col-md-pull-4 <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-4 "</span>&gt;</span>.col-md-4  默认<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-8 "</span>&gt;</span>.col-md-8  默认<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="/images/Bootstrap/Grid-push-pull.jpg" alt="网格基本用法"></p>
<p>我们可以发现列的位置已经发生了改变</p>
<h3 id="列嵌套"><a href="#列嵌套" class="headerlink" title="列嵌套"></a>列嵌套</h3><p>Bootstrap框架的网格系统还支持列的嵌套。你可以在一个列中添加一个或者多个行（<code>.row</code>）容器，然后在这个行容器中插入列（像前面介绍的一样使用列）。但在列容器中的行容器（<code>.row</code>），宽度为100%时，就是当前外部列的宽度。（其实就是在列中嵌套多个列，下面会有实际效果展示）</p>
<p>注意：被嵌套的行（<code>.row</code>）所包含的列（column）的个数不能超过12（其实，没有要求你必须占满12列 -_- ）。</p>
<p>我们现在有这样一个需求：</p>
<ol>
<li>创建一个8-4列网格。（备注：以中屏md（970px）为例）。</li>
<li>在第一个8列网格中插入8-4列网格。</li>
<li>在第二个4列网格中插入9-3列网格。</li>
</ol>
<p>效果如下：</p>
<p><img src="/images/Bootstrap/Grid-nesting.jpg" alt="网格基本用法"></p>
<p>该如何实现呢？</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-8"</span>&gt;</span></div><div class="line">            我的里面嵌套了一个网格</div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-8"</span>&gt;</span>col-md-8<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-4"</span>&gt;</span>col-md-4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-4"</span>&gt;</span></div><div class="line">            我的里面嵌套了一个网格</div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-9"</span>&gt;</span>col-md-9<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-3"</span>&gt;</span>col-md-3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>是不是很简单呢？当然为了完全实现和效果图一样的展示，我们还需要对CSS进行一些添加，主要是对于嵌套的添加 一些高亮的样式：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-attr">[class *= col-]</span> <span class="selector-attr">[class *= col-]</span> &#123;</div><div class="line">    <span class="attribute">background-color</span>: <span class="number">#f36</span>;      </div><div class="line">    <span class="attribute">border</span>:<span class="number">1px</span> dashed <span class="number">#fff</span>;</div><div class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>栅格系统的基础里面方面呢，上面已经说的差不多了，看上去十分简单不是吗？</p>
<p>要想在我们的实际项目中使页面在不同屏幕中达到一个最佳的显示效果，还需要我们对于栅格系统进行的灵活的运用！</p>
<p>下面就一起来进行一些实例的研究吧！</p>
<h2 id="实例："><a href="#实例：" class="headerlink" title="实例："></a>实例：</h2><p>在上面我们已经实现了过最简单的从堆叠到水平排列的布局了，非常简单，我们只使用了单一的一组 <code>.col-md-*</code>栅格类，就创建了一个基本的栅格系统。<br>它在手机和平板设备上一开始是堆叠在一起的（超小屏幕到小屏幕这一范围），在桌面（中等）屏幕设备上变为水平排列</p>
<h3 id="移动设备和桌面屏幕"><a href="#移动设备和桌面屏幕" class="headerlink" title="移动设备和桌面屏幕"></a>移动设备和桌面屏幕</h3><p>是否不希望在小屏幕设备上所有列都堆叠在一起？那就使用针对超小屏幕和中等屏幕设备所定义的类吧，即 <code>.col-xs-*</code> 和 <code>.col-md-*</code>。<br>我把Bootstrap中文官网的代码稍微做了一点修改。主要是将中间的<code>.col-md-4</code>和<code>.col-xs-6</code>两个类调换了一下位置（CSS层叠，说到这应该就不需要做更多的说明了吧。），代码如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-12 col-md-8"</span>&gt;</span>.col-xs-12 .col-md-8<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-6 col-md-4"</span>&gt;</span>.col-xs-6 .col-md-4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-4 col-xs-6"</span>&gt;</span>.col-md-4 .col-xs-6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-4 col-xs-6"</span>&gt;</span>.col-md-4 .col-xs-6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-4 col-xs-6"</span>&gt;</span>.col-md-4 .col-xs-6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-6"</span>&gt;</span>.col-xs-6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-6"</span>&gt;</span>.col-xs-6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>宽屏显示效果如下：<br><img src="/images/Bootstrap/Grid-mobile-desktop-1.jpg" alt="移动设备和桌面屏幕-桌面"><br>窄屏显示效果如下：<br><img src="/images/Bootstrap/Grid-mobile-desktop-2.jpg" alt="移动设备和桌面屏幕-移动"></p>
<p>其实从上面代码和实际的显示效果，我们就可以看出一些问题来：</p>
<ol>
<li>在宽屏时，使用<code>col-md-*</code>的布局方式，在窄屏时使用<code>col-xs-*</code>布局</li>
<li>响应式的列重置与列中设置的类的排列顺序无关。</li>
<li>响应式列重置，在一个<code>.row</code>仍然存在列超过12时，<code>col-xs-6</code><em>3=18。<strong>多余列</strong>的元素将作为一个<em>*整体单元</em></em>被另起一行排列。</li>
</ol>
<p>在了解了上面的这些问题之后是不是明了了一些呢？</p>
<p>举一反三，我们再来看一个更加复杂的例子</p>
<h3 id="手机、平板、桌面"><a href="#手机、平板、桌面" class="headerlink" title="手机、平板、桌面"></a>手机、平板、桌面</h3><p>在上面案例的基础上，通过增加使用针对平板设备的 <code>.col-sm-*</code> 类，我们来创建更加动态和强大的布局吧。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-12 col-sm-6 col-md-8"</span>&gt;</span>.col-xs-12 .col-sm-6 .col-md-8<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-6 col-sm-12 col-md-4"</span>&gt;</span>.col-xs-6 .col-sm-12 .col-md-4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-6 col-sm-4"</span>&gt;</span>.col-xs-6 .col-sm-4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-6 col-sm-4"</span>&gt;</span>.col-xs-6 .col-sm-4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-6 col-sm-4"</span>&gt;</span>.col-xs-6 .col-sm-4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这一次会比原来的情况更加复杂，一个会有3种情况出现：</p>
<p>宽屏：<br><img src="/images/Bootstrap/Grid-mobile-pad-desktop-1.jpg" alt="桌面"><br>中屏：<br><img src="/images/Bootstrap/Grid-mobile-pad-desktop-2.jpg" alt="平板"><br>窄屏：<br><img src="/images/Bootstrap/Grid-mobile-pad-desktop-3.jpg" alt="手机"></p>
<p>然后我们从这一部分代码与实际效果，再加上上面做的一点小总结，对比之后又能发现一些问题：</p>
<ol>
<li>Bootstrap中对于栅格系统的展示总是<strong>优先展示**</strong>对应屏幕大小**范围的类（<code>.col-xs-6</code>和<code>.col-sm-4</code>等等）。</li>
<li>在为不同大小屏幕，添加多个类一定要记住在<strong>基本用法</strong>处的表格中的内容，它决定了在不同大小屏幕下的显示与排列。</li>
<li>若还要继续添加在超大屏幕下的特定显示效果，只需要对列再添加一个<code>.col-lg-*</code>的类，就能达到你所想要的</li>
</ol>
<h3 id="响应式列重置"><a href="#响应式列重置" class="headerlink" title="响应式列重置"></a>响应式列重置</h3><p>除了在上面讲到的内容，在官方文档中还提到了<strong>响应式列重置</strong>，在我看来其实就是以下几点（或者说在这样的条件下可以使用）：</p>
<ol>
<li>需要对于不同屏幕大小进行处理，添加多个对于列宽进行处理的类。</li>
<li>在缩小屏幕时，同一数据行（<code>.row</code>）针对小屏幕设置的类的宽度（<code>.col-sm-*</code>等等）加起来超过12，余下部分进行换行显示。</li>
<li>在不同列的高度，有比较大的差异。可以在<strong>未超过12</strong>与<strong>超过12</strong>的部分，两者之间添加下面这样的代码：<code>&lt;div class=&quot;clearfix visible-xs-block&quot;&gt;&lt;/div&gt;</code>。（<code>.visible-xs-block</code>这一系列的类，会在后面进行讲解）<br>它最主要的作用是：它是响应式的，会占据未超过12的部分的宽高，且只有在发生列换行显示（堆叠）才进行设置。</li>
<li>为了便于大家理解，我加一句：把上面那段代码复制到数据行<code>.row</code>容器内的最末端，它所占据的宽高和<code>.row</code>是一样的。（内容中有多段这样的代码的时候不成立，原因大家应该都能看出来了）</li>
</ol>
<p>说到这里呢，栅格系统的部分，基本告一段落了，我们即将开始对于<strong>菜单、按钮及导航</strong>，这一部分的组件进行学习</p>
<p>参考：</p>
<ul>
<li><a href="http://www.imooc.com/learn/141" target="_blank" rel="external">慕课网：玩转Bootstrap</a></li>
<li><a href="http://v3.bootcss.com/css/" target="_blank" rel="external">Bootstrap中文官网：全局 CSS 样式</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;实现原理&quot;&gt;&lt;a href=&quot;#实现原理&quot; class=&quot;headerlink&quot; title=&quot;实现原理&quot;&gt;&lt;/a&gt;实现原理&lt;/h2&gt;&lt;p&gt;栅格系统是Bootstrap中的核心，正是因为栅格系统的存在，Bootstrap才能有着如此强大的响应式布局方案。下面是官方
    
    </summary>
    
      <category term="Bootstrap" scheme="http://guowenfh.github.io/categories/Bootstrap/"/>
    
    
      <category term="Bootstrap" scheme="http://guowenfh.github.io/tags/Bootstrap/"/>
    
  </entry>
  
  <entry>
    <title>Bootstrap入门笔记之（二）表单</title>
    <link href="http://guowenfh.github.io/2016/01/18/Bootstrap-02-form/"/>
    <id>http://guowenfh.github.io/2016/01/18/Bootstrap-02-form/</id>
    <published>2016-01-18T15:26:45.000Z</published>
    <updated>2016-09-11T08:24:40.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>关于表单的应用自然不需要多说，只要您的的网站可以用户登录，那么不可能不用到表单！表单主要功能是用来与用户做交流的一个网页控件，JavaScript发明之初最大的作用也就是用来进行表单操作。所以表单是每一个前端开发者必须要熟练掌握的东西。</p>
</blockquote>
<p>良好的表单设计能够让网页与用户更好的沟通。表单中常见的元素主要包括：<strong>文本输入框、下拉选择框、单选按钮、复选按钮、文本域和按钮等</strong>。其中每个控件所起的作用都各不相同，而且不同的浏览器对表单控件渲染的风格都各有不同。传统的HTML表单就不在这样进行讲解了，下面就开始Bootstrap表单的学习吧！</p>
<h2 id="一-基础表单"><a href="#一-基础表单" class="headerlink" title="一. 基础表单"></a>一. 基础表单</h2><p>在Bootstrap对于基础表单没有做太多的定制效果，仅仅是对于一些元素的<strong>margin、padding和border</strong>进行了一些细化设置。<br>当然，也不会那么简单，在Bootstrap框架中，通过定制了一个类名<code>form-control</code>，也就是说，使用了类名<code>form-control</code>，将会实现一些设计上的定制效果。从源码中（2551行，嗯，善用搜索）可以得出结论如下：</p>
<ol>
<li>宽度变成了100%</li>
<li>设置了一个浅灰色（<code>#ccc</code>）的边框</li>
<li>具有4px的圆角</li>
<li>设置阴影效果，并且元素得到焦点之时，阴影和边框效果会有所变化</li>
<li>设置了placeholder(输入框的提示文字)的颜色为<code>#999</code></li>
</ol>
<p>这个类一般用于输入框，对于其他的类型使用，嗯，你可以试试自己尝试一下。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">role</span>=<span class="string">"form"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span><span class="comment">&lt;!-- form-group这个类在在这里用于控制表单之间的间隔，之后会有另外介绍 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"exampleInputEmail1"</span>&gt;</span>邮箱：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"exampleInputEmail1"</span> <span class="attr">placeholder</span>=<span class="string">"请输入您的邮箱地址"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"exampleInputPassword1"</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"exampleInputPassword1"</span> <span class="attr">placeholder</span>=<span class="string">"请输入您的邮箱密码"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure>
<p>一般来说效果是这样的：<br><img src="/images/Bootstrap/form1.jpg" alt="基础表单"></p>
<h3 id="内联表单"><a href="#内联表单" class="headerlink" title="内联表单"></a>内联表单</h3><p>还是上面那一段代码：我们只需要给<strong>form</strong>加上下面<code>.form-inline</code>这个类就可以实现表单元素在一行排列：</p>
<p><img src="/images/Bootstrap/form3.jpg" alt="内联表单"></p>
<p>它的实现原理很简单，其实就是在添加了这个类后，将内部的表单元素设置为了内联块（inline-block）。</p>
<p>我们继续改变屏幕大小会发现小到一定层度之后又变成了原来的样式，那是因为这个类是处于媒体查询中的！这样是为了更好的在移动设备上体验，Bootstrap本来就是一个响应式框架不是吗？</p>
<p>如果你想更简洁一点还可以对于<code>label</code>添加一个<code>.sr-only</code>类，把label标签进行隐藏。（注意是隐藏，而不是人为删除，设置label标签有助于屏幕阅读器理解此处的含义）</p>
<h3 id="水平表单"><a href="#水平表单" class="headerlink" title="水平表单"></a>水平表单</h3><p>Bootstrap框架默认的表单是<strong>垂直显示风格</strong>，除了上面的内联表达之外，很多时候我们需要的是<strong>水平表单风格</strong>。在Bootstrap框架中要实现水平表单效果，必须满足以下两个条件：</p>
<ol>
<li>在<code>&lt;form&gt;</code>元素是使用类名<code>.form-horizontal</code>，作用如下： </li>
</ol>
<ul>
<li>设置表单控件padding和margin值。</li>
<li>改变“form-group”的表现形式，类似于栅格系统的“row”。</li>
</ul>
<ol>
<li>配合Bootstrap框架的栅格系统。（栅格布局会在以后的章节中详细讲解）</li>
</ol>
<ul>
<li>例如：使用<code>&lt;div class=&quot;col-sm-6&quot;&gt;&lt;/div&gt;</code>将我们的input进行包裹，具体情况到栅格布局的时候再说</li>
</ul>
<p>可以实现下面的效果，（同样处于媒体查询中）<br><img src="/images/Bootstrap/form2.jpg" alt="水平表单"></p>
<h2 id="二-表单控件"><a href="#二-表单控件" class="headerlink" title="二. 表单控件"></a>二. 表单控件</h2><h3 id="输入框input"><a href="#输入框input" class="headerlink" title="输入框input"></a>输入框input</h3><p>单行文本框在html编写时，我们都需要设置<strong>type</strong>属性为<strong>text</strong>，在Bootstrap中也必须正确的添加type的类型，因为在这里是使用CSS的属性选择器如：<code>input[type=&quot;text&quot;]</code>来进行样式设置的！<br>为了让控件在各种表单风格中样式不出错，需要添加类名“form-control”，如：<code>&lt;input type=&quot;email&quot; class=&quot;form-control&quot; placeholder=&quot;请输入您的邮箱&quot;&gt;</code></p>
<h3 id="下拉选择框select"><a href="#下拉选择框select" class="headerlink" title="下拉选择框select"></a>下拉选择框select</h3><p>Bootstrap框架中的下拉选择框使用和原始的一致，但是Bootstrap框架为这些元素提供统一的样式风格。如：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">role</span>=<span class="string">"form"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">select</span>  <span class="attr">class</span>=<span class="string">"form-control"</span>&gt;</span> </div><div class="line">      <span class="tag">&lt;<span class="name">option</span>&gt;</span>踢足球<span class="tag">&lt;/<span class="name">option</span>&gt;</span> </div><div class="line">      <span class="tag">&lt;<span class="name">option</span>&gt;</span>游泳<span class="tag">&lt;/<span class="name">option</span>&gt;</span> </div><div class="line">      <span class="tag">&lt;<span class="name">option</span>&gt;</span>慢跑<span class="tag">&lt;/<span class="name">option</span>&gt;</span> </div><div class="line">      <span class="tag">&lt;<span class="name">option</span>&gt;</span>跳舞<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure>
<p>想要实现多行选择，只需要在<strong>select</strong>中设置multiple属性的值为multiple。<code>&lt;select multiple class=&quot;form-control&quot;&gt;</code></p>
<p>需要注意的是，经过测试多行选择是固定高度的（82px），也就是说只有一个选项时，也占据那么高的高度，在选项多时，将出现滚动条</p>
<h3 id="文本域textarea"><a href="#文本域textarea" class="headerlink" title="文本域textarea"></a>文本域textarea</h3><p>文本域和原始使用方法一样，设置<strong>rows可定义其高度</strong>，设置<strong>cols可以设置其宽度</strong>。但如果textarea元素中添加了类名<code>form-control</code>类名，则无需设置cols属性。因为Bootstrap框架中的<code>form-control</code>样式的表单控件宽度为100%或auto。<br>如：<code>&lt;textarea class=&quot;form-control&quot; rows=&quot;3&quot;&gt;&lt;/textarea&gt;</code></p>
<h3 id="复选框checkbox和单选按钮radio"><a href="#复选框checkbox和单选按钮radio" class="headerlink" title="复选框checkbox和单选按钮radio"></a>复选框checkbox和单选按钮radio</h3><p>Bootstrap对于这两个按钮进行了一些优化，要想达到最佳显示效果，有着如下说明：</p>
<ol>
<li>不管是<code>checkbox</code>还是<code>radio</code>都使用<code>label</code>包起来了。</li>
<li><code>checkbox</code>按钮连同<code>label</code>标签放置在一个名为<code>.checkbox</code>的容器内，<code>radio</code>连同<code>label</code>标签放置在一个名为<code>.radio</code>的容器内。</li>
<li>在Bootstrap框架中，主要借助<code>.checkbox</code>和<code>.radio</code>样式，来处理复选框、单选按钮与标签的对齐方式。</li>
<li>只需要将<code>checkbox</code>换成<code>checkbox-inline</code>就可以了，你可以添加在label上也可以添加在外部的容器上。</li>
</ol>
<h3 id="表单控件大小"><a href="#表单控件大小" class="headerlink" title="表单控件大小"></a>表单控件大小</h3><p>在Bootstrap中除了使用传统的控制大小（height，padding等等）方式外，还特意定制了两个类名用来控制大小，如下：</p>
<ol>
<li><code>input-sm</code>：让控件比正常大小更小</li>
<li><code>input-lg</code>：让控件比正常大小更大</li>
</ol>
<p>这两个类适用于表单中的<strong>input，textarea和select</strong>控件</p>
<h3 id="表单控件状态"><a href="#表单控件状态" class="headerlink" title="表单控件状态"></a>表单控件状态</h3><h4 id="焦点状态"><a href="#焦点状态" class="headerlink" title="焦点状态"></a>焦点状态</h4><p>焦点状态是通过伪类<code>:focus</code>来实现。在Bootstrap框架中表单控件的焦点状态删除了<code>outline</code>的默认样式，重新添加阴影效果。.</p>
<h4 id="禁用状态"><a href="#禁用状态" class="headerlink" title="禁用状态"></a>禁用状态</h4><p>Bootstrap实现禁用和普通的表单禁用状态的实现方法一样的，就是在相应的表单控件上添加属性<code>disabled</code>，只不过Bootstrap做了一些样式风格的处理：</p>
<p><img src="/images/Bootstrap/form-disabled.jpg" alt="禁用状态"></p>
<p>其次，除了单独给相应的表单控件添加disabled外，还可以直接添加到域中<code>&lt;fieldset disabled&gt;&lt;/fieldset&gt;</code>，在这种情况，整个域中的表单全部都将会被禁用，此外还有一个<strong>小bug</strong>：如果该域中存在<code>&lt;legend&gt;</code>(域标题)，在其内的表单控件，虽然有禁用的样式，但是实际上可以进行输入，点击等操作！</p>
<h4 id="验证状态"><a href="#验证状态" class="headerlink" title="验证状态"></a>验证状态</h4><p>在前面我们说过，Bootstrap有着大量的对于特定的情景内容的颜色设置，表单当然也不例外！在制作表单时，不免要做表单验证。同样也需要提供验证状态样式，那么Bootstrap框架中就提供了这几种效果：</p>
<ol>
<li><code>.has-warning</code>：警告状态（黄色）</li>
<li><code>.has-error</code>：错误状态（红色）</li>
<li><code>.has-success</code>：成功状态（绿色）</li>
</ol>
<p>除此之外，Bootstrap还实现了在不同的状态提示不同的<strong>icon</strong>，如果你想让表单在对应的状态下显示这样的效果，只需要在对应的状态下添加类名<code>has-feedback</code>。请注意，此类名要与<code>has-error</code>、<code>has-warning</code>和<code>has-success</code>在一起，代码如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">role</span>=<span class="string">"form"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group has-success has-feedback"</span>&gt;</span><span class="comment">&lt;!-- 最后一个class控制图标显示 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"control-label"</span> <span class="attr">for</span>=<span class="string">"inputSuccess1"</span>&gt;</span>成功状态<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"inputSuccess1"</span> <span class="attr">placeholder</span>=<span class="string">"成功状态"</span> &gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-ok form-control-feedback"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="comment">&lt;!-- 图标显示！选取显示图标 --&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- ...... 还有不同的图标显示例如glyphicon-warning-sign glyphicon-remove等等 --&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure>
<p>在 Bootstrap 的小图标都是使用<strong>@font-face</strong>来制作，只要有一个容器，就可以通过不同的类名来控制显示的图标。具体内容后面再详细介绍。</p>
<p>显示效果如下：</p>
<p><img src="/images/Bootstrap/form-status.jpg" alt="禁用状态"></p>
<h4 id="表单提示信息"><a href="#表单提示信息" class="headerlink" title="表单提示信息"></a>表单提示信息</h4><p>在表单验证的过程，未免会要提供不同的提示信息。在Bootstrap框架中也提供了这样的效果。提供了一个<code>help-block</code>类，例如：<code>&lt;span class=&quot;help-block&quot;&gt;您输入的信息是错误的&lt;/span&gt;</code>只要将其插入到input之后，提示信息将以块状显示，并且显示在控件底部。</p>
<h2 id="三-按钮"><a href="#三-按钮" class="headerlink" title="三. 按钮"></a>三. 按钮</h2><p>众所周知，我们创建的按钮通常通过下面这几种形式：:</p>
<ul>
<li><code>input[type=&quot;submit&quot;]</code>：提交按钮</li>
<li><code>input[type=&quot;button&quot;]</code>：普通按钮</li>
<li><code>input[type=&quot;reset&quot;]</code>：重置按钮</li>
<li><code>&lt;button&gt;&lt;/button&gt;</code>：按钮元素，（默认行为是提交）</li>
</ul>
<p><strong>在Bootstrap框架中的按钮都是采用<code>&lt;button&gt;</code>来实现。</strong></p>
<h3 id="1-情景按钮"><a href="#1-情景按钮" class="headerlink" title="1. 情景按钮"></a>1. 情景按钮</h3><p>也正如我们前面所说，Bootstrop对于按钮也做了不同情景下的类，用不同的颜色展示很好的描述了当前的状态。一下图片来自<a href="http://www.imooc.com" target="_blank" rel="external">慕课网</a></p>
<p><img src="/images/Bootstrap/form-btn1.jpg" alt="默认状态"><br><img src="/images/Bootstrap/form-btn2.jpg" alt="多种状态"></p>
<p>记住一点！Bootstrap中的按钮，<strong>第一前提是必须添加<code>btn</code>这个类</strong>，其他的各种类，都只能添加到其后。所以一个按钮应该是这个样子的：<code>&lt;button class=&quot;btn btn-info&quot; &gt;信息按钮&lt;/button&gt;</code>，若还有其他的样式，往<code>btn-info</code>后添加，充分利用css的层叠特性。</p>
<h3 id="2-按钮大小"><a href="#2-按钮大小" class="headerlink" title="2. 按钮大小"></a>2. 按钮大小</h3><p>Bootstrap有着很对相似的类（学习完后总结一下吧颜色，大小等等），比如现在要说的，改变按钮的大小，当然你可以自定义，但是Bootstrap默认为我们提供了一些，添加到<code>btn</code>类后就行！</p>
<p><img src="/images/Bootstrap/form-btn-size.jpg" alt="按钮大小"></p>
<h3 id="3-块状按钮"><a href="#3-块状按钮" class="headerlink" title="3. 块状按钮"></a>3. 块状按钮</h3><p>Bootstrap框架中提供了一个类名<code>btn-block</code>。使用这个类名就可以让按钮<strong>充满整个容器</strong>，并且这个按钮不会有任何的padding和margin值。在实际当中，常把这种按钮称为块状按钮。同样添加到<code>btn</code>类后即可生效</p>
<h3 id="4-活动与禁用状态"><a href="#4-活动与禁用状态" class="headerlink" title="4. 活动与禁用状态"></a>4. 活动与禁用状态</h3><p>Bootstrap框架针对按钮的状态做了一些特殊处理。主要分为两种：活动状态和禁用状态。</p>
<h4 id="活动状态"><a href="#活动状态" class="headerlink" title="活动状态"></a>活动状态</h4><p>Bootstrap按钮的活动状态主要包括按钮的悬浮状态(<code>:hover</code>)，点击状态(<code>:active</code>)和焦点状态（<code>:focus</code>）几种。</p>
<p>通过在源码中我们可以看到，Bootstrap对于每一种风格的按钮都做了单独的定制。需要进行修改的话可以参考源码！</p>
<h4 id="禁用状态-1"><a href="#禁用状态-1" class="headerlink" title="禁用状态"></a>禁用状态</h4><p>在Bootstrap框架中，要禁用按钮有两种实现方式：</p>
<ol>
<li>在标签中添加<code>disabled</code>属性</li>
<li>在元素标签中添加类名<code>.disabled</code></li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://guowenfh.github.io/"</span> <span class="attr">class</span>=<span class="string">"btn btn-danger disabled"</span> <span class="attr">type</span>=<span class="string">"button"</span>&gt;</span>添加disabled类<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://guowenfh.github.io/"</span> <span class="attr">class</span>=<span class="string">"btn btn-danger "</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">disabled</span>&gt;</span>添加disabled属性<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这两个方式除了样式上的改变之外，还存在是否阻止默认行为上的区别。（此处有大坑，暂时不能跳，以后在详细了解吧。不同浏览器，对于实现阻止默认行为的方式不同，IE11：两个方式都阻止默认行为，IE10-通过属性可以阻止，FF、Chrome通过类可以阻止默认行为。。我已经醉了）</p>
<p>从这里我们也可以看到，Bootstrap只需要在制作按钮的标签元素比如<code>&lt;div&gt;,&lt;span&gt;</code>等等，上添加类名<code>btn</code>就可以为其加上按钮风格，但是，<strong>并不建议这样使用，为了避免浏览器兼容性问题，个人强烈建议使用button或a标签来制作按钮。</strong></p>
<h2 id="四-图像"><a href="#四-图像" class="headerlink" title="四. 图像"></a>四. 图像</h2><p>在Bootstrap框架中对于图像的样式风格提供以下几种风格：</p>
<ol>
<li><code>.img-responsive</code>：响应式图片，主要针对于响应式设计</li>
<li><code>.img-rounded</code>：圆角图片</li>
<li><code>.img-circle</code>：圆形图片</li>
<li><code>.img-thumbnail</code>：缩略图片，相框效果</li>
</ol>
<p>直接把类名添加到img标签上就行了！</p>
<p><strong>注意：</strong><br>设置图片大小时，由于样式没有对图片做大小上的样式限制，所以在实际使用的时候，需要通过其他的方式来处理图片大小。比如说控制图片容器大小。（注意不可以通过css样式直接修改img图片的大小，这样操作就不响应了）</p>
<h3 id="图标"><a href="#图标" class="headerlink" title="图标"></a>图标</h3><p>这里说的图标就是Web制作中常看到的小icon图标，包括250多个来自 Glyphicon Halflings 的字体图标，Bootstrap框架中图标都是<strong>glyphicons.com</strong>这个商业网站提供的，并且<strong>免费授权</strong>给Bootstrap框架使用。</p>
<p>可以在<a href="http://v3.bootcss.com/components/#glyphicons" target="_blank" rel="external">Glyphicons 字体图标</a>，看到全部图标的样式，您可以根据你的需求进行设置</p>
<p>在网页中使用图标也非常的简单，在任何<strong>内联元素</strong>上应用所对应的样式即可：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-cloud"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-chevron-left"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这里第一个类是<strong>所有字体图标所必需的</strong>，第二个类用来自定义显示的图标。</p>
<p>从源码中我们可以看到<code>glyphicon</code>这个类,最主要的部分有着如下样式设置：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.glyphicon</span> &#123;</div><div class="line">    <span class="attribute">position</span>: relative;</div><div class="line">    <span class="attribute">top</span>: <span class="number">1px</span>;</div><div class="line">    <span class="attribute">display</span>: inline-block;</div><div class="line">    <span class="attribute">font-family</span>: <span class="string">'Glyphicons Halflings'</span>;</div><div class="line">    <span class="attribute">font-style</span>: normal;</div><div class="line">    <span class="attribute">font-weight</span>: normal;</div><div class="line">    <span class="attribute">line-height</span>: <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从这里，也就不难发现为什么是必须的了，它控制了标签的显示方式，和引入了字体图标库；而第二个类，仅仅是调用对应字体的编码而已</p>
<p>表单的部分呢，学到这里也就基本高一段落了，下面就要开始进行，Bootstrap的核心<strong>栅格系统</strong>的学习了，继续加油！</p>
<p>参考：</p>
<ul>
<li><a href="http://www.imooc.com/learn/141" target="_blank" rel="external">慕课网：玩转Bootstrap</a></li>
<li><a href="http://v3.bootcss.com/css/" target="_blank" rel="external">Bootstrap中文官网：全局 CSS 样式</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;关于表单的应用自然不需要多说，只要您的的网站可以用户登录，那么不可能不用到表单！表单主要功能是用来与用户做交流的一个网页控件，JavaScript发明之初最大的作用也就是用来进行表单操作。所以表单是每一个前端开发者必须要熟练掌握的东西。&lt;/p&gt;
&lt;
    
    </summary>
    
      <category term="Bootstrap" scheme="http://guowenfh.github.io/categories/Bootstrap/"/>
    
    
      <category term="Bootstrap" scheme="http://guowenfh.github.io/tags/Bootstrap/"/>
    
  </entry>
  
  <entry>
    <title>Bootstrap入门笔记之（一）排版</title>
    <link href="http://guowenfh.github.io/2016/01/18/Bootstrap-01-typesetting/"/>
    <id>http://guowenfh.github.io/2016/01/18/Bootstrap-01-typesetting/</id>
    <published>2016-01-18T05:40:46.000Z</published>
    <updated>2016-09-11T08:24:40.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-标题"><a href="#1-标题" class="headerlink" title="1. 标题"></a>1. 标题</h2><p>在Bootstrap中使用标题的方式和常规html一样：从<code>&lt;h1&gt;</code>到<code>&lt;h6&gt;</code>分别从大到小安排标题元素，只不过在Bootstrap中重新设置了其默认样式，从源码中可以看到有如下共性：</p>
<p>字体颜色与字体样式继承自父元素，字体粗细为500，且行高全部设为1.1（也就是font-size的1.1倍）</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attribute">font-family</span>: inherit;</div><div class="line">    <span class="attribute">font-weight</span>: <span class="number">500</span>;</div><div class="line">    <span class="attribute">line-height</span>: <span class="number">1.1</span>;</div><div class="line">    <span class="attribute">color</span>: inherit;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在不同大小的标题中有着如下区别：</p>
<ol>
<li>在Bootstrap中对于不同级别标题字体大小设置为：<strong>h1=36px，h2=30px，h3=24px，h4=18px，h5=14px和h6=12px。</strong></li>
<li>重新设置了<strong>margin-top</strong>和<strong>margin-bottom</strong>的值，<strong>h1~h3</strong>重置后的值都是<strong>20px</strong>；<strong>h4~h6</strong>重置后的值都是<strong>10px</strong>。</li>
</ol>
<p>除此之外在Bootstrap中为了<strong>让非标题元素和标题使用相同的样式</strong>，还特意定义了<strong>.h1~.h6</strong>六个类名。如下所示：</p>
<p>在Bootstrap中，下面的代码，显示效果相同。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--Bootstrap中的标题--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Bootstrap标题一<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Bootstrap标题二<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>Bootstrap标题三<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>Bootstrap标题四<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>Bootstrap标题五<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>Bootstrap标题六<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--Bootstrap中让非标题元素和标题使用相同的样式--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"h1"</span>&gt;</span>Bootstrap标题一<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"h2"</span>&gt;</span>Bootstrap标题二<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"h3"</span>&gt;</span>Bootstrap标题三<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"h4"</span>&gt;</span>Bootstrap标题四<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"h5"</span>&gt;</span>Bootstrap标题五<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"h6"</span>&gt;</span>Bootstrap标题六<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>因为在实际应用中，我们可能经常会遇到除了主标题外，之后紧跟着一个副标题的情况。Bootstrap人性化的为我们设置了这样一个效果。使用方式也特别简单，如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Bootstrap标题一<span class="tag">&lt;<span class="name">small</span>&gt;</span>我是副标题<span class="tag">&lt;/<span class="name">small</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div></pre></td></tr></table></figure>
<p>当然毋庸置疑的是，从<code>&lt;h1&gt;</code>到<code>&lt;h6&gt;</code>都可以使用该设置。副标题<code>&lt;small&gt;</code>有着自己一些独特的样式：</p>
<ol>
<li>行高全部都设置为了1，而且字体粗细变成了常规效果（不加粗），同时颜色被设置为灰色（<code>#999</code>）。</li>
<li>在h1~h3内的<code>&lt;small&gt;</code>标签文本，其大小都设置为当前字号的65%；而在h4~h6内的字号都设置为当前字号的75%；</li>
</ol>
<h2 id="2-正文文本"><a href="#2-正文文本" class="headerlink" title="2. 正文文本"></a>2. 正文文本</h2><p>Bootstrap中的文本全局样式如下：</p>
<ol>
<li>字体大小为14px</li>
<li>行高为1.42867143（约等于20px）</li>
<li>字体颜色为<code>#333</code></li>
<li>p标签外部有着10个像素的下外边距<code>margin-bottom:10px;</code></li>
</ol>
<p>当然，你是可以自行设置重置样式的。^_^</p>
<h2 id="3-强调"><a href="#3-强调" class="headerlink" title="3. 强调"></a>3. 强调</h2><h3 id="字体风格相关"><a href="#字体风格相关" class="headerlink" title="字体风格相关"></a>字体风格相关</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"lead"</span>&gt;</span>lead<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="comment">&lt;!-- 字体变大，行高变大，下外边距变大 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">i</span>&gt;</span>i<span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="comment">&lt;!--无特殊意义， 斜体 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">small</span>&gt;</span>small<span class="tag">&lt;/<span class="name">small</span>&gt;</span><span class="comment">&lt;!-- 小号字体--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">strong</span>&gt;</span>strong<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="comment">&lt;!-- 语气强烈的强调，粗体 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">em</span>&gt;</span>em<span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="comment">&lt;!-- 强调，斜体 --&gt;</span></div></pre></td></tr></table></figure>
<h3 id="强调相关的类"><a href="#强调相关的类" class="headerlink" title="强调相关的类"></a>强调相关的类</h3><p>在Bootstrap中定义了一系列的这样的类，用于不同的情景，出去text外，还有bg（背景颜色）等等。使用方法类似，只是前面的文本进行了一些改变！所以。<strong>记住这6个单词吧</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text-muted"</span>&gt;</span>提示，使用浅灰色（#999）<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text-primary"</span>&gt;</span>主要，使用蓝色（#428bca）<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text-success"</span>&gt;</span>成功，使用浅绿色(#3c763d)<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text-info"</span>&gt;</span>通知信息，使用浅蓝色（#31708f）<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text-warning"</span>&gt;</span>警告，使用黄色（#8a6d3b）<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text-danger"</span>&gt;</span>危险，使用褐色（#a94442）<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="4-文本对齐风格"><a href="#4-文本对齐风格" class="headerlink" title="4. 文本对齐风格"></a>4. 文本对齐风格</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text-left"</span>&gt;</span>我居左<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text-center"</span>&gt;</span>我居中<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text-right"</span>&gt;</span>我居右<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text-justify"</span>&gt;</span>我两端对齐<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<p>在Bootstrap中，为了简化操作，方便使用，使用了上面这四个类分别对应我们在CSS中常常使用<strong>text-align</strong>来实现文本的对齐风格的设置。</p>
<h2 id="5-列表"><a href="#5-列表" class="headerlink" title="5. 列表"></a>5. 列表</h2><p>在Bootstrap中对于列表的设置与原生的html基本一致，需要注意的有：</p>
<ol>
<li>在列表之间有10px的下外边距</li>
<li>在嵌套列表中，不含有下边距</li>
</ol>
<p>Bootstrap当然不会就这么简单做一点点修改，它定义了一些关于列表的类给我们使用。</p>
<h3 id="去点列表-list-unstyled"><a href="#去点列表-list-unstyled" class="headerlink" title="去点列表.list-unstyled"></a>去点列表<code>.list-unstyled</code></h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.list-unstyled</span> &#123;</div><div class="line">    <span class="attribute">padding-left</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">list-style</span>: none;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从源码中，我们可以看到这样的信息，它除了将项目编号去除之外，还将默认的左边距也清除掉了。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"list-unstyled"</span>&gt;</span></div><div class="line">    项目列表</div><div class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"list-unstyled"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>带有项目编号<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>带有项目编号<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></div></pre></td></tr></table></figure>
<p>在这样一段代码中，三个列表项会整齐的<strong>排列在一起</strong>，且都没有<strong>项目符号</strong></p>
<h3 id="内联列表-list-inline"><a href="#内联列表-list-inline" class="headerlink" title="内联列表.list-inline"></a>内联列表<code>.list-inline</code></h3><p>除了去点列表之外，Bootstrap还可以通过添加类名“.list-inline”来实现内联列表，简单点说就是<strong>把垂直列表换成水平列表，而且去掉项目符号（编号），保持水平显示。</strong>也可以说内联列表就是为制作水平导航而生。</p>
<h3 id="水平定义列表-dl-horizontal"><a href="#水平定义列表-dl-horizontal" class="headerlink" title="水平定义列表.dl-horizontal"></a>水平定义列表<code>.dl-horizontal</code></h3><p>现有代码如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dl</span> <span class="attr">class</span>=<span class="string">"dl-horizontal"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>标题一：<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>描述内容，我很喜欢前端，也很喜欢响应式布局，它能在个不同大小的屏幕下提供很好的体验，我现在是初学者，但是我会越来强的<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>标题二：标题二：标题二：标题二：<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>描述内容<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></div></pre></td></tr></table></figure>
<p>在浏览器全屏显示中可以看到效果如下：</p>
<p><img src="/images/Bootstrap/horizontal1.jpg" alt="自定义水平列表大屏"></p>
<p>我们来把屏幕大小进行改变，在遇到一个临界值时（小屏），水平定义列表将回复到原始的状态，如下改变：</p>
<p><img src="/images/Bootstrap/horizontal2.jpg" alt="自定义水平列表小屏"></p>
<p>这是为什么呢？我们去看看源码吧！<br>原来在这里添加了一个媒体查询，只有<strong>屏幕大于768px</strong>的时候，添加类名<code>.dl-horizontal</code>才具有水平定义列表效果。其实现主要方式：</p>
<ol>
<li><strong>将dt设置了一个左浮动，并且设置了一个宽度为160px</strong></li>
<li><strong>将dd设置一个margin-left的值为180px，达到水平的效果</strong></li>
<li><strong>当标题宽度超过160px时，将会显示三个省略号</strong></li>
</ol>
<p>现在再看看上面的效果是不是和这里的描述都是一样的呢？答案当然是肯定的 ^ ^</p>
<h2 id="6-代码"><a href="#6-代码" class="headerlink" title="6. 代码"></a>6. 代码</h2><p>在Bootstrap主要提供了三种代码风格：</p>
<ol>
<li>使用<code>&lt;code&gt;&lt;/code&gt;</code>来显示单行内联代码——针对于<strong>单个单词或单个句子</strong>的代码</li>
<li>使用<code>&lt;pre&gt;&lt;/pre&gt;</code>来显示多行块代码——针对于<strong>多行代码</strong>（也就是成块的代码）</li>
<li>使用<code>&lt;kbd&gt;&lt;/kbd&gt;</code>来显示用户输入代码——表示<strong>用户要通过键盘输入的内容</strong></li>
</ol>
<p>直接来看效果吧!</p>
<p><img src="/images/Bootstrap/code1.jpg" alt="code风格"></p>
<p>代码如下：（需要注意的是，**不管使用哪种代码风格，在代码中碰到小于号（<code>&lt;</code>）和大于号（<code>&gt;</code>）都需要使用转义字符来替代）</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">code风格：</div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Bootstrap的代码风格有三种：<span class="tag">&lt;<span class="name">code</span>&gt;</span>&amp;lt;code&amp;gt;<span class="tag">&lt;/<span class="name">code</span>&gt;</span>、<span class="tag">&lt;<span class="name">code</span>&gt;</span>&amp;lt;pre&amp;gt;<span class="tag">&lt;/<span class="name">code</span>&gt;</span>和<span class="tag">&lt;<span class="name">code</span>&gt;</span>&amp;lt;kbd&amp;gt;<span class="tag">&lt;/<span class="name">code</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">pre风格：</div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">pre</span>&gt;</span></div><div class="line">&amp;lt;ul&amp;gt;</div><div class="line">    &amp;lt;li&amp;gt;...&amp;lt;/li&amp;gt;</div><div class="line">&amp;lt;/ul&amp;gt;</div><div class="line"><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">kbd风格：</div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>请输入<span class="tag">&lt;<span class="name">kbd</span>&gt;</span>ctrl+c<span class="tag">&lt;/<span class="name">kbd</span>&gt;</span>来复制代码，然后使用<span class="tag">&lt;<span class="name">kbd</span>&gt;</span>ctrl+v<span class="tag">&lt;/<span class="name">kbd</span>&gt;</span>来粘贴代码<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p><code>&lt;pre&gt;</code>元素一般用于显示大块的代码，并保证原有格式不变。但有时候代码太多，而且不想让其占有太大的页面篇幅，就想控制代码块的大小。Bootstrap也考虑到这一点，你只需要在<strong>pre标签</strong>上添加类名<code>.pre-scrollable</code>，就可以控制代码块区域<strong>最大高度为340px</strong>，一旦超出这个高度，就会在<strong>Y轴（纵向）出现滚动条。</strong></p>
<p>当然，你也可以进行自定义配置，例如：只需要在自定义的css中，对于该类添加一个<code>word-wrap: normal;</code>，这样的话，在代码块边框横向宽度小于内部代码横向长度时，就会出现横向滚动条。</p>
<h2 id="7-表格"><a href="#7-表格" class="headerlink" title="7. 表格"></a>7. 表格</h2><p>表格是Bootstrap的一个基础组件之一，Bootstrap为表格提供了<strong>1种基础样式</strong>和<strong>4种附加样式</strong>以及<strong>1个支持响应式的表格</strong>。</p>
<p>对应上面所说的，Bootstrap为表格不同的样式风格提供了不同的类名，主要包括：</p>
<table>
<thead>
<tr>
<th style="text-align:center"><code>.table</code></th>
<th style="text-align:center">基础表格</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>.table-striped</code></td>
<td style="text-align:center">斑马线表格</td>
</tr>
<tr>
<td style="text-align:center"><code>.table-bordered</code></td>
<td style="text-align:center">带边框的表格</td>
</tr>
<tr>
<td style="text-align:center"><code>.table-hover</code></td>
<td style="text-align:center">鼠标悬停高亮的表格</td>
</tr>
<tr>
<td style="text-align:center"><code>.table-condensed</code></td>
<td style="text-align:center">紧凑型表格</td>
</tr>
<tr>
<td style="text-align:center"><code>.table-responsive</code></td>
<td style="text-align:center">响应式表格</td>
</tr>
</tbody>
</table>
<p><code>.table</code>主要有三个作用：</p>
<ul>
<li>给表格设置了margin-bottom:20px以及设置单元内距</li>
<li>在thead底部设置了一个2px的浅灰实线</li>
<li>每个单元格顶部设置了一个1px的浅灰实线</li>
</ul>
<p>具体大家可以在源码中查看，后几种附加的样式在这里也不多说，但是下面说一些<strong>注意事项：</strong></p>
<ol>
<li>后几种表格附加样式，必须在基础样式<code>.table</code>之后，例如<code>&lt;table class=&quot;table table-bordered table-hover&quot;&gt;</code></li>
<li>响应式表格：其原理是在表格<strong>外部添加容器</strong>把普通表格<strong>包裹</strong>起来，下面进行详细说明：</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"table-responsive"</span>&gt;</span><span class="comment">&lt;!-- 关键！容器包裹后实现响应式 --&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table table-bordered"</span>&gt;</span><span class="comment">&lt;!-- 设置表格样式，带边框的表格 --&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">thead</span>&gt;</span><span class="comment">&lt;!-- 一个表格应该有表头，若直接写tr&gt;td这样的结构，浏览器会自动创建一个tbody包裹 --&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">tbody</span>&gt;</span><span class="comment">&lt;!--与上同理，即使你不创建，浏览器也会自动添加tbody包裹你的代码  --&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>下面是宽屏的效果（和普通的表格无区别）：</p>
<p><img src="/images/Bootstrap/table-broad.png" alt="表格行的类"></p>
<p>此处是窄屏的效果（可以看到滚动条的出现）：<br><img src="/images/Bootstrap/table-Narrow.png" alt="表格行的类"></p>
<h3 id="表格行的类，表格情景"><a href="#表格行的类，表格情景" class="headerlink" title="表格行的类，表格情景"></a>表格行的类，表格情景</h3><p>在上面已经说到了在Bootstrap中，为不同的情景做了不一样的颜色，用于不同的信息展示。只是在类名上做了一些小小的改变。下面就可以看到：（图片来自<a href="http://www.imooc.com" target="_blank" rel="external">慕课网</a>）</p>
<p><img src="/images/Bootstrap/table.jpg" alt="表格行的类"></p>
<p>只需要在<strong><code>&lt;tr&gt;</code></strong>标签添加上这些类就可以使用了。<br>除此之外，通过源码可以看到，在这些颜色设置之外，Bootstrap还单独设置了<strong>hover效果（悬浮状态）</strong>的<strong>颜色加深</strong>效果（它对于不同的情况单独进行了颜色设置）。<br>实现也特别简单，只需要像<code>&lt;table class=&quot;table-hover&quot;&gt;</code>这样，在<code>&lt;table&gt;</code>标签加上一个<code>table-hover</code>的类。（在未对<code>&lt;tr&gt;</code>进行情景颜色设置时，该类依然有效果，只是效果不一样，上面已经说到了，因为它的单独设置，具体请到源码中查看）</p>
<p>也正因为这样，如果你想自定义颜色的话，<strong>除了修改<code>tr</code>元素的颜色样式外，在<code>.table-hover</code>表格中也要做相应的调整!</strong></p>
<p>排版的内容到这里就告一段落了，下面进行表单的学习！加油！</p>
<p>参考：</p>
<ul>
<li><a href="http://www.imooc.com/learn/141" target="_blank" rel="external">慕课网：玩转Bootstrap</a></li>
<li><a href="http://v3.bootcss.com/css/" target="_blank" rel="external">Bootstrap中文官网：全局 CSS 样式</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-标题&quot;&gt;&lt;a href=&quot;#1-标题&quot; class=&quot;headerlink&quot; title=&quot;1. 标题&quot;&gt;&lt;/a&gt;1. 标题&lt;/h2&gt;&lt;p&gt;在Bootstrap中使用标题的方式和常规html一样：从&lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt;到&lt;code&gt;&amp;
    
    </summary>
    
      <category term="Bootstrap" scheme="http://guowenfh.github.io/categories/Bootstrap/"/>
    
    
      <category term="Bootstrap" scheme="http://guowenfh.github.io/tags/Bootstrap/"/>
    
  </entry>
  
</feed>
